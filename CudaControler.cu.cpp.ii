#line 1 "C:/Users/Usuario/AppData/Local/Temp/tmpxft_00000aa0_00000000-9_CudaControler.cudafe1.cpp"
#pragma section("__nv_managed_data__")
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
#line 1 "src/CudaControler.cu"



#line 1 "src/CudaControler.cu"
#line 67 "include/cu\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#pragma region Input Buffer SAL 1 compatibility macros
#line 1472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#pragma endregion Input Buffer SAL 1 compatibility macros
#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
extern "C" {
#line 2967 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
}
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"
extern "C" {
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"
}
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
#pragma pack ( push, 8 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
extern "C" {
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
typedef unsigned __int64 uintptr_t; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
typedef char *va_list; 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
void __cdecl __va_start(va_list *, ...); 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
}
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
extern "C++" {
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
template< class _Ty> 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
struct __vcrt_va_list_is_reference { 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
enum: bool { __the_value}; 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
}; 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
template< class _Ty> 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
struct __vcrt_va_list_is_reference< _Ty &>  { 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
enum: bool { __the_value = '\001'}; 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
}; 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
template< class _Ty> 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
struct __vcrt_va_list_is_reference< _Ty &&>  { 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
enum: bool { __the_value = '\001'}; 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
}; 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
template< class _Ty> 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
struct __vcrt_assert_va_start_is_not_reference { 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
static_assert((!__vcrt_va_list_is_reference< _Ty> ::__the_value), "va_start argument must not have reference type and must not be parenthesized");
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
}; 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
}
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
#pragma pack ( pop )
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
typedef unsigned __int64 size_t; 


#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 1 "include/cu\\crt/host_runtime.h"






















#line 24 "include/cu\\crt/host_runtime.h"




























#line 53 "include/cu\\crt/host_runtime.h"



#line 57 "include/cu\\crt/host_runtime.h"

#line 1 "include/cu\\builtin_types.h"























































#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_types.h"























































#line 57 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_types.h"

#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"

























































#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"










































#line 102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"










#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"








































#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"








#line 165 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"



#line 169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"













#line 183 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"










#line 195 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"




#line 200 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"



#line 204 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"



#line 208 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"



#line 212 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"



#line 216 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"



#line 220 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"
        














#line 236 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"


#line 239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"




#line 244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"
#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_types.h"







enum  cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};




#line 78 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_types.h"

#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_types.h"
#line 57 "include/cu\\builtin_types.h"


#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"























































#line 57 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"

























































#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"



















































































































































































#line 239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"




#line 244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"
#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"























































#line 57 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"

























































#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"



















































































































































































#line 239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"




#line 244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/host_defines.h"
#line 65 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"






















#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 97 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"

struct  char1
{
    signed char x;
};

struct  uchar1
{
    unsigned char x;
};


struct  __declspec(align(2)) char2
{
    signed char x, y;
};

struct  __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct  char3
{
    signed char x, y, z;
};

struct  uchar3
{
    unsigned char x, y, z;
};

struct  __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct  __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct  short1
{
    short x;
};

struct  ushort1
{
    unsigned short x;
};

struct  __declspec(align(4)) short2
{
    short x, y;
};

struct  __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct  short3
{
    short x, y, z;
};

struct  ushort3
{
    unsigned short x, y, z;
};

struct  __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct  __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct  int1
{
    int x;
};

struct  uint1
{
    unsigned int x;
};

struct  __declspec(align(8)) int2 { int x; int y; };
struct  __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct  int3
{
    int x, y, z;
};

struct  uint3
{
    unsigned int x, y, z;
};

struct  __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct  __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct  long1
{
    long int x;
};

struct  ulong1
{
    unsigned long x;
};


struct  __declspec(align(8)) long2 { long int x; long int y; };
struct  __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 231 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"

struct  long3
{
    long int x, y, z;
};

struct  ulong3
{
    unsigned long int x, y, z;
};

struct  __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct  __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct  float1
{
    float x;
};















#line 273 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"

struct  __declspec(align(8)) float2 { float x; float y; };

#line 277 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"


struct  float3
{
    float x, y, z;
};

struct  __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct  longlong1
{
    long long int x;
};

struct  ulonglong1
{
    unsigned long long int x;
};

struct  __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct  __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct  longlong3
{
    long long int x, y, z;
};

struct  ulonglong3
{
    unsigned long long int x, y, z;
};

struct  __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct  __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct  double1
{
    double x;
};

struct  __declspec(align(16)) double2
{
    double x, y;
};

struct  double3
{
    double x, y, z;
};

struct  __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 354 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







typedef  struct char1 char1;
typedef  struct uchar1 uchar1;
typedef  struct char2 char2;
typedef  struct uchar2 uchar2;
typedef  struct char3 char3;
typedef  struct uchar3 uchar3;
typedef  struct char4 char4;
typedef  struct uchar4 uchar4;
typedef  struct short1 short1;
typedef  struct ushort1 ushort1;
typedef  struct short2 short2;
typedef  struct ushort2 ushort2;
typedef  struct short3 short3;
typedef  struct ushort3 ushort3;
typedef  struct short4 short4;
typedef  struct ushort4 ushort4;
typedef  struct int1 int1;
typedef  struct uint1 uint1;
typedef  struct int2 int2;
typedef  struct uint2 uint2;
typedef  struct int3 int3;
typedef  struct uint3 uint3;
typedef  struct int4 int4;
typedef  struct uint4 uint4;
typedef  struct long1 long1;
typedef  struct ulong1 ulong1;
typedef  struct long2 long2;
typedef  struct ulong2 ulong2;
typedef  struct long3 long3;
typedef  struct ulong3 ulong3;
typedef  struct long4 long4;
typedef  struct ulong4 ulong4;
typedef  struct float1 float1;
typedef  struct float2 float2;
typedef  struct float3 float3;
typedef  struct float4 float4;
typedef  struct longlong1 longlong1;
typedef  struct ulonglong1 ulonglong1;
typedef  struct longlong2 longlong2;
typedef  struct ulonglong2 ulonglong2;
typedef  struct longlong3 longlong3;
typedef  struct ulonglong3 ulonglong3;
typedef  struct longlong4 longlong4;
typedef  struct ulonglong4 ulonglong4;
typedef  struct double1 double1;
typedef  struct double2 double2;
typedef  struct double3 double3;
typedef  struct double4 double4;







struct  dim3
{
    unsigned int x, y, z;





#line 425 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
      dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
      dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
      operator uint3(void) const { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 429 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 430 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
};

typedef  struct dim3 dim3;






#line 440 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"

#line 442 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 60 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"










































































































#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"





#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











enum  cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorInvalidValue                 =     1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    




    cudaErrorCudartUnloading              =     4,

    




    cudaErrorProfilerDisabled             =     5,

    





    cudaErrorProfilerNotInitialized       =     6,

    




    cudaErrorProfilerAlreadyStarted       =     7,

    




     cudaErrorProfilerAlreadyStopped       =    8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    





    cudaErrorInvalidHostPointer           =     16,
  
    





    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
    
    



    cudaErrorMissingConfiguration         =      52,
  
    






    cudaErrorPriorLaunchFailure           =      53,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
  
    



    cudaErrorInvalidDeviceFunction        =      98,
  
    



    cudaErrorNoDevice                     =     100,
  
    



    cudaErrorInvalidDevice                =     101,

    


    cudaErrorStartupFailure               =    127,
  
    


    cudaErrorInvalidKernelImage           =     200,

    







    cudaErrorDeviceUninitialized          =     201,

    


    cudaErrorMapBufferObjectFailed        =     205,
  
    


    cudaErrorUnmapBufferObjectFailed      =     206,

    



    cudaErrorArrayIsMapped                =     207,

    


    cudaErrorAlreadyMapped                =     208,
  
    





    cudaErrorNoKernelImageForDevice       =     209,

    


    cudaErrorAlreadyAcquired              =     210,

    


    cudaErrorNotMapped                    =     211,

    



    cudaErrorNotMappedAsArray             =     212,

    



    cudaErrorNotMappedAsPointer           =     213,
  
    



    cudaErrorECCUncorrectable             =     214,
  
    



    cudaErrorUnsupportedLimit             =     215,
    
    



    cudaErrorDeviceAlreadyInUse           =     216,

    



    cudaErrorPeerAccessUnsupported        =     217,

    



    cudaErrorInvalidPtx                   =     218,

    


    cudaErrorInvalidGraphicsContext       =     219,

    



    cudaErrorNvlinkUncorrectable          =     220,

    




    cudaErrorJitCompilerNotFound          =     221,

    


    cudaErrorInvalidSource                =     300,

    


    cudaErrorFileNotFound                 =     301,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     302,
  
    


    cudaErrorSharedObjectInitFailed       =     303,

    


    cudaErrorOperatingSystem              =     304,
  
    




    cudaErrorInvalidResourceHandle        =     400,

    



    cudaErrorIllegalState                 =     401,

    



    cudaErrorSymbolNotFound               =     500,
  
    





    cudaErrorNotReady                     =     600,

    





    cudaErrorIllegalAddress               =     700,
  
    






    cudaErrorLaunchOutOfResources         =      701,
  
    








    cudaErrorLaunchTimeout                =      702,

    



    cudaErrorLaunchIncompatibleTexturing  =     703,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     704,
    
    




    cudaErrorPeerAccessNotEnabled         =     705,
  
    










    cudaErrorSetOnActiveProcess           =     708,

    




    cudaErrorContextIsDestroyed           =     709,

    




    cudaErrorAssert                        =    710,
  
    




    cudaErrorTooManyPeers                 =     711,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     712,
        
    



    cudaErrorHostMemoryNotRegistered      =     713,

    






    cudaErrorHardwareStackError           =     714,

    





    cudaErrorIllegalInstruction           =     715,

    






    cudaErrorMisalignedAddress            =     716,

    








    cudaErrorInvalidAddressSpace          =     717,

    





    cudaErrorInvalidPc                    =     718,
  
    








    cudaErrorLaunchFailure                =      719,

    






    cudaErrorCooperativeLaunchTooLarge    =     720,
    
    


    cudaErrorNotPermitted                 =     800,

    



    cudaErrorNotSupported                 =     801,

    






    cudaErrorSystemNotReady               =     802,

    




    cudaErrorSystemDriverMismatch         =     803,

    






    cudaErrorCompatNotSupportedOnDevice   =     804,

    


    cudaErrorStreamCaptureUnsupported     =    900,

    



    cudaErrorStreamCaptureInvalidated     =    901,

    



    cudaErrorStreamCaptureMerge           =    902,

    


    cudaErrorStreamCaptureUnmatched       =    903,

    



    cudaErrorStreamCaptureUnjoined        =    904,

    




    cudaErrorStreamCaptureIsolation       =    905,

    



    cudaErrorStreamCaptureImplicit        =    906,

    



    cudaErrorCapturedEvent                =    907,
  
    




    cudaErrorStreamCaptureWrongThread     =    908,

    


    cudaErrorTimeout                      =    909,

    



    cudaErrorGraphExecUpdateFailure       =    910,

    


    cudaErrorUnknown                      =    999,

    





    cudaErrorApiFailureBase               =  10000
};




enum  cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct  cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum  cudaMemoryType
{
    cudaMemoryTypeUnregistered = 0, 
    cudaMemoryTypeHost         = 1, 
    cudaMemoryTypeDevice       = 2, 
    cudaMemoryTypeManaged      = 3  
};




enum  cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct  cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct  cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct  cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct  cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct  cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct   cudaMemsetParams {
    void *dst;                              
    size_t pitch;                           
    unsigned int value;                     
    unsigned int elementSize;               
    size_t width;                           
    size_t height;                          
};





#line 1129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"





typedef void (__stdcall *cudaHostFn_t)(void *userData);




struct  cudaHostNodeParams {
    cudaHostFn_t fn;    
    void* userData; 
};




enum  cudaStreamCaptureStatus {
    cudaStreamCaptureStatusNone        = 0, 
    cudaStreamCaptureStatusActive      = 1, 
    cudaStreamCaptureStatusInvalidated = 2  

};





enum  cudaStreamCaptureMode {
    cudaStreamCaptureModeGlobal      = 0,
    cudaStreamCaptureModeThreadLocal = 1,
    cudaStreamCaptureModeRelaxed     = 2
};




struct cudaGraphicsResource;




enum  cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum  cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum  cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum  cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum  cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct  cudaResourceDesc {
    enum cudaResourceType resType;             
    
    union {
        struct {
            cudaArray_t array;                 
        } array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
        struct {
            void *devPtr;                      
            struct cudaChannelFormatDesc desc; 
            size_t sizeInBytes;                
        } linear;
        struct {
            void *devPtr;                      
            struct cudaChannelFormatDesc desc; 
            size_t width;                      
            size_t height;                     
            size_t pitchInBytes;               
        } pitch2D;
    } res;
};




struct  cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct  cudaPointerAttributes
{
    







    __declspec(deprecated) enum cudaMemoryType memoryType;

    



    enum cudaMemoryType type;

    








    int device;

    



    void *devicePointer;

    






    void *hostPointer;

    




    __declspec(deprecated) int isManaged;
};




struct  cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;

   




   int maxDynamicSharedSizeBytes;

   






   int preferredShmemCarveout;
};




enum  cudaFuncAttribute
{
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
    cudaFuncAttributePreferredSharedMemoryCarveout = 9, 
    cudaFuncAttributeMax
};




enum  cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum  cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum  cudaSharedCarveout {
    cudaSharedmemCarveoutDefault      = -1,  
    cudaSharedmemCarveoutMaxShared    = 100, 
    cudaSharedmemCarveoutMaxL1        = 0    
};




enum  cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum  cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04, 
    cudaLimitMaxL2FetchGranularity        = 0x05  
};




enum  cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum  cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly           = 1, 
    cudaMemRangeAttributePreferredLocation    = 2, 
    cudaMemRangeAttributeAccessedBy           = 3, 
    cudaMemRangeAttributeLastPrefetchLocation = 4  
};




enum  cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum  cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91, 
    cudaDevAttrReserved92                     = 92,
    cudaDevAttrReserved93                     = 93,
    cudaDevAttrReserved94                     = 94,
    cudaDevAttrCooperativeLaunch              = 95, 
    cudaDevAttrCooperativeMultiDeviceLaunch   = 96, 
    cudaDevAttrMaxSharedMemoryPerBlockOptin   = 97, 
    cudaDevAttrCanFlushRemoteWrites           = 98, 
    cudaDevAttrHostRegisterSupported          = 99, 
    cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100, 
    cudaDevAttrDirectManagedMemAccessFromHost = 101 
};





enum  cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3, 
    cudaDevP2PAttrCudaArrayAccessSupported     = 4  
};






struct  CUuuid_st {     
    char bytes[16];
};
typedef  struct CUuuid_st CUuuid;
#line 1653 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
typedef  struct CUuuid_st cudaUUID_t;




struct  cudaDeviceProp
{
    char         name[256];                  
    cudaUUID_t   uuid;                       
    char         luid[8];                    
    unsigned int luidDeviceNodeMask;         
    size_t       totalGlobalMem;             
    size_t       sharedMemPerBlock;          
    int          regsPerBlock;               
    int          warpSize;                   
    size_t       memPitch;                   
    int          maxThreadsPerBlock;         
    int          maxThreadsDim[3];           
    int          maxGridSize[3];             
    int          clockRate;                  
    size_t       totalConstMem;              
    int          major;                      
    int          minor;                      
    size_t       textureAlignment;           
    size_t       texturePitchAlignment;      
    int          deviceOverlap;              
    int          multiProcessorCount;        
    int          kernelExecTimeoutEnabled;   
    int          integrated;                 
    int          canMapHostMemory;           
    int          computeMode;                
    int          maxTexture1D;               
    int          maxTexture1DMipmap;         
    int          maxTexture1DLinear;         
    int          maxTexture2D[2];            
    int          maxTexture2DMipmap[2];      
    int          maxTexture2DLinear[3];      
    int          maxTexture2DGather[2];      
    int          maxTexture3D[3];            
    int          maxTexture3DAlt[3];         
    int          maxTextureCubemap;          
    int          maxTexture1DLayered[2];     
    int          maxTexture2DLayered[3];     
    int          maxTextureCubemapLayered[2];
    int          maxSurface1D;               
    int          maxSurface2D[2];            
    int          maxSurface3D[3];            
    int          maxSurface1DLayered[2];     
    int          maxSurface2DLayered[3];     
    int          maxSurfaceCubemap;          
    int          maxSurfaceCubemapLayered[2];
    size_t       surfaceAlignment;           
    int          concurrentKernels;          
    int          ECCEnabled;                 
    int          pciBusID;                   
    int          pciDeviceID;                
    int          pciDomainID;                
    int          tccDriver;                  
    int          asyncEngineCount;           
    int          unifiedAddressing;          
    int          memoryClockRate;            
    int          memoryBusWidth;             
    int          l2CacheSize;                
    int          maxThreadsPerMultiProcessor;
    int          streamPrioritiesSupported;  
    int          globalL1CacheSupported;     
    int          localL1CacheSupported;      
    size_t       sharedMemPerMultiprocessor; 
    int          regsPerMultiprocessor;      
    int          managedMemory;              
    int          isMultiGpuBoard;            
    int          multiGpuBoardGroupID;       
    int          hostNativeAtomicSupported;  
    int          singleToDoublePrecisionPerfRatio; 
    int          pageableMemoryAccess;       
    int          concurrentManagedAccess;    
    int          computePreemptionSupported; 
    int          canUseHostPointerForRegisteredMem; 
    int          cooperativeLaunch;          
    int          cooperativeMultiDeviceLaunch; 
    size_t       sharedMemPerBlockOptin;     
    int          pageableMemoryAccessUsesHostPageTables; 
    int          directManagedMemAccessFromHost; 
};

























































































typedef  struct  cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef  struct  cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;




enum  cudaExternalMemoryHandleType {
    


    cudaExternalMemoryHandleTypeOpaqueFd         = 1,
    


    cudaExternalMemoryHandleTypeOpaqueWin32      = 2,
    


    cudaExternalMemoryHandleTypeOpaqueWin32Kmt   = 3,
    


    cudaExternalMemoryHandleTypeD3D12Heap        = 4,
    


    cudaExternalMemoryHandleTypeD3D12Resource    = 5,
    


    cudaExternalMemoryHandleTypeD3D11Resource    = 6,
    


    cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7,
    


    cudaExternalMemoryHandleTypeNvSciBuf         = 8
};









































struct  cudaExternalMemoryHandleDesc {
    


    enum cudaExternalMemoryHandleType type;
    union {
        




        int fd;
        














        struct {
            


            void *handle;
            



            const void *name;
        } win32;
        



        const void *nvSciBufObject;
    } handle;
    


    unsigned long long size;
    


    unsigned int flags;
};




struct  cudaExternalMemoryBufferDesc {
    


    unsigned long long offset;
    


    unsigned long long size;
    


    unsigned int flags;
};
 



struct  cudaExternalMemoryMipmappedArrayDesc {
    



    unsigned long long offset;
    


    struct cudaChannelFormatDesc formatDesc;
    


    struct cudaExtent extent;
    



    unsigned int flags;
    


    unsigned int numLevels;
};
 



enum  cudaExternalSemaphoreHandleType {
    


    cudaExternalSemaphoreHandleTypeOpaqueFd       = 1,
    


    cudaExternalSemaphoreHandleTypeOpaqueWin32    = 2,
    


    cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
    


    cudaExternalSemaphoreHandleTypeD3D12Fence     = 4,
    


    cudaExternalSemaphoreHandleTypeD3D11Fence     = 5,
    


     cudaExternalSemaphoreHandleTypeNvSciSync     = 6,
    


    cudaExternalSemaphoreHandleTypeKeyedMutex     = 7,
    


    cudaExternalSemaphoreHandleTypeKeyedMutexKmt  = 8
};




struct  cudaExternalSemaphoreHandleDesc {
    


    enum cudaExternalSemaphoreHandleType type;
    union {
        



        int fd;
        













        struct {
            


            void *handle;
            



            const void *name;
        } win32;
        


        const void* nvSciSyncObj;
    } handle;
    


    unsigned int flags;
};




struct  cudaExternalSemaphoreSignalParams {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
        } keyedMutex;
    } params;
    









    unsigned int flags;
};




struct  cudaExternalSemaphoreWaitParams {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
            


            unsigned int timeoutMs;
        } keyedMutex;
    } params;
    









    unsigned int flags;
};











typedef  enum cudaError cudaError_t;




typedef  struct CUstream_st *cudaStream_t;




typedef  struct CUevent_st *cudaEvent_t;




typedef  struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef  enum cudaOutputMode cudaOutputMode_t;




typedef  struct CUexternalMemory_st *cudaExternalMemory_t;




typedef  struct CUexternalSemaphore_st *cudaExternalSemaphore_t;




typedef  struct CUgraph_st *cudaGraph_t;




typedef  struct CUgraphNode_st *cudaGraphNode_t;




enum  cudaCGScope {
    cudaCGScopeInvalid   = 0, 
    cudaCGScopeGrid      = 1, 
    cudaCGScopeMultiGrid = 2  
};




struct  cudaLaunchParams
{
    void *func;          
    dim3 gridDim;        
    dim3 blockDim;       
    void **args;         
    size_t sharedMem;    
    cudaStream_t stream; 
};




struct  cudaKernelNodeParams {
    void* func;                     
    dim3 gridDim;                   
    dim3 blockDim;                  
    unsigned int sharedMemBytes;    
    void **kernelParams;            
    void **extra;                   
};




enum  cudaGraphNodeType {
    cudaGraphNodeTypeKernel  = 0x00, 
    cudaGraphNodeTypeMemcpy  = 0x01, 
    cudaGraphNodeTypeMemset  = 0x02, 
    cudaGraphNodeTypeHost    = 0x03, 
    cudaGraphNodeTypeGraph   = 0x04, 
    cudaGraphNodeTypeEmpty   = 0x05, 
    cudaGraphNodeTypeCount
};




typedef struct CUgraphExec_st* cudaGraphExec_t;




enum  cudaGraphExecUpdateResult {
    cudaGraphExecUpdateSuccess                = 0x0, 
    cudaGraphExecUpdateError                  = 0x1, 
    cudaGraphExecUpdateErrorTopologyChanged   = 0x2, 
    cudaGraphExecUpdateErrorNodeTypeChanged   = 0x3, 
    cudaGraphExecUpdateErrorFunctionChanged   = 0x4, 
    cudaGraphExecUpdateErrorParametersChanged = 0x5, 
    cudaGraphExecUpdateErrorNotSupported      = 0x6  
};


 




#line 2323 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"



#line 2327 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 60 "include/cu\\builtin_types.h"

#line 62 "include/cu\\builtin_types.h"
#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"


























































#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2327 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 60 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"
























enum  cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum   cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct  surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef  unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"
#line 63 "include/cu\\builtin_types.h"
#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"


























































#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2327 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 60 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"
























enum  cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum  cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum  cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct  textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct  cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef  unsigned long long cudaTextureObject_t;


 

#line 218 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"
#line 64 "include/cu\\builtin_types.h"
#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
























































































































































































































































































































































































































































#line 442 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 65 "include/cu\\builtin_types.h"
#line 59 "include/cu\\crt/host_runtime.h"
#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"






















#line 24 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"








#line 33 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"






#line 40 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 44 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 48 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 52 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 56 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 60 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 64 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 68 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 72 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 76 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 84 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 88 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 92 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 116 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 128 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"



#line 136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"

#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"




#line 143 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\storage_class.h"
#line 60 "include/cu\\crt/host_runtime.h"































































































































































































































#line 284 "include/cu\\crt/host_runtime.h"




#line 289 "include/cu\\crt/host_runtime.h"
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
typedef __int64 ptrdiff_t; 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
typedef __int64 intptr_t; 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
typedef bool __vcrt_bool; 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
extern "C++" {
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
template< class _CountofType, size_t _SizeOfArray> char (*__countof_helper(__unaligned _CountofType (& _Array)[_SizeOfArray]))[_SizeOfArray]; 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
}
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
void __cdecl __security_init_cookie(); 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
void __cdecl __security_check_cookie(uintptr_t _StackCookie); 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
__declspec(noreturn) void __cdecl __report_gsfailure(uintptr_t _StackCookie); 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
extern uintptr_t __security_cookie; 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
}__pragma(pack ( pop )) 
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
extern "C++" {
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
template< bool _Enable, class _Ty> struct _CrtEnableIf; 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
template< class _Ty> 
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
struct _CrtEnableIf< true, _Ty>  { 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef _Ty _Type; 
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
}; 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
}
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef bool __crt_bool; 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
void __cdecl _invalid_parameter_noinfo(); 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
__declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(); 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
__declspec(noreturn) void __cdecl 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
_invoke_watson(const __wchar_t * _Expression, const __wchar_t * _FunctionName, const __wchar_t * _FileName, unsigned _LineNo, uintptr_t _Reserved); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef int errno_t; 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef unsigned short wint_t; 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef unsigned short wctype_t; 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef long __time32_t; 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef __int64 __time64_t; 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
struct __crt_locale_data_public { 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
const unsigned short *_locale_pctype; 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
int _locale_mb_cur_max; 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
unsigned _locale_lc_codepage; 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
} __crt_locale_data_public; 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
struct __crt_locale_pointers { 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
struct __crt_locale_data *locinfo; 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
struct __crt_multibyte_data *mbcinfo; 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
} __crt_locale_pointers; 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef __crt_locale_pointers *_locale_t; 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
struct _Mbstatet { 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
unsigned long _Wchar; 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
unsigned short _Byte, _State; 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
} _Mbstatet; 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef _Mbstatet mbstate_t; 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef __time64_t time_t; 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
typedef size_t rsize_t; 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt.h"
}__pragma(pack ( pop )) 
#line 66 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_types.h"













#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_types.h"
#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 117 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 122 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 127 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 152 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 162 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 164 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"



#line 173 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 170 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"



#line 174 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 177 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 185 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 182 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"



#line 186 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 183 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"



#line 187 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 185 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 193 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 190 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 198 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 195 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 203 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 200 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 208 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 205 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 213 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 210 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 218 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 216 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"



#line 220 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 217 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"



#line 221 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 232 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 240 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 237 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 245 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 242 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 250 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 247 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 255 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 252 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 260 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 274 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"



#line 278 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 279 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 287 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 284 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 292 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 289 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 297 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 294 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 302 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 299 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 307 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 304 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 312 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 309 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 317 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 314 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 322 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 319 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 327 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 324 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 332 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 329 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 337 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 334 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 342 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 339 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 347 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 344 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 352 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 361 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 366 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 362 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 367 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 363 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 368 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 364 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 369 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 365 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 370 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 366 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 371 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 367 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 372 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 368 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 373 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 369 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 374 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 370 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 375 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 371 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 376 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 372 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 377 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 373 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 378 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 374 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 379 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 375 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 380 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 376 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 381 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 377 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 382 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 378 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 383 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 379 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 384 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 380 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 385 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 381 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 386 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 382 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 387 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 383 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 388 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 384 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 389 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 385 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 390 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 386 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 391 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 387 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 392 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 388 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 393 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 389 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 394 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 390 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 395 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 391 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 396 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 392 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 397 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 393 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 398 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 394 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 399 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 395 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 400 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 396 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 401 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 397 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 402 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 398 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 403 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 399 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 404 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 400 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 405 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 401 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 406 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 402 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 407 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 403 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 408 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 404 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 409 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 405 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 410 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 406 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 411 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 407 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 412 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 408 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 413 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 416 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"







#line 424 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 432 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"




#line 437 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_types.h"
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
namespace std { 
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
typedef decltype((nullptr)) nullptr_t; 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
}
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
using std::nullptr_t;
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
int *__cdecl _errno(); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
errno_t __cdecl _set_errno(int _Value); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
errno_t __cdecl _get_errno(int * _Value); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
extern unsigned long __cdecl __threadid(); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
extern uintptr_t __cdecl __threadhandle(); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stddef.h"
}__pragma(pack ( pop )) 
#line 189 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

































































































































































































































#line 415 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 973 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"













#line 987 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 984 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"















#line 1000 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 996 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
typedef struct cudaArray *cudaArray_t; 
#line 1001 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
typedef const cudaArray *cudaArray_const_t; 
#line 1003 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
struct cudaArray; 
#line 1008 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
#line 1013 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
#line 1015 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
struct cudaMipmappedArray; 
#line 1020 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"













#line 1034 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1031 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"















#line 1047 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1045 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"













#line 1059 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1058 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











#line 1070 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1070 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











#line 1082 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1080 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"





















#line 1102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1097 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"























#line 1121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

















#line 1133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
typedef void (__stdcall *cudaHostFn_t)(void * userData); 
#line 1139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"









#line 1149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











#line 1159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1158 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











#line 1170 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
struct cudaGraphicsResource; 
#line 1172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"















#line 1188 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1184 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











#line 1196 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1194 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

















#line 1212 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1207 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"













#line 1221 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1218 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











































































#line 1294 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1260 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"















































#line 1308 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1288 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"





















#line 1310 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1303 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

















#line 1321 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1358 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

























#line 1384 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1430 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











#line 1442 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1440 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"













#line 1454 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1452 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











#line 1464 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1462 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











#line 1474 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1471 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"













#line 1485 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1482 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

















#line 1500 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1495 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

















#line 1513 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1508 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"













#line 1522 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1519 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"









#line 1529 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1528 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"













































































































































































































#line 1734 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1636 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"













#line 1650 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1648 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"







#line 1656 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1651 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 1656 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1653 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 1658 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1658 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"





























































































































































#line 1816 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1829 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"








#line 1838 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1837 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"








#line 1846 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1842 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"





















#line 1864 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1917 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"



























#line 1945 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1974 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











#line 1986 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 1992 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"















#line 2008 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2020 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"





















#line 2042 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2058 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

























#line 2084 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"































#line 2140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

































#line 2187 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2209 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 2214 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2214 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 2219 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2219 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 2224 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2224 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 2229 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2229 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 2234 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2234 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 2239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 2244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 2249 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2249 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"




#line 2254 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2254 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"











#line 2266 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2263 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

















#line 2281 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2276 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"

















#line 2294 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2288 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"



















#line 2308 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 2301 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
#line 2306 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"



















#line 2326 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_types.h"
#line 84 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"











#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"
#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"









#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"
#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"







#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"
#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"




#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_types.h"
#line 84 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"













#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"









#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"
#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"









#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"
#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"



























#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"
#line 161 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"



























#line 189 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"
#line 212 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"




#line 217 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_types.h"
#line 70 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
typedef 
#line 54 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
enum cudaDataType_t { 
#line 56 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_R_16F = 2, 
#line 57 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_C_16F = 6, 
#line 58 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_R_32F = 0, 
#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_C_32F = 4, 
#line 60 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_R_64F = 1, 
#line 61 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_C_64F = 5, 
#line 62 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_R_8I = 3, 
#line 63 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_C_8I = 7, 
#line 64 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_R_8U, 
#line 65 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_C_8U, 
#line 66 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_R_32I, 
#line 67 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_C_32I, 
#line 68 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_R_32U, 
#line 69 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
CUDA_C_32U
#line 70 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
} cudaDataType; 
#line 78 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
typedef 
#line 73 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
enum libraryPropertyType_t { 
#line 75 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
MAJOR_VERSION, 
#line 76 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
MINOR_VERSION, 
#line 77 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
PATCH_LEVEL
#line 78 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\library_types.h"
} libraryPropertyType; 
#line 121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern "C" {
#line 123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 126 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 127 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 128 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetLastError(); 
#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 131 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 143 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 146 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 148 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 150 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 151 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 152 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 155 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 156 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern void *__stdcall cudaGetParameterBuffer(size_t alignment, size_t size); 
#line 206 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern void *__stdcall cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
#line 207 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 208 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
#line 226 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 227 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
#line 230 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
#line 231 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 233 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern unsigned __int64 __stdcall cudaCGGetIntrinsicHandle(cudaCGScope scope); 
#line 234 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaCGSynchronize(unsigned __int64 handle, unsigned flags); 
#line 235 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaCGSynchronizeGrid(unsigned __int64 handle, unsigned flags); 
#line 236 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned __int64 handle); 
#line 237 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned __int64 handle); 
#line 238 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
}
#line 240 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
#line 241 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
#line 242 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
#line 243 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 245 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern "C" {
#line 280 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceReset(); 
#line 301 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 386 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetLimit(cudaLimit limit, size_t value); 
#line 420 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 453 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 490 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
#line 534 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
#line 565 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 609 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
#line 636 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
#line 666 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
#line 713 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
#line 753 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
#line 796 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
#line 854 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
#line 889 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcCloseMemHandle(void * devPtr); 
#line 931 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadExit(); 
#line 957 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSynchronize(); 
#line 1006 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSetLimit(cudaLimit limit, size_t value); 
#line 1039 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
#line 1075 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 1122 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
#line 1181 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetLastError(); 
#line 1227 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 1243 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 1259 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 1288 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 1559 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
#line 1748 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 1797 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
#line 1837 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
#line 1858 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
#line 1895 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDevice(int device); 
#line 1916 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 1947 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetValidDevices(int * device_arr, int len); 
#line 2016 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDeviceFlags(unsigned flags); 
#line 2062 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceFlags(unsigned * flags); 
#line 2102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreate(cudaStream_t * pStream); 
#line 2134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 2180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
#line 2207 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
#line 2232 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
#line 2263 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 2289 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 2297 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
#line 2364 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
#line 2388 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream); 
#line 2413 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream); 
#line 2496 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
#line 2532 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
#line 2583 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
#line 2611 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
#line 2649 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
#line 2677 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus, unsigned __int64 * pId); 
#line 2714 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreate(cudaEvent_t * event); 
#line 2751 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 2790 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
#line 2821 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventQuery(cudaEvent_t event); 
#line 2851 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event); 
#line 2878 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 2921 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
#line 3098 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
#line 3152 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
#line 3211 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
#line 3234 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
#line 3365 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
#line 3430 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSignalExternalSemaphoresAsync(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
#line 3504 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaWaitExternalSemaphoresAsync(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
#line 3526 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
#line 3591 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 3648 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 3747 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
#line 3796 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
#line 3851 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
#line 3886 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 3925 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
#line 3949 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaSetDoubleForDevice(double * d); 
#line 3973 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaSetDoubleForHost(double * d); 
#line 4039 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
#line 4094 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
#line 4138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
#line 4258 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
#line 4289 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 4322 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocHost(void ** ptr, size_t size); 
#line 4365 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
#line 4411 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
#line 4440 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 4463 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeHost(void * ptr); 
#line 4486 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeArray(cudaArray_t array); 
#line 4509 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
#line 4575 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
#line 4659 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostRegister(void * ptr, size_t size, unsigned flags); 
#line 4682 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostUnregister(void * ptr); 
#line 4727 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
#line 4749 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostGetFlags(unsigned * pFlags, void * pHost); 
#line 4788 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
#line 4927 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
#line 5066 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
#line 5095 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
#line 5200 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3D(const cudaMemcpy3DParms * p); 
#line 5231 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
#line 5349 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
#line 5375 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
#line 5397 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemGetInfo(size_t * free, size_t * total); 
#line 5423 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
#line 5466 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 5501 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
#line 5549 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 5598 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 5647 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
#line 5694 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 5737 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
#line 5780 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
#line 5836 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 5871 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
#line 5933 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 5990 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 6046 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 6097 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 6148 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 6177 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset(void * devPtr, int value, size_t count); 
#line 6211 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
#line 6255 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
#line 6291 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
#line 6332 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
#line 6383 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
#line 6411 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
#line 6438 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSymbolSize(size_t * size, const void * symbol); 
#line 6508 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
#line 6624 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
#line 6683 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
#line 6722 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
#line 6782 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
#line 6824 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
#line 6867 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 6918 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 6968 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
#line 7175 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
#line 7217 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
#line 7239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice); 
#line 7302 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
#line 7337 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
#line 7376 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 7411 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 7443 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
#line 7481 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
#line 7510 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
#line 7581 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = 4294967295U); 
#line 7640 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); 
#line 7678 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
#line 7718 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
#line 7744 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaUnbindTexture(const textureReference * texref); 
#line 7773 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); 
#line 7803 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
#line 7848 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
#line 7873 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
#line 7908 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
#line 7938 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
#line 8153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
#line 8172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject); 
#line 8192 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
#line 8212 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
#line 8233 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
#line 8278 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
#line 8297 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
#line 8316 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
#line 8350 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDriverGetVersion(int * driverVersion); 
#line 8375 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 8422 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
#line 8519 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
#line 8552 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
#line 8577 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
#line 8621 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
#line 8644 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
#line 8667 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
#line 8709 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
#line 8732 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
#line 8755 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
#line 8796 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
#line 8819 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
#line 8842 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
#line 8880 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
#line 8904 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
#line 8941 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
#line 8968 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
#line 8996 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
#line 9027 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
#line 9058 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
#line 9089 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
#line 9123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
#line 9154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
#line 9186 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
#line 9217 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
#line 9248 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
#line 9274 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphDestroyNode(cudaGraphNode_t node); 
#line 9310 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphNode_t * pErrorNode, char * pLogBuffer, size_t bufferSize); 
#line 9344 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
#line 9385 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
#line 9426 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
#line 9459 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
#line 9534 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t * hErrorNode_out, cudaGraphExecUpdateResult * updateResult_out); 
#line 9559 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
#line 9580 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
#line 9600 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphDestroy(cudaGraph_t graph); 
#line 9605 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
#line 9850 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_runtime_api.h"
}
#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template< class T> __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 116 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
#line 117 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 127 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 128 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
#line 131 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(char)) * 8); 
#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 146 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 148 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 150 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 152 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 155 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
#line 156 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 160 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 162 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
#line 163 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 164 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 166 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
#line 170 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 171 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 173 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 174 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 176 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
#line 177 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 181 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 183 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
#line 184 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 185 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 187 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 188 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 190 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
#line 191 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 192 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 194 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 195 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 197 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
#line 198 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 199 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 201 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 202 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 204 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
#line 205 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 206 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 208 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 209 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 211 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
#line 212 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 213 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 215 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 216 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 218 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
#line 219 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 220 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 222 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 223 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 225 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
#line 226 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 227 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 229 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 230 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 232 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
#line 233 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 234 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 236 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 237 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
#line 240 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 241 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 243 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 246 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
#line 247 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 248 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 250 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 251 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 253 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
#line 254 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 255 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 257 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 258 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 260 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
#line 261 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 262 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 264 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 265 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 267 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
#line 268 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 269 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 271 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 272 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 274 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
#line 275 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 276 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 278 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 279 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 281 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
#line 282 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 283 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 285 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 286 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 288 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
#line 289 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 290 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 292 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 293 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 295 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
#line 296 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 297 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 299 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 300 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 302 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
#line 303 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 304 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 306 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 307 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 309 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
#line 310 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 311 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 313 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 314 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 318 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long> () 
#line 319 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 320 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 322 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 323 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 325 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> () 
#line 326 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 327 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 329 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 330 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 332 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> () 
#line 333 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 334 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 336 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 337 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 339 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> () 
#line 340 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 341 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 343 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 344 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 346 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> () 
#line 347 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 348 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 350 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 351 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 353 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> () 
#line 354 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 355 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 357 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 358 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 360 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> () 
#line 361 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 362 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 364 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 365 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 367 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> () 
#line 368 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 369 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 371 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 372 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 376 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
#line 377 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 378 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 380 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 381 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 383 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
#line 384 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 385 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 387 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 388 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 390 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
#line 391 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 392 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 394 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 395 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 397 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
#line 398 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
{ 
#line 399 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 401 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 402 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\channel_descriptor.h"
} 
#line 79 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
static __inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
{ 
#line 81 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
cudaPitchedPtr s; 
#line 83 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
(s.ptr) = d; 
#line 84 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
(s.pitch) = p; 
#line 85 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
(s.xsize) = xsz; 
#line 86 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
(s.ysize) = ysz; 
#line 88 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
return s; 
#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
} 
#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
static __inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
{ 
#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
cudaPos p; 
#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
(p.x) = x; 
#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
(p.y) = y; 
#line 112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
(p.z) = z; 
#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
return p; 
#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
} 
#line 132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
static __inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
{ 
#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
cudaExtent e; 
#line 136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
(e.width) = w; 
#line 137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
(e.height) = h; 
#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
(e.depth) = d; 
#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
return e; 
#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\driver_functions.h"
} 
#line 73 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline char1 make_char1(signed char x); 
#line 75 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline uchar1 make_uchar1(unsigned char x); 
#line 77 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline char2 make_char2(signed char x, signed char y); 
#line 79 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
#line 81 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline char3 make_char3(signed char x, signed char y, signed char z); 
#line 83 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
#line 85 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
#line 87 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline short1 make_short1(short x); 
#line 91 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ushort1 make_ushort1(unsigned short x); 
#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline short2 make_short2(short x, short y); 
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
#line 97 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline short3 make_short3(short x, short y, short z); 
#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
#line 101 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline short4 make_short4(short x, short y, short z, short w); 
#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline int1 make_int1(int x); 
#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline uint1 make_uint1(unsigned x); 
#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline int2 make_int2(int x, int y); 
#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline uint2 make_uint2(unsigned x, unsigned y); 
#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline int3 make_int3(int x, int y, int z); 
#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
#line 117 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline int4 make_int4(int x, int y, int z, int w); 
#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
#line 121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline long1 make_long1(long x); 
#line 123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ulong1 make_ulong1(unsigned long x); 
#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline long2 make_long2(long x, long y); 
#line 127 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline long3 make_long3(long x, long y, long z); 
#line 131 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline long4 make_long4(long x, long y, long z, long w); 
#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
#line 137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline float1 make_float1(float x); 
#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline float2 make_float2(float x, float y); 
#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline float3 make_float3(float x, float y, float z); 
#line 143 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline float4 make_float4(float x, float y, float z, float w); 
#line 145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline longlong1 make_longlong1(__int64 x); 
#line 147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x); 
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline longlong2 make_longlong2(__int64 x, __int64 y); 
#line 151 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y); 
#line 153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z); 
#line 155 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z); 
#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w); 
#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w); 
#line 161 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline double1 make_double1(double x); 
#line 163 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline double2 make_double2(double x, double y); 
#line 165 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline double3 make_double3(double x, double y, double z); 
#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.h"
static __inline double4 make_double4(double x, double y, double z, double w); 
#line 73 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline char1 make_char1(signed char x) 
#line 74 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 75 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
char1 t; (t.x) = x; return t; 
#line 76 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 78 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline uchar1 make_uchar1(unsigned char x) 
#line 79 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
uchar1 t; (t.x) = x; return t; 
#line 81 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 83 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline char2 make_char2(signed char x, signed char y) 
#line 84 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 85 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
char2 t; (t.x) = x; (t.y) = y; return t; 
#line 86 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 88 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 90 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
uchar2 t; (t.x) = x; (t.y) = y; return t; 
#line 91 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline char3 make_char3(signed char x, signed char y, signed char z) 
#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 101 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline short1 make_short1(short x) 
#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
short1 t; (t.x) = x; return t; 
#line 116 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ushort1 make_ushort1(unsigned short x) 
#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ushort1 t; (t.x) = x; return t; 
#line 121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline short2 make_short2(short x, short y) 
#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
short2 t; (t.x) = x; (t.y) = y; return t; 
#line 126 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 128 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ushort2 t; (t.x) = x; (t.y) = y; return t; 
#line 131 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline short3 make_short3(short x, short y, short z) 
#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 143 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline short4 make_short4(short x, short y, short z, short w) 
#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 146 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 148 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 150 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 151 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline int1 make_int1(int x) 
#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 155 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
int1 t; (t.x) = x; return t; 
#line 156 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 158 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline uint1 make_uint1(unsigned x) 
#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 160 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
uint1 t; (t.x) = x; return t; 
#line 161 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 163 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline int2 make_int2(int x, int y) 
#line 164 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 165 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
int2 t; (t.x) = x; (t.y) = y; return t; 
#line 166 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 168 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline uint2 make_uint2(unsigned x, unsigned y) 
#line 169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 170 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
uint2 t; (t.x) = x; (t.y) = y; return t; 
#line 171 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 173 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline int3 make_int3(int x, int y, int z) 
#line 174 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 175 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 176 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
#line 179 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 181 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 183 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline int4 make_int4(int x, int y, int z, int w) 
#line 184 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 185 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 186 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 188 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
#line 189 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 190 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 191 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 193 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline long1 make_long1(long x) 
#line 194 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 195 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
long1 t; (t.x) = x; return t; 
#line 196 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 198 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ulong1 make_ulong1(unsigned long x) 
#line 199 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 200 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ulong1 t; (t.x) = x; return t; 
#line 201 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 203 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline long2 make_long2(long x, long y) 
#line 204 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 205 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
long2 t; (t.x) = x; (t.y) = y; return t; 
#line 206 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 208 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
#line 209 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 210 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ulong2 t; (t.x) = x; (t.y) = y; return t; 
#line 211 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 213 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline long3 make_long3(long x, long y, long z) 
#line 214 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 215 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 216 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 218 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
#line 219 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 220 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 221 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 223 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline long4 make_long4(long x, long y, long z, long w) 
#line 224 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 225 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 226 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 228 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
#line 229 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 230 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 231 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 233 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline float1 make_float1(float x) 
#line 234 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 235 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
float1 t; (t.x) = x; return t; 
#line 236 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 238 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline float2 make_float2(float x, float y) 
#line 239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 240 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
float2 t; (t.x) = x; (t.y) = y; return t; 
#line 241 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 243 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline float3 make_float3(float x, float y, float z) 
#line 244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 245 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 246 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 248 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline float4 make_float4(float x, float y, float z, float w) 
#line 249 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 250 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 251 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 253 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline longlong1 make_longlong1(__int64 x) 
#line 254 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 255 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
longlong1 t; (t.x) = x; return t; 
#line 256 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 258 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x) 
#line 259 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 260 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ulonglong1 t; (t.x) = x; return t; 
#line 261 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 263 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline longlong2 make_longlong2(__int64 x, __int64 y) 
#line 264 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 265 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
longlong2 t; (t.x) = x; (t.y) = y; return t; 
#line 266 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 268 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y) 
#line 269 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 270 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
#line 271 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 273 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z) 
#line 274 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 275 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 276 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 278 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z) 
#line 279 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 280 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 281 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 283 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w) 
#line 284 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 285 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 286 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 288 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w) 
#line 289 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 290 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 291 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 293 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline double1 make_double1(double x) 
#line 294 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 295 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
double1 t; (t.x) = x; return t; 
#line 296 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 298 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline double2 make_double2(double x, double y) 
#line 299 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 300 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
double2 t; (t.x) = x; (t.y) = y; return t; 
#line 301 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 303 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline double3 make_double3(double x, double y, double z) 
#line 304 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 305 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 306 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 308 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
static __inline double4 make_double4(double x, double y, double z, double w) 
#line 309 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
{ 
#line 310 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 311 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\vector_functions.hpp"
} 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\errno.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\errno.h"
int *__cdecl _errno(); 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\errno.h"
errno_t __cdecl _set_errno(int _Value); 
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\errno.h"
errno_t __cdecl _get_errno(int * _Value); 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\errno.h"
unsigned long *__cdecl __doserrno(); 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\errno.h"
errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\errno.h"
errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\errno.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
const void *__cdecl memchr(const void * _Buf, int _Val, size_t _MaxCount); 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
int __cdecl memcmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
void *__cdecl memset(void * _Dst, int _Val, size_t _Size); 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
const char *__cdecl strchr(const char * _Str, int _Val); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
const char *__cdecl strrchr(const char * _Str, int _Ch); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
const char *__cdecl strstr(const char * _Str, const char * _SubStr); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
const __wchar_t *__cdecl wcschr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
const __wchar_t *__cdecl wcsrchr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
const __wchar_t *__cdecl wcsstr(const __wchar_t * _Str, const __wchar_t * _SubStr); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memcpy_s(void *const 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
_Destination, const rsize_t 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
_DestinationSize, const void *const 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
_Source, const rsize_t 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
_SourceSize) 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
if (_SourceSize == (0)) 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
if ((_Source == (0)) || (_DestinationSize < _SourceSize)) 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
memset(_Destination, 0, _DestinationSize); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
return 22; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
memcpy(_Destination, _Source, _SourceSize); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
} 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memmove_s(void *const 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
_Destination, const rsize_t 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
_DestinationSize, const void *const 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
_Source, const rsize_t 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
_SourceSize) 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
if (_SourceSize == (0)) 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
memmove(_Destination, _Source, _SourceSize); 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
} 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memcpy_s.h"
}__pragma(pack ( pop )) 
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
int __cdecl _memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
int __cdecl _memicmp_l(const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
void *__cdecl memccpy(void * _Dst, const void * _Src, int _Val, size_t _Size); 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
int __cdecl memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
extern "C++" inline void *__cdecl memchr(void *
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
_Pv, int 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
_C, size_t 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
_N) 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
{ 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
const void *const _Pvc = _Pv; 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
return const_cast< void *>(memchr(_Pvc, _C, _N)); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
} 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_memory.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl wcscat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl wcscpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl wcsncat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl wcsncpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcstok_s(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__declspec(allocator) __wchar_t *__cdecl _wcsdup(const __wchar_t * _String); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcscat_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source ) throw ( ) { return wcscat_s ( _Destination, _Size, _Source ); }}
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__wchar_t *__cdecl wcscat(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcscmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcscpy_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source ) throw ( ) { return wcscpy_s ( _Destination, _Size, _Source ); }}
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__wchar_t *__cdecl wcscpy(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl wcscspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl wcslen(const __wchar_t * _String); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl wcsnlen(const __wchar_t * _Source, size_t _MaxCount); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
static __inline size_t __cdecl wcsnlen_s(const __wchar_t *
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
_Source, size_t 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
_MaxCount) 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
{ 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
return (_Source == (0)) ? 0 : wcsnlen(_Source, _MaxCount); 
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
} 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsncat_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source, size_t _Count ) throw ( ) { return wcsncat_s ( _Destination, _Size, _Source, _Count ); }}
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsncat(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcsncmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsncpy_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source, size_t _Count ) throw ( ) { return wcsncpy_s ( _Destination, _Size, _Source, _Count ); }}
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsncpy(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
const __wchar_t *__cdecl wcspbrk(const __wchar_t * _String, const __wchar_t * _Control); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl wcsspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcstok(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 4141 4996)
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
static __inline __wchar_t *__cdecl _wcstok(__wchar_t *const 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
_String, const __wchar_t *const 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
_Delimiter) 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
{ 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
return wcstok(_String, _Delimiter, 0); 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
} 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__declspec(deprecated("wcstok has been changed to conform with the ISO C standard, adding an extra context parameter. To use the legacy Microsoft wcsto" "k, define _CRT_NON_CONFORMING_WCSTOK.")) inline __wchar_t *__cdecl 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
wcstok(__wchar_t *
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
_String, const __wchar_t *
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
_Delimiter) throw() 
#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
{ 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
return wcstok(_String, _Delimiter, 0); 
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
} 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcserror(int _ErrorNumber); 
#line 283 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, int _ErrorNumber); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], int _Error ) throw ( ) { return _wcserror_s ( _Buffer, _Size, _Error ); }}
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl __wcserror(const __wchar_t * _String); 
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl __wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _ErrorMessage); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl __wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _ErrorMessage ) throw ( ) { return __wcserror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsnicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcsnset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value, size_t _MaxCount); 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsnset_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t _Value, size_t _MaxCount ) throw ( ) { return _wcsnset_s ( _Destination, _Size, _Value, _MaxCount ); }}
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcsrev(__wchar_t * _String); 
#line 364 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcsset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value); 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsset_s ( wchar_t ( & _String ) [ _Size ], wchar_t _Value ) throw ( ) { return _wcsset_s ( _String, _Size, _Value ); }}
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcslwr_s(__wchar_t * _String, size_t _SizeInWords); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcslwr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcslwr_s ( _String, _Size ); }}
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcslwr(__wchar_t * _String); 
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcslwr_s_l(__wchar_t * _String, size_t _SizeInWords, _locale_t _Locale); 
#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcslwr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcslwr_s_l ( _String, _Size, _Locale ); }}
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcslwr_l(__wchar_t * _String, _locale_t _Locale); 
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcsupr_s(__wchar_t * _String, size_t _Size); 
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsupr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcsupr_s ( _String, _Size ); }}
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcsupr(__wchar_t * _String); 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcsupr_s_l(__wchar_t * _String, size_t _Size, _locale_t _Locale); 
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsupr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcsupr_s_l ( _String, _Size, _Locale ); }}
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcsupr_l(__wchar_t * _String, _locale_t _Locale); 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl wcsxfrm(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount); 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl _wcsxfrm_l(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcscoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcscoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsncoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsncoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsnicoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsnicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
extern "C++" {
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcschr(__wchar_t *_String, __wchar_t _C) 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
{ 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcschr(static_cast< const __wchar_t *>(_String), _C)); 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
} 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_String, const __wchar_t *_Control) 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
{ 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcspbrk(static_cast< const __wchar_t *>(_String), _Control)); 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
} 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_String, __wchar_t _C) 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
{ 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcsrchr(static_cast< const __wchar_t *>(_String), _C)); 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
} 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcsstr(__wchar_t *_String, const __wchar_t *_SubStr) 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
{ 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcsstr(static_cast< const __wchar_t *>(_String), _SubStr)); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
} 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
}
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsdup(const __wchar_t * _String); 
#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 606 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsrev(__wchar_t * _String); 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcslwr(__wchar_t * _String); 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsupr(__wchar_t * _String); 
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstring.h"
}__pragma(pack ( pop )) 
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl strcpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl strcat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl strerror_s(char * _Buffer, size_t _SizeInBytes, int _ErrorNumber); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl strncat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl strncpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strtok_s(char * _String, const char * _Delimiter, char ** _Context); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
void *__cdecl _memccpy(void * _Dst, const void * _Src, int _Val, size_t _MaxCount); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strcat_s ( char ( & _Destination ) [ _Size ], char const * _Source ) throw ( ) { return strcat_s ( _Destination, _Size, _Source ); }}
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
char *__cdecl strcat(char * _Destination, const char * _Source); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
#pragma warning(pop)
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl strcmp(const char * _Str1, const char * _Str2); 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _strcmpi(const char * _String1, const char * _String2); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl strcoll(const char * _String1, const char * _String2); 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _strcoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strcpy_s ( char ( & _Destination ) [ _Size ], char const * _Source ) throw ( ) { return strcpy_s ( _Destination, _Size, _Source ); }}
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
char *__cdecl strcpy(char * _Destination, const char * _Source); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
#pragma warning(pop)
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
size_t __cdecl strcspn(const char * _Str, const char * _Control); 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
__declspec(allocator) char *__cdecl _strdup(const char * _Source); 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl _strerror(const char * _ErrorMessage); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl _strerror_s(char * _Buffer, size_t _SizeInBytes, const char * _ErrorMessage); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strerror_s ( char ( & _Buffer ) [ _Size ], char const * _ErrorMessage ) throw ( ) { return _strerror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strerror(int _ErrorMessage); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strerror_s ( char ( & _Buffer ) [ _Size ], int _ErrorMessage ) throw ( ) { return strerror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _stricmp(const char * _String1, const char * _String2); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _stricoll(const char * _String1, const char * _String2); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _stricoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _stricmp_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
size_t __cdecl strlen(const char * _Str); 
#line 223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl _strlwr_s(char * _String, size_t _Size); 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strlwr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strlwr_s ( _String, _Size ); }}
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl _strlwr(char * _String); 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl _strlwr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strlwr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strlwr_s_l ( _String, _Size, _Locale ); }}
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl _strlwr_l(char * _String, _locale_t _Locale); 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strncat_s ( char ( & _Destination ) [ _Size ], char const * _Source, size_t _Count ) throw ( ) { return strncat_s ( _Destination, _Size, _Source, _Count ); }}
#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strncat(char * _Destination, const char * _Source, size_t _Count); 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl strncmp(const char * _Str1, const char * _Str2, size_t _MaxCount); 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _strnicmp_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _strnicoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _strnicoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _strncoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl _strncoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
size_t __cdecl __strncnt(const char * _String, size_t _Count); 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strncpy_s ( char ( & _Destination ) [ _Size ], char const * _Source, size_t _Count ) throw ( ) { return strncpy_s ( _Destination, _Size, _Source, _Count ); }}
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strncpy(char * _Destination, const char * _Source, size_t _Count); 
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
size_t __cdecl strnlen(const char * _String, size_t _MaxCount); 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
static __inline size_t __cdecl strnlen_s(const char *
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
_String, size_t 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
_MaxCount) 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
{ 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
return (_String == (0)) ? 0 : strnlen(_String, _MaxCount); 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
} 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl _strnset_s(char * _String, size_t _SizeInBytes, int _Value, size_t _MaxCount); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strnset_s ( char ( & _Destination ) [ _Size ], int _Value, size_t _Count ) throw ( ) { return _strnset_s ( _Destination, _Size, _Value, _Count ); }}
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl _strnset(char * _Destination, int _Value, size_t _Count); 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
const char *__cdecl strpbrk(const char * _Str, const char * _Control); 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl _strrev(char * _Str); 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl _strset_s(char * _Destination, size_t _DestinationSize, int _Value); 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strset_s ( char ( & _Destination ) [ _Size ], int _Value ) throw ( ) { return _strset_s ( _Destination, _Size, _Value ); }}
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Destination, int _Value); 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
size_t __cdecl strspn(const char * _Str, const char * _Control); 
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strtok(char * _String, const char * _Delimiter); 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl _strupr_s(char * _String, size_t _Size); 
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strupr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strupr_s ( _String, _Size ); }}
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl _strupr(char * _String); 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
errno_t __cdecl _strupr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strupr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strupr_s_l ( _String, _Size, _Locale ); }}
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl _strupr_l(char * _String, _locale_t _Locale); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
size_t __cdecl strxfrm(char * _Destination, const char * _Source, size_t _MaxCount); 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
size_t __cdecl _strxfrm_l(char * _Destination, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
extern "C++" {
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
inline char *__cdecl strchr(char *const _String, const int _Ch) 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
{ 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
return const_cast< char *>(strchr(static_cast< const char *>(_String), _Ch)); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
} 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
inline char *__cdecl strpbrk(char *const _String, const char *const _Control) 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
{ 
#line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
return const_cast< char *>(strpbrk(static_cast< const char *>(_String), _Control)); 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
} 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
inline char *__cdecl strrchr(char *const _String, const int _Ch) 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
{ 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
return const_cast< char *>(strrchr(static_cast< const char *>(_String), _Ch)); 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
} 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
inline char *__cdecl strstr(char *const _String, const char *const _SubString) 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
{ 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
return const_cast< char *>(strstr(static_cast< const char *>(_String), _SubString)); 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
} 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
}
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strdup(const char * _String); 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl strcmpi(const char * _String1, const char * _String2); 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl stricmp(const char * _String1, const char * _String2); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strlwr(char * _String); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
int __cdecl strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 572 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strnset(char * _String, int _Value, size_t _MaxCount); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strrev(char * _String); 
#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strset(char * _String, int _Value); 
#line 589 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
char *__cdecl strupr(char * _String); 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\string.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
struct tm { 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
int tm_sec; 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
int tm_min; 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
int tm_hour; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
int tm_mday; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
int tm_mon; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
int tm_year; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
int tm_wday; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
int tm_yday; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
int tm_isdst; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
}; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
__wchar_t *__cdecl _wasctime(const tm * _Tm); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
errno_t __cdecl _wasctime_s(__wchar_t * _Buffer, size_t _SizeInWords, const tm * _Tm); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wasctime_s ( wchar_t ( & _Buffer ) [ _Size ], struct tm const * _Time ) throw ( ) { return _wasctime_s ( _Buffer, _Size, _Time ); }}
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
size_t __cdecl wcsftime(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
size_t __cdecl _wcsftime_l(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm, _locale_t _Locale); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
__wchar_t *__cdecl _wctime32(const __time32_t * _Time); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
errno_t __cdecl _wctime32_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time32_t * _Time); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wctime32_s ( wchar_t ( & _Buffer ) [ _Size ], __time32_t const * _Time ) throw ( ) { return _wctime32_s ( _Buffer, _Size, _Time ); }}
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
__wchar_t *__cdecl _wctime64(const __time64_t * _Time); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
errno_t __cdecl _wctime64_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time64_t * _Time); 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wctime64_s ( wchar_t ( & _Buffer ) [ _Size ], __time64_t const * _Time ) throw ( ) { return _wctime64_s ( _Buffer, _Size, _Time ); }}
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
errno_t __cdecl _wstrdate_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wstrdate_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrdate_s ( _Buffer, _Size ); }}
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
__wchar_t *__cdecl _wstrdate(__wchar_t * _Buffer); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
errno_t __cdecl _wstrtime_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wstrtime_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrtime_s ( _Buffer, _Size ); }}
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
__wchar_t *__cdecl _wstrtime(__wchar_t * _Buffer); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
#pragma warning(push)
#pragma warning(disable: 4996)
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
static __inline __wchar_t *__cdecl _wctime(const time_t *const 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
_Time) 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
{ 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
return _wctime64(_Time); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
} 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
static __inline errno_t __cdecl _wctime_s(__wchar_t *const 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
_Buffer, const size_t 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
_SizeInWords, const time_t *const 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
_Time) 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
{ 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
} 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
}
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
#pragma warning(pop)
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wtime.h"
__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
typedef long clock_t; 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
struct _timespec32 { 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__time32_t tv_sec; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
long tv_nsec; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
}; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
struct _timespec64 { 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__time64_t tv_sec; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
long tv_nsec; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
}; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
struct timespec { 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
time_t tv_sec; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
long tv_nsec; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
}; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
int *__cdecl __daylight(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
long *__cdecl __dstbias(); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
long *__cdecl __timezone(); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
char **__cdecl __tzname(); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _get_daylight(int * _Daylight); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _get_dstbias(long * _DaylightSavingsBias); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _get_timezone(long * _TimeZone); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _get_tzname(size_t * _ReturnValue, char * _Buffer, size_t _SizeInBytes, int _Index); 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
char *__cdecl asctime(const tm * _Tm); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl asctime_s(char * _Buffer, size_t _SizeInBytes, const tm * _Tm); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl asctime_s ( char ( & _Buffer ) [ _Size ], struct tm const * _Time ) throw ( ) { return asctime_s ( _Buffer, _Size, _Time ); }}
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
clock_t __cdecl clock(); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
char *__cdecl _ctime32(const __time32_t * _Time); 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _ctime32_s(char * _Buffer, size_t _SizeInBytes, const __time32_t * _Time); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ctime32_s ( char ( & _Buffer ) [ _Size ], __time32_t const * _Time ) throw ( ) { return _ctime32_s ( _Buffer, _Size, _Time ); }}
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
char *__cdecl _ctime64(const __time64_t * _Time); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _ctime64_s(char * _Buffer, size_t _SizeInBytes, const __time64_t * _Time); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ctime64_s ( char ( & _Buffer ) [ _Size ], __time64_t const * _Time ) throw ( ) { return _ctime64_s ( _Buffer, _Size, _Time ); }}
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
double __cdecl _difftime32(__time32_t _Time1, __time32_t _Time2); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
double __cdecl _difftime64(__time64_t _Time1, __time64_t _Time2); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
tm *__cdecl _gmtime32(const __time32_t * _Time); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _gmtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
tm *__cdecl _gmtime64(const __time64_t * _Time); 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _gmtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
tm *__cdecl _localtime32(const __time32_t * _Time); 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _localtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
tm *__cdecl _localtime64(const __time64_t * _Time); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _localtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__time32_t __cdecl _mkgmtime32(tm * _Tm); 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__time64_t __cdecl _mkgmtime64(tm * _Tm); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__time32_t __cdecl _mktime32(tm * _Tm); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__time64_t __cdecl _mktime64(tm * _Tm); 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
size_t __cdecl strftime(char * _Buffer, size_t _SizeInBytes, const char * _Format, const tm * _Tm); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
size_t __cdecl _strftime_l(char * _Buffer, size_t _MaxSize, const char * _Format, const tm * _Tm, _locale_t _Locale); 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _strdate_s(char * _Buffer, size_t _SizeInBytes); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strdate_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return _strdate_s ( _Buffer, _Size ); }}
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
char *__cdecl _strdate(char * _Buffer); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
errno_t __cdecl _strtime_s(char * _Buffer, size_t _SizeInBytes); 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strtime_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return _strtime_s ( _Buffer, _Size ); }}
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
char *__cdecl _strtime(char * _Buffer); 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__time32_t __cdecl _time32(__time32_t * _Time); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__time64_t __cdecl _time64(__time64_t * _Time); 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
int __cdecl _timespec32_get(_timespec32 * _Ts, int _Base); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
int __cdecl _timespec64_get(_timespec64 * _Ts, int _Base); 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
void __cdecl _tzset(); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using GetLocalTime in" "stead. See online help for details.")) unsigned __cdecl 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_getsystime(tm * _Tm); 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetLocalTime in" "stead. See online help for details.")) unsigned __cdecl 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_setsystime(tm * _Tm, unsigned _Milliseconds); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline char *__cdecl ctime(const time_t *const 
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Time) 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _ctime64(_Time); 
#pragma warning(pop)
} 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline double __cdecl difftime(const time_t 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Time1, const time_t 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Time2) 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
return _difftime64(_Time1, _Time2); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
} 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline tm *__cdecl gmtime(const time_t *const 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Time) 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _gmtime64(_Time); 
#pragma warning(pop)
} 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline tm *__cdecl localtime(const time_t *const 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Time) 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _localtime64(_Time); 
#pragma warning(pop)
} 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline time_t __cdecl _mkgmtime(tm *const 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Tm) 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
return _mkgmtime64(_Tm); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
} 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline time_t __cdecl mktime(tm *const 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Tm) 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
return _mktime64(_Tm); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
} 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline time_t __cdecl time(time_t *const 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Time) 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
return _time64(_Time); 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
} 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline int __cdecl timespec_get(timespec *const 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Ts, const int 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Base) 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
return _timespec64_get((_timespec64 *)_Ts, _Base); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
} 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline errno_t __cdecl ctime_s(char *const 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Buffer, const size_t 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_SizeInBytes, const time_t *const 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Time) 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
return _ctime64_s(_Buffer, _SizeInBytes, _Time); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
} 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline errno_t __cdecl gmtime_s(tm *const 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Tm, const time_t *const 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Time) 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
return _gmtime64_s(_Tm, _Time); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
} 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
static __inline errno_t __cdecl localtime_s(tm *const 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Tm, const time_t *const 
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
_Time) 
#line 572 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
{ 
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
return _localtime64_s(_Tm, _Time); 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
} 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
void __cdecl tzset(); 
#line 600 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\time.h"
}__pragma(pack ( pop )) 
#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/common_functions.h"
extern "C" {
#line 83 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/common_functions.h"
extern clock_t __cdecl clock(); 
#line 88 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/common_functions.h"
extern void *__cdecl memset(void *, int, size_t); 
#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/common_functions.h"
extern void *__cdecl memcpy(void *, const void *, size_t); 
#line 91 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/common_functions.h"
}
#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern "C" {
#line 192 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __cdecl abs(int); 
#line 193 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern long __cdecl labs(long); 
#line 194 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern __int64 llabs(__int64); 
#line 244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl fabs(double x); 
#line 285 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern __inline float fabsf(float x); 
#line 289 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline int min(int, int); 
#line 291 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline unsigned umin(unsigned, unsigned); 
#line 292 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline __int64 llmin(__int64, __int64); 
#line 293 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline unsigned __int64 ullmin(unsigned __int64, unsigned __int64); 
#line 316 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl fminf(float x, float y); 
#line 336 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl fmin(double x, double y); 
#line 341 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline int max(int, int); 
#line 343 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline unsigned umax(unsigned, unsigned); 
#line 344 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline __int64 llmax(__int64, __int64); 
#line 345 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline unsigned __int64 ullmax(unsigned __int64, unsigned __int64); 
#line 368 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl fmaxf(float x, float y); 
#line 388 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl fmax(double, double); 
#line 430 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl sin(double x); 
#line 463 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl cos(double x); 
#line 482 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern void sincos(double x, double * sptr, double * cptr); 
#line 498 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr); 
#line 543 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl tan(double x); 
#line 612 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl sqrt(double x); 
#line 684 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double rsqrt(double x); 
#line 754 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float rsqrtf(float x); 
#line 812 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl log2(double x); 
#line 837 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl exp2(double x); 
#line 862 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl exp2f(float x); 
#line 887 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double exp10(double x); 
#line 910 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float exp10f(float x); 
#line 958 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl expm1(double x); 
#line 1003 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl expm1f(float x); 
#line 1058 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl log2f(float x); 
#line 1110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl log10(double x); 
#line 1181 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl log(double x); 
#line 1277 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl log1p(double x); 
#line 1374 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl log1pf(float x); 
#line 1436 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl floor(double x); 
#line 1475 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl exp(double x); 
#line 1506 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl cosh(double x); 
#line 1536 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl sinh(double x); 
#line 1566 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl tanh(double x); 
#line 1603 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl acosh(double x); 
#line 1641 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl acoshf(float x); 
#line 1657 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl asinh(double x); 
#line 1673 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl asinhf(float x); 
#line 1727 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl atanh(double x); 
#line 1781 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl atanhf(float x); 
#line 1838 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl ldexp(double x, int exp); 
#line 1894 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern __inline float ldexpf(float x, int exp); 
#line 1948 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl logb(double x); 
#line 2003 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl logbf(float x); 
#line 2033 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __cdecl ilogb(double x); 
#line 2063 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __cdecl ilogbf(float x); 
#line 2139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl scalbn(double x, int n); 
#line 2215 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl scalbnf(float x, int n); 
#line 2291 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl scalbln(double x, long n); 
#line 2367 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl scalblnf(float x, long n); 
#line 2443 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl frexp(double x, int * nptr); 
#line 2518 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern __inline float frexpf(float x, int * nptr); 
#line 2534 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl round(double x); 
#line 2551 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl roundf(float x); 
#line 2569 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern long __cdecl lround(double x); 
#line 2587 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern long __cdecl lroundf(float x); 
#line 2605 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern __int64 __cdecl llround(double x); 
#line 2623 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern __int64 __cdecl llroundf(float x); 
#line 2675 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl rintf(float x); 
#line 2692 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern long __cdecl lrint(double x); 
#line 2709 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern long __cdecl lrintf(float x); 
#line 2726 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern __int64 __cdecl llrint(double x); 
#line 2743 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern __int64 __cdecl llrintf(float x); 
#line 2796 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl nearbyint(double x); 
#line 2849 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl nearbyintf(float x); 
#line 2909 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl ceil(double x); 
#line 2923 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl trunc(double x); 
#line 2938 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl truncf(float x); 
#line 2964 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl fdim(double x, double y); 
#line 2990 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl fdimf(float x, float y); 
#line 3024 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl atan2(double y, double x); 
#line 3055 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl atan(double x); 
#line 3078 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl acos(double x); 
#line 3110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl asin(double x); 
#line 3153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl hypot(double x, double y); 
#line 3208 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double rhypot(double x, double y); 
#line 3252 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static __inline float __cdecl hypotf(float x, float y); 
#line 3306 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float rhypotf(float x, float y); 
#line 3350 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl norm3d(double a, double b, double c); 
#line 3401 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double rnorm3d(double a, double b, double c); 
#line 3450 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl norm4d(double a, double b, double c, double d); 
#line 3506 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double rnorm4d(double a, double b, double c, double d); 
#line 3551 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double norm(int dim, const double * t); 
#line 3602 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double rnorm(int dim, const double * t); 
#line 3654 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float rnormf(int dim, const float * a); 
#line 3698 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float normf(int dim, const float * a); 
#line 3743 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float norm3df(float a, float b, float c); 
#line 3794 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float rnorm3df(float a, float b, float c); 
#line 3843 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float norm4df(float a, float b, float c, float d); 
#line 3899 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float rnorm4df(float a, float b, float c, float d); 
#line 3988 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl cbrt(double x); 
#line 4074 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl cbrtf(float x); 
#line 4127 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double rcbrt(double x); 
#line 4177 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float rcbrtf(float x); 
#line 4237 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double sinpi(double x); 
#line 4297 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float sinpif(float x); 
#line 4349 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double cospi(double x); 
#line 4401 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float cospif(float x); 
#line 4431 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
#line 4461 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
#line 4773 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl pow(double x, double y); 
#line 4829 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl modf(double x, double * iptr); 
#line 4888 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl fmod(double x, double y); 
#line 4976 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl remainder(double x, double y); 
#line 5066 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl remainderf(float x, float y); 
#line 5120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl remquo(double x, double y, int * quo); 
#line 5174 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl remquof(float x, float y, int * quo); 
#line 5213 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl j0(double x); 
#line 5255 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float j0f(float x); 
#line 5316 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl j1(double x); 
#line 5377 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float j1f(float x); 
#line 5420 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl jn(int n, double x); 
#line 5463 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float jnf(int n, float x); 
#line 5515 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl y0(double x); 
#line 5567 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float y0f(float x); 
#line 5619 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl y1(double x); 
#line 5671 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float y1f(float x); 
#line 5724 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl yn(int n, double x); 
#line 5777 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float ynf(int n, float x); 
#line 5804 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl cyl_bessel_i0(double x); 
#line 5830 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float cyl_bessel_i0f(float x); 
#line 5857 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl cyl_bessel_i1(double x); 
#line 5883 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float cyl_bessel_i1f(float x); 
#line 5968 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl erf(double x); 
#line 6050 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl erff(float x); 
#line 6112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double erfinv(double y); 
#line 6169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float erfinvf(float y); 
#line 6210 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl erfc(double x); 
#line 6248 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl erfcf(float x); 
#line 6376 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl lgamma(double x); 
#line 6437 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double erfcinv(double y); 
#line 6493 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float erfcinvf(float y); 
#line 6551 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double normcdfinv(double y); 
#line 6609 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float normcdfinvf(float y); 
#line 6652 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double normcdf(double y); 
#line 6695 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float normcdff(float y); 
#line 6770 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double erfcx(double x); 
#line 6845 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float erfcxf(float x); 
#line 6981 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl lgammaf(float x); 
#line 7090 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl tgamma(double x); 
#line 7199 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl tgammaf(float x); 
#line 7212 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl copysign(double x, double y); 
#line 7225 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl copysignf(float x, float y); 
#line 7262 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl nextafter(double x, double y); 
#line 7299 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl nextafterf(float x, float y); 
#line 7315 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl nan(const char * tagp); 
#line 7331 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl nanf(const char * tagp); 
#line 7336 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __isinff(float); 
#line 7337 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __isnanf(float); 
#line 7347 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __finite(double); 
#line 7348 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __finitef(float); 
#line 7349 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __signbit(double); 
#line 7350 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __isnan(double); 
#line 7351 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __isinf(double); 
#line 7354 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __signbitf(float); 
#line 7515 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern double __cdecl fma(double x, double y, double z); 
#line 7673 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl fmaf(float x, float y, float z); 
#line 7682 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __signbitl(long double); 
#line 7688 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __finitel(long double); 
#line 7689 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __isinfl(long double); 
#line 7690 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern int __isnanl(long double); 
#line 7694 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl acosf(float); 
#line 7695 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl asinf(float); 
#line 7696 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl atanf(float); 
#line 7697 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl atan2f(float, float); 
#line 7698 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl cosf(float); 
#line 7699 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl sinf(float); 
#line 7700 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl tanf(float); 
#line 7701 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl coshf(float); 
#line 7702 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl sinhf(float); 
#line 7703 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl tanhf(float); 
#line 7704 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl expf(float); 
#line 7705 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl logf(float); 
#line 7706 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl log10f(float); 
#line 7707 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl modff(float, float *); 
#line 7708 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl powf(float, float); 
#line 7709 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl sqrtf(float); 
#line 7710 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl ceilf(float); 
#line 7711 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl floorf(float); 
#line 7712 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl fmodf(float, float); 
#line 8834 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
}
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
#pragma warning(push)
#pragma warning(disable:4738)
#pragma warning(disable:4820)
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
struct _exception { 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int type; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
char *name; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double arg1; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double arg2; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double retval; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
struct _complex { 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double x, y; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef float float_t; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef double double_t; 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern const double _HUGE; 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
void __cdecl _fperrraise(int _Except); 
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _dclass(double _X); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _ldclass(long double _X); 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _fdclass(float _X); 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _dsign(double _X); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _ldsign(long double _X); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _fdsign(float _X); 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _dpcomp(double _X, double _Y); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _ldpcomp(long double _X, long double _Y); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _fdpcomp(float _X, float _Y); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _dtest(double * _Px); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _ldtest(long double * _Px); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _fdtest(float * _Px); 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _d_int(double * _Px, short _Xexp); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _ld_int(long double * _Px, short _Xexp); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _fd_int(float * _Px, short _Xexp); 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _dscale(double * _Px, long _Lexp); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _ldscale(long double * _Px, long _Lexp); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _fdscale(float * _Px, long _Lexp); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _dunscale(short * _Pex, double * _Px); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _ldunscale(short * _Pex, long double * _Px); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _fdunscale(short * _Pex, float * _Px); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _dexp(double * _Px, double _Y, long _Eoff); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _ldexp(long double * _Px, long double _Y, long _Eoff); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _fdexp(float * _Px, float _Y, long _Eoff); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _dnorm(unsigned short * _Ps); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
short __cdecl _fdnorm(unsigned short * _Ps); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _dpoly(double _X, const double * _Tab, int _N); 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl _ldpoly(long double _X, const long double * _Tab, int _N); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl _fdpoly(float _X, const float * _Tab, int _N); 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _dlog(double _X, int _Baseflag); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl _ldlog(long double _X, int _Baseflag); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl _fdlog(float _X, int _Baseflag); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _dsin(double _X, unsigned _Qoff); 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl _ldsin(long double _X, unsigned _Qoff); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl _fdsin(float _X, unsigned _Qoff); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
union { 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
unsigned short _Sh[4]; 
#line 223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double _Val; 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} _double_val; 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
union { 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
unsigned short _Sh[2]; 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float _Val; 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} _float_val; 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
union { 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
unsigned short _Sh[4]; 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double _Val; 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} _ldouble_val; 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
union { 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
unsigned short _Word[4]; 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float _Float; 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double _Double; 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double _Long_double; 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} _float_const; 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C; 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C; 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C; 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern const _float_const _Eps_C, _Rteps_C; 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern const _float_const _FEps_C, _FRteps_C; 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern const _float_const _LEps_C, _LRteps_C; 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern const double _Zero_C, _Xbig_C; 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern const float _FZero_C, _FXbig_C; 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern const long double _LZero_C, _LXbig_C; 
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern "C++" {
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
inline int fpclassify(float _X) throw() 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _fdtest(&_X); 
#line 292 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
inline int fpclassify(double _X) throw() 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _dtest(&_X); 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
inline int fpclassify(long double _X) throw() 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _ldtest(&_X); 
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
inline bool signbit(float _X) throw() 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _fdsign(_X) != 0; 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
inline bool signbit(double _X) throw() 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _dsign(_X) != 0; 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
inline bool signbit(long double _X) throw() 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _ldsign(_X) != 0; 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
inline int _fpcomp(float _X, float _Y) throw() 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _fdpcomp(_X, _Y); 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
inline int _fpcomp(double _X, double _Y) throw() 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _dpcomp(_X, _Y); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 329 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
inline int _fpcomp(long double _X, long double _Y) throw() 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _ldpcomp(_X, _Y); 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template< class _Trc, class _Tre> struct _Combined_type { 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef float _Type; 
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template<> struct _Combined_type< float, double>  { 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef double _Type; 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template<> struct _Combined_type< float, long double>  { 
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef long double _Type; 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template< class _Ty, class _T2> struct _Real_widened { 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef long double _Type; 
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template<> struct _Real_widened< float, float>  { 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef float _Type; 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template<> struct _Real_widened< float, double>  { 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef double _Type; 
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 364 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template<> struct _Real_widened< double, float>  { 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef double _Type; 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template<> struct _Real_widened< double, double>  { 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef double _Type; 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template< class _Ty> struct _Real_type { 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef double _Type; 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template<> struct _Real_type< float>  { 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef float _Type; 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template<> struct _Real_type< long double>  { 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
typedef long double _Type; 
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}; 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _T1, class _T2 >
      inline int _fpcomp ( _T1 _X, _T2 _Y ) throw ( )
    {
        typedef typename _Combined_type < float,
            typename _Real_widened <
            typename _Real_type < _T1 > :: _Type,
            typename _Real_type < _T2 > :: _Type > :: _Type > :: _Type _Tw;
        return _fpcomp ( ( _Tw ) _X, ( _Tw ) _Y );
    }
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _Ty >
      inline bool isfinite ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) <= 0;
    }
#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _Ty >
      inline bool isinf ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == 1;
    }
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _Ty >
      inline bool isnan ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == 2;
    }
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _Ty >
      inline bool isnormal ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == ( - 1 );
    }
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool isgreater ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & 4 ) != 0;
    }
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool isgreaterequal ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 2 | 4 ) ) != 0;
    }
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool isless ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & 1 ) != 0;
    }
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool islessequal ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 1 | 2 ) ) != 0;
    }
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool islessgreater ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 1 | 4 ) ) != 0;
    }
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool isunordered ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return _fpcomp ( _X, _Y ) == 0;
    }
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl abs(int _X); 
#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long __cdecl labs(long _X); 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llabs(__int64 _X); 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl acos(double _X); 
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl asin(double _X); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl atan(double _X); 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl atan2(double _Y, double _X); 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl cos(double _X); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl cosh(double _X); 
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl exp(double _X); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl fabs(double _X); 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl fmod(double _X, double _Y); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl log(double _X); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl log10(double _X); 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl pow(double _X, double _Y); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl sin(double _X); 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl sinh(double _X); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl sqrt(double _X); 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl tan(double _X); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl tanh(double _X); 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl acosh(double _X); 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl asinh(double _X); 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl atanh(double _X); 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl atof(const char * _String); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _cabs(_complex _Complex_value); 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl cbrt(double _X); 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl ceil(double _X); 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _chgsign(double _X); 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl copysign(double _Number, double _Sign); 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _copysign(double _Number, double _Sign); 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl erf(double _X); 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl erfc(double _X); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl exp2(double _X); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl expm1(double _X); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl fdim(double _X, double _Y); 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl floor(double _X); 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl fma(double _X, double _Y, double _Z); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl fmax(double _X, double _Y); 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl fmin(double _X, double _Y); 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl frexp(double _X, int * _Y); 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl hypot(double _X, double _Y); 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _hypot(double _X, double _Y); 
#line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl ilogb(double _X); 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl ldexp(double _X, int _Y); 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl lgamma(double _X); 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llrint(double _X); 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llround(double _X); 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl log1p(double _X); 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl log2(double _X); 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl logb(double _X); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long __cdecl lrint(double _X); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long __cdecl lround(double _X); 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _matherr(_exception * _Except); 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl modf(double _X, double * _Y); 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl nan(const char * _X); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl nearbyint(double _X); 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl nextafter(double _X, double _Y); 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl nexttoward(double _X, long double _Y); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl remainder(double _X, double _Y); 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl remquo(double _X, double _Y, int * _Z); 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl rint(double _X); 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl round(double _X); 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl scalbln(double _X, long _Y); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl scalbn(double _X, int _Y); 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl tgamma(double _X); 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl trunc(double _X); 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _j0(double _X); 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _j1(double _X); 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _jn(int _X, double _Y); 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _y0(double _X); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _y1(double _X); 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl _yn(int _X, double _Y); 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl acoshf(float _X); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl asinhf(float _X); 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl atanhf(float _X); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl cbrtf(float _X); 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl _chgsignf(float _X); 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl copysignf(float _Number, float _Sign); 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl _copysignf(float _Number, float _Sign); 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl erff(float _X); 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl erfcf(float _X); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl expm1f(float _X); 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl exp2f(float _X); 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl fdimf(float _X, float _Y); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl fmaf(float _X, float _Y, float _Z); 
#line 557 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl fmaxf(float _X, float _Y); 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl fminf(float _X, float _Y); 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl _hypotf(float _X, float _Y); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl ilogbf(float _X); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl lgammaf(float _X); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llrintf(float _X); 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llroundf(float _X); 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl log1pf(float _X); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl log2f(float _X); 
#line 566 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl logbf(float _X); 
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long __cdecl lrintf(float _X); 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long __cdecl lroundf(float _X); 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl nanf(const char * _X); 
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl nearbyintf(float _X); 
#line 571 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl nextafterf(float _X, float _Y); 
#line 572 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl nexttowardf(float _X, long double _Y); 
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl remainderf(float _X, float _Y); 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl remquof(float _X, float _Y, int * _Z); 
#line 575 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl rintf(float _X); 
#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl roundf(float _X); 
#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl scalblnf(float _X, long _Y); 
#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl scalbnf(float _X, int _Y); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl tgammaf(float _X); 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl truncf(float _X); 
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl _logbf(float _X); 
#line 591 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl _nextafterf(float _X, float _Y); 
#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _finitef(float _X); 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _isnanf(float _X); 
#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _fpclassf(float _X); 
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _set_FMA3_enable(int _Flag); 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl _get_FMA3_enable(); 
#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl acosf(float _X); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl asinf(float _X); 
#line 612 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl atan2f(float _Y, float _X); 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl atanf(float _X); 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl ceilf(float _X); 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl cosf(float _X); 
#line 616 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl coshf(float _X); 
#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl expf(float _X); 
#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline float __cdecl fabsf(float _X) 
#line 670 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return (float)fabs(_X); 
#line 672 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl floorf(float _X); 
#line 679 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl fmodf(float _X, float _Y); 
#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline float __cdecl frexpf(float _X, int *_Y) 
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 697 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return (float)frexp(_X, _Y); 
#line 698 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline float __cdecl hypotf(float _X, float _Y) 
#line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _hypotf(_X, _Y); 
#line 703 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 705 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline float __cdecl ldexpf(float _X, int _Y) 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 707 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return (float)ldexp(_X, _Y); 
#line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl log10f(float _X); 
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl logf(float _X); 
#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl modff(float _X, float * _Y); 
#line 715 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl powf(float _X, float _Y); 
#line 716 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl sinf(float _X); 
#line 717 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl sinhf(float _X); 
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl sqrtf(float _X); 
#line 719 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl tanf(float _X); 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
float __cdecl tanhf(float _X); 
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl acoshl(long double _X); 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl acosl(long double _X) 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return acos((double)_X); 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl asinhl(long double _X); 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl asinl(long double _X) 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 785 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return asin((double)_X); 
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl atan2l(long double _Y, long double _X) 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return atan2((double)_Y, (double)_X); 
#line 791 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 793 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl atanhl(long double _X); 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl atanl(long double _X) 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return atan((double)_X); 
#line 798 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl cbrtl(long double _X); 
#line 802 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl ceill(long double _X) 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 804 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return ceil((double)_X); 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl _chgsignl(long double _X) 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _chgsign((double)_X); 
#line 810 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 812 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl copysignl(long double _Number, long double _Sign); 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl _copysignl(long double _Number, long double _Sign) 
#line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _copysign((double)_Number, (double)_Sign); 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl coshl(long double _X) 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 821 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return cosh((double)_X); 
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl cosl(long double _X) 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return cos((double)_X); 
#line 827 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 829 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl erfl(long double _X); 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl erfcl(long double _X); 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl expl(long double _X) 
#line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return exp((double)_X); 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl exp2l(long double _X); 
#line 838 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl expm1l(long double _X); 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl fabsl(long double _X) 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 842 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return fabs((double)_X); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl fdiml(long double _X, long double _Y); 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl floorl(long double _X) 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return floor((double)_X); 
#line 850 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 852 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl fmal(long double _X, long double _Y, long double _Z); 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl fmaxl(long double _X, long double _Y); 
#line 854 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl fminl(long double _X, long double _Y); 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl fmodl(long double _X, long double _Y) 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return fmod((double)_X, (double)_Y); 
#line 859 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl frexpl(long double _X, int *_Y) 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return frexp((double)_X, _Y); 
#line 864 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 866 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
int __cdecl ilogbl(long double _X); 
#line 868 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl _hypotl(long double _X, long double _Y) 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _hypot((double)_X, (double)_Y); 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 873 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl hypotl(long double _X, long double _Y) 
#line 874 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 875 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _hypot((double)_X, (double)_Y); 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 878 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl ldexpl(long double _X, int _Y) 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return ldexp((double)_X, _Y); 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl lgammal(long double _X); 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llrintl(long double _X); 
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llroundl(long double _X); 
#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl logl(long double _X) 
#line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return log((double)_X); 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl log10l(long double _X) 
#line 893 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 894 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return log10((double)_X); 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl log1pl(long double _X); 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl log2l(long double _X); 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl logbl(long double _X); 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long __cdecl lrintl(long double _X); 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long __cdecl lroundl(long double _X); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl modfl(long double _X, long double *_Y) 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 905 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double _F, _I; 
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
_F = modf((double)_X, &_I); 
#line 907 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
(*_Y) = _I; 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return _F; 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 911 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl nanl(const char * _X); 
#line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl nearbyintl(long double _X); 
#line 913 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl nextafterl(long double _X, long double _Y); 
#line 914 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl nexttowardl(long double _X, long double _Y); 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl powl(long double _X, long double _Y) 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return pow((double)_X, (double)_Y); 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl remainderl(long double _X, long double _Y); 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl remquol(long double _X, long double _Y, int * _Z); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl rintl(long double _X); 
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl roundl(long double _X); 
#line 925 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl scalblnl(long double _X, long _Y); 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl scalbnl(long double _X, int _Y); 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl sinhl(long double _X) 
#line 929 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 930 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return sinh((double)_X); 
#line 931 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl sinl(long double _X) 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return sin((double)_X); 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl sqrtl(long double _X) 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return sqrt((double)_X); 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 943 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl tanhl(long double _X) 
#line 944 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return tanh((double)_X); 
#line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 948 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl tanl(long double _X) 
#line 949 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
{ 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
return tan((double)_X); 
#line 951 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
} 
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl tgammal(long double _X); 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
long double __cdecl truncl(long double _X); 
#line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
extern double HUGE; 
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl j0(double _X); 
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl j1(double _X); 
#line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl jn(int _X, double _Y); 
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl y0(double _X); 
#line 984 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl y1(double _X); 
#line 985 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
double __cdecl yn(int _X, double _Y); 
#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
}
#line 991 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
#pragma warning(pop)
#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_math.h"
__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_calloc_base(size_t _Count, size_t _Size); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
calloc(size_t _Count, size_t _Size); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
int __cdecl _callnewh(size_t _Size); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) void *__cdecl 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_expand(void * _Block, size_t _Size); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
void __cdecl _free_base(void * _Block); 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
void __cdecl free(void * _Block); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_malloc_base(size_t _Size); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
malloc(size_t _Size); 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
size_t __cdecl _msize_base(void * _Block); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
size_t __cdecl _msize(void * _Block); 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_realloc_base(void * _Block, size_t _Size); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
realloc(void * _Block, size_t _Size); 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_recalloc_base(void * _Block, size_t _Count, size_t _Size); 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_recalloc(void * _Block, size_t _Count, size_t _Size); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
void __cdecl _aligned_free(void * _Block); 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_aligned_malloc(size_t _Size, size_t _Alignment); 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
size_t __cdecl _aligned_msize(void * _Block, size_t _Alignment, size_t _Offset); 
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_realloc(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_aligned_realloc(void * _Block, size_t _Size, size_t _Alignment); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
_aligned_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment); 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_malloc.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
typedef int (__cdecl *_CoreCrtSecureSearchSortCompareFunction)(void *, const void *, const void *); 
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
typedef int (__cdecl *_CoreCrtNonSecureSearchSortCompareFunction)(const void *, const void *); 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
void *__cdecl bsearch_s(const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
void __cdecl qsort_s(void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
void *__cdecl bsearch(const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
void __cdecl qsort(void * _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
void *__cdecl _lfind_s(const void * _Key, const void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
void *__cdecl _lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
void *__cdecl _lsearch_s(const void * _Key, void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
void *__cdecl _lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
void *__cdecl lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
void *__cdecl lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_search.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _itow_s(int _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _itow_s ( int _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _itow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _itow(int _Value, __wchar_t * _Buffer, int _Radix); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _ltow_s(long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ltow_s ( long _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ltow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _ltow(long _Value, __wchar_t * _Buffer, int _Radix); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ultow_s ( unsigned long _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ultow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _ultow(unsigned long _Value, __wchar_t * _Buffer, int _Radix); 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
double __cdecl wcstod(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
double __cdecl _wcstod_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
long __cdecl wcstol(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
long __cdecl _wcstol_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl wcstoll(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wcstoll_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
unsigned long __cdecl wcstoul(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
unsigned long __cdecl _wcstoul_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
unsigned __int64 __cdecl wcstoull(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
unsigned __int64 __cdecl _wcstoull_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
long double __cdecl wcstold(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
long double __cdecl _wcstold_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
float __cdecl wcstof(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
float __cdecl _wcstof_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
double __cdecl _wtof(const __wchar_t * _String); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
double __cdecl _wtof_l(const __wchar_t * _String, _locale_t _Locale); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
int __cdecl _wtoi(const __wchar_t * _String); 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
int __cdecl _wtoi_l(const __wchar_t * _String, _locale_t _Locale); 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
long __cdecl _wtol(const __wchar_t * _String); 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
long __cdecl _wtol_l(const __wchar_t * _String, _locale_t _Locale); 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wtoll(const __wchar_t * _String); 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wtoll_l(const __wchar_t * _String, _locale_t _Locale); 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _i64tow_s(__int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _i64tow(__int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _ui64tow_s(unsigned __int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 283 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _ui64tow(unsigned __int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wtoi64(const __wchar_t * _String); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wtoi64_l(const __wchar_t * _String, _locale_t _Locale); 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wcstoi64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wcstoi64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
unsigned __int64 __cdecl _wcstoui64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__declspec(allocator) __wchar_t *__cdecl _wfullpath(__wchar_t * _Buffer, const __wchar_t * _Path, size_t _BufferCount); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wmakepath_s(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wmakepath_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Drive, wchar_t const * _Dir, wchar_t const * _Filename, wchar_t const * _Ext ) throw ( ) { return _wmakepath_s ( _Buffer, _Size, _Drive, _Dir, _Filename, _Ext ); }}
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
void __cdecl _wmakepath(__wchar_t * _Buffer, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
#pragma warning(pop)
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
void __cdecl _wsplitpath(const __wchar_t * _FullPath, __wchar_t * _Drive, __wchar_t * _Dir, __wchar_t * _Filename, __wchar_t * _Ext); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wsplitpath_s(const __wchar_t * _FullPath, __wchar_t * _Drive, size_t _DriveCount, __wchar_t * _Dir, size_t _DirCount, __wchar_t * _Filename, size_t _FilenameCount, __wchar_t * _Ext, size_t _ExtCount); 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _wsplitpath_s ( wchar_t const * _Path, wchar_t ( & _Drive ) [ _DriveSize ], wchar_t ( & _Dir ) [ _DirSize ], wchar_t ( & _Name ) [ _NameSize ], wchar_t ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _wsplitpath_s ( _Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }}
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wdupenv_s(__wchar_t ** _Buffer, size_t * _BufferCount, const __wchar_t * _VarName); 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _wgetenv(const __wchar_t * _VarName); 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wgetenv_s(size_t * _RequiredCount, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _VarName); 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wgetenv_s ( size_t * _RequiredCount, wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _VarName ) throw ( ) { return _wgetenv_s ( _RequiredCount, _Buffer, _Size, _VarName ); }}
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
int __cdecl _wputenv(const __wchar_t * _EnvString); 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wputenv_s(const __wchar_t * _Name, const __wchar_t * _Value); 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wsearchenv_s(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _Buffer, size_t _BufferCount); 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wsearchenv_s ( wchar_t const * _Filename, wchar_t const * _VarName, wchar_t ( & _ResultPath ) [ _Size ] ) throw ( ) { return _wsearchenv_s ( _Filename, _VarName, _ResultPath, _Size ); }}
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
void __cdecl _wsearchenv(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _ResultPath); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
int __cdecl _wsystem(const __wchar_t * _Command); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdlib.h"
}__pragma(pack ( pop )) 
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
void __cdecl _swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__declspec(noreturn) void __cdecl exit(int _Code); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__declspec(noreturn) void __cdecl _exit(int _Code); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__declspec(noreturn) void __cdecl _Exit(int _Code); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__declspec(noreturn) void __cdecl quick_exit(int _Code); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__declspec(noreturn) void __cdecl abort(); 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned __cdecl _set_abort_behavior(unsigned _Flags, unsigned _Mask); 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef int (__cdecl *_onexit_t)(void); 
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl atexit(void (__cdecl *)(void)); 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_onexit_t __cdecl _onexit(_onexit_t _Func); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl at_quick_exit(void (__cdecl *)(void)); 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef void (__cdecl *_purecall_handler)(void); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_purecall_handler __cdecl _get_purecall_handler(); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _set_error_mode(int _Mode); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int *__cdecl _errno(); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _set_errno(int _Value); 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _get_errno(int * _Value); 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned long *__cdecl __doserrno(); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char **__cdecl __sys_errlist(); 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int *__cdecl __sys_nerr(); 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
void __cdecl perror(const char * _ErrMsg); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char **__cdecl __p__pgmptr(); 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__wchar_t **__cdecl __p__wpgmptr(); 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int *__cdecl __p__fmode(); 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _get_pgmptr(char ** _Value); 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _get_wpgmptr(__wchar_t ** _Value); 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _set_fmode(int _Mode); 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _get_fmode(int * _PMode); 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
struct _div_t { 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int quot; 
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int rem; 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} div_t; 
#line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
struct _ldiv_t { 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
long quot; 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
long rem; 
#line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} ldiv_t; 
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef 
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
struct _lldiv_t { 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 quot; 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 rem; 
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} lldiv_t; 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl abs(int _Number); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
long __cdecl labs(long _Number); 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 __cdecl llabs(__int64 _Number); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 __cdecl _abs64(__int64 _Number); 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned short __cdecl _byteswap_ushort(unsigned short _Number); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned long __cdecl _byteswap_ulong(unsigned long _Number); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Number); 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
div_t __cdecl div(int _Numerator, int _Denominator); 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
ldiv_t __cdecl ldiv(long _Numerator, long _Denominator); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator); 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning (push)
#pragma warning (disable:6540)
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned long __cdecl _lrotl(unsigned long _Value, int _Shift); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned long __cdecl _lrotr(unsigned long _Value, int _Shift); 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning (pop)
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
void __cdecl srand(unsigned _Seed); 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl rand(); 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
inline long abs(const long _X) throw() 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
{ 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
return labs(_X); 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
inline __int64 abs(const __int64 _X) throw() 
#line 364 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
{ 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
return llabs(_X); 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
inline ldiv_t div(const long _A1, const long _A2) throw() 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
{ 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
return ldiv(_A1, _A2); 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
inline lldiv_t div(const __int64 _A1, const __int64 _A2) throw() 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
{ 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
return lldiv(_A1, _A2); 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
}
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef 
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
struct { 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned char ld[10]; 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} _LDOUBLE; 
#pragma pack ( pop )
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
struct { 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
double x; 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} _CRT_DOUBLE; 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
struct { 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
float f; 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} _CRT_FLOAT; 
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
struct { 
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
long double x; 
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} _LONGDOUBLE; 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
typedef 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
struct { 
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned char ld12[12]; 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
} _LDBL12; 
#pragma pack ( pop )
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
double __cdecl atof(const char * _String); 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl atoi(const char * _String); 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
long __cdecl atol(const char * _String); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 __cdecl atoll(const char * _String); 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 __cdecl _atoi64(const char * _String); 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _atoi_l(const char * _String, _locale_t _Locale); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
long __cdecl _atol_l(const char * _String, _locale_t _Locale); 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 __cdecl _atoll_l(const char * _String, _locale_t _Locale); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 __cdecl _atoi64_l(const char * _String, _locale_t _Locale); 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _atoflt(_CRT_FLOAT * _Result, const char * _String); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _atodbl(_CRT_DOUBLE * _Result, char * _String); 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _atoldbl(_LDOUBLE * _Result, char * _String); 
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _atoflt_l(_CRT_FLOAT * _Result, const char * _String, _locale_t _Locale); 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _atodbl_l(_CRT_DOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _atoldbl_l(_LDOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
float __cdecl strtof(const char * _String, char ** _EndPtr); 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
float __cdecl _strtof_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
double __cdecl strtod(const char * _String, char ** _EndPtr); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
double __cdecl _strtod_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
long double __cdecl strtold(const char * _String, char ** _EndPtr); 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
long double __cdecl _strtold_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
long __cdecl strtol(const char * _String, char ** _EndPtr, int _Radix); 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
long __cdecl _strtol_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 __cdecl strtoll(const char * _String, char ** _EndPtr, int _Radix); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 __cdecl _strtoll_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned long __cdecl strtoul(const char * _String, char ** _EndPtr, int _Radix); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned long __cdecl _strtoul_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl strtoull(const char * _String, char ** _EndPtr, int _Radix); 
#line 575 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _strtoull_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 __cdecl _strtoi64(const char * _String, char ** _EndPtr, int _Radix); 
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__int64 __cdecl _strtoi64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _strtoui64(const char * _String, char ** _EndPtr, int _Radix); 
#line 605 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _strtoui64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _itoa_s(int _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 628 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _itoa_s ( int _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _itoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
char *__cdecl _itoa(int _Value, char * _Buffer, int _Radix); 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _ltoa_s(long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ltoa_s ( long _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ltoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 663 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl _ltoa(long _Value, char * _Buffer, int _Radix); 
#line 672 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _ultoa_s(unsigned long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 679 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ultoa_s ( unsigned long _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ultoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 28726)
char *__cdecl _ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 698 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _i64toa_s(__int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 707 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl _i64toa(__int64 _Value, char * _Buffer, int _Radix); 
#line 715 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _ui64toa_s(unsigned __int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl _ui64toa(unsigned __int64 _Value, char * _Buffer, int _Radix); 
#line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _ecvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 752 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ecvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _DigitCount, int * _PtDec, int * _PtSign ) throw ( ) { return _ecvt_s ( _Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign ); }}
#line 762 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl _ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _fcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _fcvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign ) throw ( ) { return _fcvt_s ( _Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign ); }}
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl _fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _gcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount); 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _gcvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _DigitCount ) throw ( ) { return _gcvt_s ( _Buffer, _Size, _Value, _DigitCount ); }}
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl _gcvt(double _Value, int _DigitCount, char * _Buffer); 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl ___mb_cur_max_func(); 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl ___mb_cur_max_l_func(_locale_t _Locale); 
#line 854 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl mblen(const char * _Ch, size_t _MaxCount); 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _mblen_l(const char * _Ch, size_t _MaxCount, _locale_t _Locale); 
#line 868 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
size_t __cdecl _mbstrlen(const char * _String); 
#line 874 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
size_t __cdecl _mbstrlen_l(const char * _String, _locale_t _Locale); 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
size_t __cdecl _mbstrnlen(const char * _String, size_t _MaxCount); 
#line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
size_t __cdecl _mbstrnlen_l(const char * _String, size_t _MaxCount, _locale_t _Locale); 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl mbtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes); 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _mbtowc_l(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale); 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount); 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl mbstowcs_s ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], char const * _Source, size_t _MaxCount ) throw ( ) { return mbstowcs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }}
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
size_t __cdecl mbstowcs(__wchar_t * _Dest, const char * _Source, size_t _MaxCount); 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale); 
#line 943 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _mbstowcs_s_l ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], char const * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _mbstowcs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }}
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
size_t __cdecl _mbstowcs_l(__wchar_t * _Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 965 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl wctomb(char * _MbCh, __wchar_t _WCh); 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _wctomb_l(char * _MbCh, __wchar_t _WCh, _locale_t _Locale); 
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl wctomb_s(int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, __wchar_t _WCh); 
#line 990 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _wctomb_s_l(int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, __wchar_t _WCh, _locale_t _Locale); 
#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes); 
#line 1006 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcstombs_s ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], wchar_t const * _Source, size_t _MaxCount ) throw ( ) { return wcstombs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }}
#line 1014 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
size_t __cdecl wcstombs(char * _Dest, const __wchar_t * _Source, size_t _MaxCount); 
#line 1022 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale); 
#line 1031 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcstombs_s_l ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], wchar_t const * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _wcstombs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }}
#line 1040 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
size_t __cdecl _wcstombs_l(char * _Dest, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 1070 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__declspec(allocator) char *__cdecl _fullpath(char * _Buffer, const char * _Path, size_t _BufferCount); 
#line 1079 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _makepath_s(char * _Buffer, size_t _BufferCount, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1088 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _makepath_s ( char ( & _Buffer ) [ _Size ], char const * _Drive, char const * _Dir, char const * _Filename, char const * _Ext ) throw ( ) { return _makepath_s ( _Buffer, _Size, _Drive, _Dir, _Filename, _Ext ); }}
#line 1097 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
void __cdecl _makepath(char * _Buffer, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 1111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
void __cdecl _splitpath(const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext); 
#line 1120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _splitpath_s(const char * _FullPath, char * _Drive, size_t _DriveCount, char * _Dir, size_t _DirCount, char * _Filename, size_t _FilenameCount, char * _Ext, size_t _ExtCount); 
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _splitpath_s ( char const * _Dest, char ( & _Drive ) [ _DriveSize ], char ( & _Dir ) [ _DirSize ], char ( & _Name ) [ _NameSize ], char ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _splitpath_s ( _Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }}
#line 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl getenv_s(size_t * _RequiredCount, char * _Buffer, rsize_t _BufferCount, const char * _VarName); 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int *__cdecl __p___argc(); 
#line 1160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char ***__cdecl __p___argv(); 
#line 1161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__wchar_t ***__cdecl __p___wargv(); 
#line 1173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char ***__cdecl __p__environ(); 
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__wchar_t ***__cdecl __p__wenviron(); 
#line 1199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl getenv(const char * _VarName); 
#line 1203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl getenv_s ( size_t * _RequiredCount, char ( & _Buffer ) [ _Size ], char const * _VarName ) throw ( ) { return getenv_s ( _RequiredCount, _Buffer, _Size, _VarName ); }}
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _dupenv_s(char ** _Buffer, size_t * _BufferCount, const char * _VarName); 
#line 1226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl system(const char * _Command); 
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning (push)
#pragma warning (disable:6540)
#line 1236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl _putenv(const char * _EnvString); 
#line 1241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _putenv_s(const char * _Name, const char * _Value); 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning (pop)
#line 1248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
errno_t __cdecl _searchenv_s(const char * _Filename, const char * _VarName, char * _Buffer, size_t _BufferCount); 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _searchenv_s ( char const * _Filename, char const * _VarName, char ( & _Buffer ) [ _Size ] ) throw ( ) { return _searchenv_s ( _Filename, _VarName, _Buffer, _Size ); }}
#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
void __cdecl _searchenv(const char * _Filename, const char * _VarName, char * _Buffer); 
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode in" "stead. See online help for details.")) void __cdecl 
#line 1271 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_seterrormode(int _Mode); 
#line 1275 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. S" "ee online help for details.")) void __cdecl 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_beep(unsigned _Frequency, unsigned _Duration); 
#line 1281 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. " "See online help for details.")) void __cdecl 
#line 1282 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_sleep(unsigned long _Duration); 
#line 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 1311 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 1319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 1327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl gcvt(double _Value, int _DigitCount, char * _DstBuf); 
#line 1334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl itoa(int _Value, char * _Buffer, int _Radix); 
#line 1341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl ltoa(long _Value, char * _Buffer, int _Radix); 
#line 1349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
void __cdecl swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 1356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
char *__cdecl ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 1367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
int __cdecl putenv(const char * _EnvString); 
#line 1373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 1375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
_onexit_t __cdecl onexit(_onexit_t _Func); 
#line 1381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdlib.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
extern "C++" {
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
#pragma pack ( push, 8 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
#pragma warning(push)
#pragma warning(disable: 4985)
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
namespace std { 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
struct nothrow_t { 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
explicit nothrow_t() = default;
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
}; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
extern const nothrow_t nothrow; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
}
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size); 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size, const std::nothrow_t &) noexcept; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new[](size_t _Size); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
__declspec(allocator) void *__cdecl operator new[](size_t _Size, const std::nothrow_t &) noexcept; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block) noexcept; 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block, const std::nothrow_t &) noexcept; 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block) noexcept; 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block, const std::nothrow_t &) noexcept; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block, size_t _Size) noexcept; 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block, size_t _Size) noexcept; 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
#pragma warning(push)
#pragma warning(disable: 4577)
#pragma warning(disable: 4514)
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
inline void *__cdecl operator new(size_t _Size, void *_Where) noexcept 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
{ 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
(void)_Size; 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
return _Where; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
} 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
inline void __cdecl operator delete(void *, void *) noexcept 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
{ 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
} 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
inline void *__cdecl operator new[](size_t _Size, void *
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
_Where) noexcept 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
{ 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
(void)_Size; 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
return _Where; 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
} 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
inline void __cdecl operator delete[](void *, void *) noexcept 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
{ 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
} 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
}
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
#pragma warning(pop)
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"
extern "C++" {
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"
#pragma pack ( push, 8 )
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"
__declspec(allocator) void *__cdecl operator new[](size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"
void __cdecl operator delete(void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) noexcept; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"
void __cdecl operator delete[](void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) noexcept; 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"
}
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
typedef void *_HFILE; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, __wchar_t *, int *); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, size_t); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
struct _CrtMemBlockHeader; 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
typedef 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
struct _CrtMemState { 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
_CrtMemBlockHeader *pBlockHeader; 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
size_t lCounts[5]; 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
size_t lSizes[5]; 
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
size_t lHighWaterCount; 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
size_t lTotalCount; 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
} _CrtMemState; 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\crtdbg.h"
}__pragma(pack ( pop )) 
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1900")
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MT_StaticRelease")
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"
#pragma comment(lib, "libcpmt")
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
namespace std { 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
enum _Uninitialized { 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
_Noinit
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
}; 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
class _Lockit { 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
public: __thiscall _Lockit(); 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
explicit __thiscall _Lockit(int); 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
__thiscall ~_Lockit() noexcept; 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
static void __cdecl _Lockit_ctor(int); 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
static void __cdecl _Lockit_dtor(int); 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
private: static void __cdecl _Lockit_ctor(_Lockit *); 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
static void __cdecl _Lockit_ctor(_Lockit *, int); 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
static void __cdecl _Lockit_dtor(_Lockit *); 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
public: _Lockit(const _Lockit &) = delete;
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
_Lockit &operator=(const _Lockit &) = delete;
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
private: int _Locktype; 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
}; 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
class _Init_locks { 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
public: __thiscall _Init_locks(); 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
__thiscall ~_Init_locks() noexcept; 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
private: static void __cdecl _Init_locks_ctor(_Init_locks *); 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
static void __cdecl _Init_locks_dtor(_Init_locks *); 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
}; 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
}
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
inline double abs(double _Xx) noexcept 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
{ 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
return ::fabs(_Xx); 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
} 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
inline float abs(float _Xx) noexcept 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
{ 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
return ::fabsf(_Xx); 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
} 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
inline long double abs(long double _Xx) noexcept 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
{ 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
return ::fabsl(_Xx); 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
} 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
namespace std { 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::size_t;using ::div_t;using ::ldiv_t;
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::abort;using ::abs;using ::atexit;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::atof;using ::atoi;using ::atol;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::bsearch;using ::calloc;using ::div;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::exit;using ::free;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::labs;using ::ldiv;using ::malloc;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::mblen;using ::mbstowcs;using ::mbtowc;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::qsort;using ::rand;using ::realloc;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::srand;using ::strtod;using ::strtol;
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::strtoul;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::wcstombs;using ::wctomb;
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::lldiv_t;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::getenv;
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::system;
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::atoll;using ::llabs;using ::lldiv;
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::strtof;using ::strtold;
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::strtoll;using ::strtoull;
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
using ::_Exit;using ::at_quick_exit;using ::quick_exit;
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
}
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
#pragma warning(pop)
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline double pow(double _Xx, int _Yx) noexcept 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
if (_Yx == 2) { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return _Xx * _Xx; }  
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::pow(_Xx, static_cast< double>(_Yx)); 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float acos(float _Xx) noexcept 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::acosf(_Xx); 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float acosh(float _Xx) noexcept 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::acoshf(_Xx); 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float asin(float _Xx) noexcept 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::asinf(_Xx); 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float asinh(float _Xx) noexcept 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::asinhf(_Xx); 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float atan(float _Xx) noexcept 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::atanf(_Xx); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float atanh(float _Xx) noexcept 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::atanhf(_Xx); 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float atan2(float _Yx, float _Xx) noexcept 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::atan2f(_Yx, _Xx); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float cbrt(float _Xx) noexcept 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::cbrtf(_Xx); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float ceil(float _Xx) noexcept 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::ceilf(_Xx); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float copysign(float _Number, float 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Sign) noexcept 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::copysignf(_Number, _Sign); 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float cos(float _Xx) noexcept 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::cosf(_Xx); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float cosh(float _Xx) noexcept 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::coshf(_Xx); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float erf(float _Xx) noexcept 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::erff(_Xx); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float erfc(float _Xx) noexcept 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::erfcf(_Xx); 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float exp(float _Xx) noexcept 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::expf(_Xx); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float exp2(float _Xx) noexcept 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::exp2f(_Xx); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float expm1(float _Xx) noexcept 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::expm1f(_Xx); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float fabs(float _Xx) noexcept 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fabsf(_Xx); 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float fdim(float _Xx, float _Yx) noexcept 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fdimf(_Xx, _Yx); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float floor(float _Xx) noexcept 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::floorf(_Xx); 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float fma(float _Xx, float _Yx, float 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Zx) noexcept 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fmaf(_Xx, _Yx, _Zx); 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float fmax(float _Xx, float _Yx) noexcept 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fmaxf(_Xx, _Yx); 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float fmin(float _Xx, float _Yx) noexcept 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fminf(_Xx, _Yx); 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float fmod(float _Xx, float _Yx) noexcept 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fmodf(_Xx, _Yx); 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float frexp(float _Xx, int *_Yx) noexcept 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::frexpf(_Xx, _Yx); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float hypot(float _Xx, float _Yx) noexcept 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::hypotf(_Xx, _Yx); 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline int ilogb(float _Xx) noexcept 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::ilogbf(_Xx); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float ldexp(float _Xx, int _Yx) noexcept 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::ldexpf(_Xx, _Yx); 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float lgamma(float _Xx) noexcept 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::lgammaf(_Xx); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline __int64 llrint(float _Xx) noexcept 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::llrintf(_Xx); 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline __int64 llround(float _Xx) noexcept 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::llroundf(_Xx); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float log(float _Xx) noexcept 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::logf(_Xx); 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float log10(float _Xx) noexcept 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::log10f(_Xx); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float log1p(float _Xx) noexcept 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::log1pf(_Xx); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float log2(float _Xx) noexcept 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::log2f(_Xx); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float logb(float _Xx) noexcept 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::logbf(_Xx); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long lrint(float _Xx) noexcept 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::lrintf(_Xx); 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long lround(float _Xx) noexcept 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::lroundf(_Xx); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float modf(float _Xx, float *_Yx) noexcept 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::modff(_Xx, _Yx); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float nearbyint(float _Xx) noexcept 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::nearbyintf(_Xx); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float nextafter(float _Xx, float _Yx) noexcept 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::nextafterf(_Xx, _Yx); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float nexttoward(float _Xx, long double 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::nexttowardf(_Xx, _Yx); 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float pow(float _Xx, float 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::powf(_Xx, _Yx); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float pow(float _Xx, int _Yx) noexcept 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
if (_Yx == 2) { 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return _Xx * _Xx; }  
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::powf(_Xx, static_cast< float>(_Yx)); 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float remainder(float _Xx, float _Yx) noexcept 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::remainderf(_Xx, _Yx); 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float remquo(float _Xx, float _Yx, int *
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Zx) noexcept 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::remquof(_Xx, _Yx, _Zx); 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float rint(float _Xx) noexcept 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::rintf(_Xx); 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float round(float _Xx) noexcept 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::roundf(_Xx); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float scalbln(float _Xx, long _Yx) noexcept 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::scalblnf(_Xx, _Yx); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float scalbn(float _Xx, int _Yx) noexcept 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::scalbnf(_Xx, _Yx); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float sin(float _Xx) noexcept 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::sinf(_Xx); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float sinh(float _Xx) noexcept 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::sinhf(_Xx); 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float sqrt(float _Xx) noexcept 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::sqrtf(_Xx); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float tan(float _Xx) noexcept 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::tanf(_Xx); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float tanh(float _Xx) noexcept 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::tanhf(_Xx); 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float tgamma(float _Xx) noexcept 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::tgammaf(_Xx); 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline float trunc(float _Xx) noexcept 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::truncf(_Xx); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double acos(long double _Xx) noexcept 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::acosl(_Xx); 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double acosh(long double _Xx) noexcept 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::acoshl(_Xx); 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double asin(long double _Xx) noexcept 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::asinl(_Xx); 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double asinh(long double _Xx) noexcept 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::asinhl(_Xx); 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double atan(long double _Xx) noexcept 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::atanl(_Xx); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double atanh(long double _Xx) noexcept 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::atanhl(_Xx); 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double atan2(long double _Yx, long double 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Xx) noexcept 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::atan2l(_Yx, _Xx); 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double cbrt(long double _Xx) noexcept 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::cbrtl(_Xx); 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double ceil(long double _Xx) noexcept 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::ceill(_Xx); 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double copysign(long double _Number, long double 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Sign) noexcept 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::copysignl(_Number, _Sign); 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double cos(long double _Xx) noexcept 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::cosl(_Xx); 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double cosh(long double _Xx) noexcept 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::coshl(_Xx); 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double erf(long double _Xx) noexcept 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::erfl(_Xx); 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double erfc(long double _Xx) noexcept 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::erfcl(_Xx); 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double exp(long double _Xx) noexcept 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::expl(_Xx); 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double exp2(long double _Xx) noexcept 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::exp2l(_Xx); 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double expm1(long double _Xx) noexcept 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::expm1l(_Xx); 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double fabs(long double _Xx) noexcept 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fabsl(_Xx); 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double fdim(long double _Xx, long double 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fdiml(_Xx, _Yx); 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double floor(long double _Xx) noexcept 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::floorl(_Xx); 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double fma(long double _Xx, long double 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx, long double _Zx) noexcept 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fmal(_Xx, _Yx, _Zx); 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double fmax(long double _Xx, long double 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fmaxl(_Xx, _Yx); 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double fmin(long double _Xx, long double 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fminl(_Xx, _Yx); 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double fmod(long double _Xx, long double 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::fmodl(_Xx, _Yx); 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double frexp(long double _Xx, int *
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::frexpl(_Xx, _Yx); 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double hypot(long double _Xx, long double 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::hypotl(_Xx, _Yx); 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline int ilogb(long double _Xx) noexcept 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::ilogbl(_Xx); 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double ldexp(long double _Xx, int 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::ldexpl(_Xx, _Yx); 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double lgamma(long double _Xx) noexcept 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::lgammal(_Xx); 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline __int64 llrint(long double _Xx) noexcept 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::llrintl(_Xx); 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline __int64 llround(long double _Xx) noexcept 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::llroundl(_Xx); 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double log(long double _Xx) noexcept 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::logl(_Xx); 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double log10(long double _Xx) noexcept 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::log10l(_Xx); 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double log1p(long double _Xx) noexcept 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::log1pl(_Xx); 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double log2(long double _Xx) noexcept 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::log2l(_Xx); 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double logb(long double _Xx) noexcept 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::logbl(_Xx); 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long lrint(long double _Xx) noexcept 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::lrintl(_Xx); 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long lround(long double _Xx) noexcept 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::lroundl(_Xx); 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double modf(long double _Xx, long double *
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::modfl(_Xx, _Yx); 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double nearbyint(long double _Xx) noexcept 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::nearbyintl(_Xx); 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double nextafter(long double _Xx, long double 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::nextafterl(_Xx, _Yx); 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double nexttoward(long double _Xx, long double 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::nexttowardl(_Xx, _Yx); 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double pow(long double _Xx, long double 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::powl(_Xx, _Yx); 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double pow(long double _Xx, int 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
if (_Yx == 2) { 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return _Xx * _Xx; }  
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::powl(_Xx, static_cast< long double>(_Yx)); 
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double remainder(long double _Xx, long double 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::remainderl(_Xx, _Yx); 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double remquo(long double _Xx, long double 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx, int *_Zx) noexcept 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::remquol(_Xx, _Yx, _Zx); 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double rint(long double _Xx) noexcept 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::rintl(_Xx); 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double round(long double _Xx) noexcept 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::roundl(_Xx); 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double scalbln(long double _Xx, long 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::scalblnl(_Xx, _Yx); 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double scalbn(long double _Xx, int 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
_Yx) noexcept 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::scalbnl(_Xx, _Yx); 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double sin(long double _Xx) noexcept 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::sinl(_Xx); 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double sinh(long double _Xx) noexcept 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::sinhl(_Xx); 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double sqrt(long double _Xx) noexcept 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::sqrtl(_Xx); 
#line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double tan(long double _Xx) noexcept 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::tanl(_Xx); 
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double tanh(long double _Xx) noexcept 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::tanhl(_Xx); 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double tgamma(long double _Xx) noexcept 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::tgammal(_Xx); 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
inline long double trunc(long double _Xx) noexcept 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
{ 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
return ::truncl(_Xx); 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
} 
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
namespace std { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template < class _Ty,
 _Ty _Val >
 struct integral_constant
 {
 static constexpr _Ty value = _Val;

 using value_type = _Ty;
 using type = integral_constant;

 constexpr operator value_type ( ) const noexcept
  {
  return ( value );
  }

  constexpr value_type operator ( ) ( ) const noexcept
  {
  return ( value );
  }
 };
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< bool _Val> using bool_constant = integral_constant< bool, _Val> ; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using true_type = bool_constant< true> ; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using false_type = bool_constant< false> ; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< bool _Test, class 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
_Ty = void> 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct enable_if { 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct enable_if< true, _Ty>  { 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< bool _Test, class 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
_Ty = void> using enable_if_t = typename enable_if< _Test, _Ty> ::type; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< bool _Test, class 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
_Ty1, class 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
_Ty2> 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct conditional { 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty2; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty1, class 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
_Ty2> 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct conditional< true, _Ty1, _Ty2>  { 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty1; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< bool _Test, class 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
_Ty1, class 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
_Ty2> using conditional_t = typename conditional< _Test, _Ty1, _Ty2> ::type; 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty1, class 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
_Ty2> 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct is_same : public false_type { 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty1> 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct is_same< _Ty1, _Ty1>  : public true_type { 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty, class 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
_Uty> constexpr bool 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
is_same_v = (is_same< _Ty, _Uty> ::value); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_const { 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_const< const _Ty>  { 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> using remove_const_t = typename remove_const< _Ty> ::type; 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_volatile { 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_volatile< volatile _Ty>  { 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> using remove_volatile_t = typename remove_volatile< _Ty> ::type; 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_cv { 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_cv< const _Ty>  { 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_cv< volatile _Ty>  { 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_cv< const volatile _Ty>  { 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> using remove_cv_t = typename remove_cv< _Ty> ::type; 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct _Is_integral : public false_type { 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< bool>  : public true_type { 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< char>  : public true_type { 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< unsigned char>  : public true_type { 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< signed char>  : public true_type { 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< __wchar_t>  : public true_type { 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< char16_t>  : public true_type { 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< char32_t>  : public true_type { 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< unsigned short>  : public true_type { 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< short>  : public true_type { 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< unsigned>  : public true_type { 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< int>  : public true_type { 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< unsigned long>  : public true_type { 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< long>  : public true_type { 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< unsigned __int64>  : public true_type { 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_integral< __int64>  : public true_type { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct is_integral : public _Is_integral< remove_cv_t< _Ty> > ::type { 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
is_integral_v = (is_integral< _Ty> ::value); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct _Is_floating_point : public false_type { 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_floating_point< float>  : public true_type { 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_floating_point< double>  : public true_type { 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template<> struct _Is_floating_point< long double>  : public true_type { 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct is_floating_point : public _Is_floating_point< remove_cv_t< _Ty> > ::type { 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
is_floating_point_v = (is_floating_point< _Ty> ::value); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct is_arithmetic : public bool_constant< is_integral_v< _Ty>  || is_floating_point_v< _Ty> >  { 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
is_arithmetic_v = (is_arithmetic< _Ty> ::value); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_reference { 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_reference< _Ty &>  { 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
struct remove_reference< _Ty &&>  { 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
using type = _Ty; 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}; 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
template< class _Ty> using remove_reference_t = typename remove_reference< _Ty> ::type; 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
}
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
namespace std { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
template< class _Ty1, class 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
_Ty2> using _Common_float_type_t = conditional_t< is_same_v< _Ty1, long double>  || is_same_v< _Ty2, long double> , long double, conditional_t< is_same_v< _Ty1, float>  && is_same_v< _Ty2, float> , float, double> > ; 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
}
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2,
 class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline
 :: std :: _Common_float_type_t < _Ty1, _Ty2 > pow ( const _Ty1 _Left, const _Ty2 _Right )
 {
 using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >;
 return ( :: pow ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ) ) );
 }
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl acos(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double acos ( _Ty _Left ) { return ( :: acos ( static_cast < double > ( _Left ) ) ); }
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl asin(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double asin ( _Ty _Left ) { return ( :: asin ( static_cast < double > ( _Left ) ) ); }
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl atan(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double atan ( _Ty _Left ) { return ( :: atan ( static_cast < double > ( _Left ) ) ); }
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl atan2(double, double); template < class _Ty1, class _Ty2, class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline :: std :: _Common_float_type_t < _Ty1, _Ty2 > atan2 ( _Ty1 _Left, _Ty2 _Right ) { using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >; return ( :: atan2 ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ) ) ); }
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl ceil(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double ceil ( _Ty _Left ) { return ( :: ceil ( static_cast < double > ( _Left ) ) ); }
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl cos(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double cos ( _Ty _Left ) { return ( :: cos ( static_cast < double > ( _Left ) ) ); }
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl cosh(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double cosh ( _Ty _Left ) { return ( :: cosh ( static_cast < double > ( _Left ) ) ); }
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl exp(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double exp ( _Ty _Left ) { return ( :: exp ( static_cast < double > ( _Left ) ) ); }
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl fabs(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double fabs ( _Ty _Left ) { return ( :: fabs ( static_cast < double > ( _Left ) ) ); }
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl floor(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double floor ( _Ty _Left ) { return ( :: floor ( static_cast < double > ( _Left ) ) ); }
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl fmod(double, double); template < class _Ty1, class _Ty2, class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmod ( _Ty1 _Left, _Ty2 _Right ) { using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >; return ( :: fmod ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ) ) ); }
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl frexp(double, int *); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double frexp ( _Ty _Left, int * _Arg2 ) { return ( :: frexp ( static_cast < double > ( _Left ), _Arg2 ) ); }
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl ldexp(double, int); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double ldexp ( _Ty _Left, int _Arg2 ) { return ( :: ldexp ( static_cast < double > ( _Left ), _Arg2 ) ); }
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl log(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double log ( _Ty _Left ) { return ( :: log ( static_cast < double > ( _Left ) ) ); }
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl log10(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double log10 ( _Ty _Left ) { return ( :: log10 ( static_cast < double > ( _Left ) ) ); }
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl sin(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double sin ( _Ty _Left ) { return ( :: sin ( static_cast < double > ( _Left ) ) ); }
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl sinh(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double sinh ( _Ty _Left ) { return ( :: sinh ( static_cast < double > ( _Left ) ) ); }
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl sqrt(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double sqrt ( _Ty _Left ) { return ( :: sqrt ( static_cast < double > ( _Left ) ) ); }
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl tan(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double tan ( _Ty _Left ) { return ( :: tan ( static_cast < double > ( _Left ) ) ); }
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl tanh(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double tanh ( _Ty _Left ) { return ( :: tanh ( static_cast < double > ( _Left ) ) ); }
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
inline float _Fma(float _Left, float _Middle, float _Right) 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
{ 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
return ::fmaf(_Left, _Middle, _Right); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
} 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
inline double _Fma(double _Left, double _Middle, double _Right) 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
{ 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
return ::fma(_Left, _Middle, _Right); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
} 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
inline long double _Fma(long double _Left, long double _Middle, long double 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
_Right) 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
{ 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
return ::fmal(_Left, _Middle, _Right); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
} 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2,
 class _Ty3,
 class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >
  && :: std :: is_arithmetic_v < _Ty3 > > > inline
 :: std :: _Common_float_type_t < _Ty1, :: std :: _Common_float_type_t < _Ty2, _Ty3 > >
 fma ( _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right )
 {
 using _Common = :: std :: _Common_float_type_t < _Ty1, :: std :: _Common_float_type_t < _Ty2, _Ty3 >>;














 return ( _Fma ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Middle ), static_cast < _Common > ( _Right ) ) );

 }
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
inline float _Remquo(float _Left, float _Right, int *_Pquo) 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
{ 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
return ::remquof(_Left, _Right, _Pquo); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
} 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
inline double _Remquo(double _Left, double _Right, int *_Pquo) 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
{ 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
return ::remquo(_Left, _Right, _Pquo); 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
} 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
inline long double _Remquo(long double _Left, long double _Right, int *_Pquo) 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
{ 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
return ::remquol(_Left, _Right, _Pquo); 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
} 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2,
 class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline
 :: std :: _Common_float_type_t < _Ty1, _Ty2 >
 remquo ( _Ty1 _Left, _Ty2 _Right, int * _Pquo )
 {
 using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >;














 return ( _Remquo ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ), _Pquo ) );

 }
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl acosh(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double acosh ( _Ty _Left ) { return ( :: acosh ( static_cast < double > ( _Left ) ) ); }
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl asinh(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double asinh ( _Ty _Left ) { return ( :: asinh ( static_cast < double > ( _Left ) ) ); }
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl atanh(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double atanh ( _Ty _Left ) { return ( :: atanh ( static_cast < double > ( _Left ) ) ); }
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl cbrt(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double cbrt ( _Ty _Left ) { return ( :: cbrt ( static_cast < double > ( _Left ) ) ); }
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl copysign(double, double); template < class _Ty1, class _Ty2, class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline :: std :: _Common_float_type_t < _Ty1, _Ty2 > copysign ( _Ty1 _Left, _Ty2 _Right ) { using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >; return ( :: copysign ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ) ) ); }
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl erf(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double erf ( _Ty _Left ) { return ( :: erf ( static_cast < double > ( _Left ) ) ); }
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl erfc(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double erfc ( _Ty _Left ) { return ( :: erfc ( static_cast < double > ( _Left ) ) ); }
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl expm1(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double expm1 ( _Ty _Left ) { return ( :: expm1 ( static_cast < double > ( _Left ) ) ); }
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl exp2(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double exp2 ( _Ty _Left ) { return ( :: exp2 ( static_cast < double > ( _Left ) ) ); }
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl fdim(double, double); template < class _Ty1, class _Ty2, class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline :: std :: _Common_float_type_t < _Ty1, _Ty2 > fdim ( _Ty1 _Left, _Ty2 _Right ) { using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >; return ( :: fdim ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ) ) ); }
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl fmax(double, double); template < class _Ty1, class _Ty2, class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmax ( _Ty1 _Left, _Ty2 _Right ) { using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >; return ( :: fmax ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ) ) ); }
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl fmin(double, double); template < class _Ty1, class _Ty2, class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmin ( _Ty1 _Left, _Ty2 _Right ) { using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >; return ( :: fmin ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ) ) ); }
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl hypot(double, double); template < class _Ty1, class _Ty2, class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline :: std :: _Common_float_type_t < _Ty1, _Ty2 > hypot ( _Ty1 _Left, _Ty2 _Right ) { using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >; return ( :: hypot ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ) ) ); }
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" int __cdecl ilogb(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline int ilogb ( _Ty _Left ) { return ( :: ilogb ( static_cast < double > ( _Left ) ) ); }
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl lgamma(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double lgamma ( _Ty _Left ) { return ( :: lgamma ( static_cast < double > ( _Left ) ) ); }
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" __int64 __cdecl llrint(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline long long llrint ( _Ty _Left ) { return ( :: llrint ( static_cast < double > ( _Left ) ) ); }
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" __int64 __cdecl llround(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline long long llround ( _Ty _Left ) { return ( :: llround ( static_cast < double > ( _Left ) ) ); }
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl log1p(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double log1p ( _Ty _Left ) { return ( :: log1p ( static_cast < double > ( _Left ) ) ); }
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl log2(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double log2 ( _Ty _Left ) { return ( :: log2 ( static_cast < double > ( _Left ) ) ); }
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl logb(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double logb ( _Ty _Left ) { return ( :: logb ( static_cast < double > ( _Left ) ) ); }
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" long __cdecl lrint(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline long lrint ( _Ty _Left ) { return ( :: lrint ( static_cast < double > ( _Left ) ) ); }
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" long __cdecl lround(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline long lround ( _Ty _Left ) { return ( :: lround ( static_cast < double > ( _Left ) ) ); }
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl nearbyint(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double nearbyint ( _Ty _Left ) { return ( :: nearbyint ( static_cast < double > ( _Left ) ) ); }
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl nextafter(double, double); template < class _Ty1, class _Ty2, class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline :: std :: _Common_float_type_t < _Ty1, _Ty2 > nextafter ( _Ty1 _Left, _Ty2 _Right ) { using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >; return ( :: nextafter ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ) ) ); }
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl nexttoward(double, long double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double nexttoward ( _Ty _Left, long double _Arg2 ) { return ( :: nexttoward ( static_cast < double > ( _Left ), _Arg2 ) ); }
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl remainder(double, double); template < class _Ty1, class _Ty2, class = :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > > > inline :: std :: _Common_float_type_t < _Ty1, _Ty2 > remainder ( _Ty1 _Left, _Ty2 _Right ) { using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >; return ( :: remainder ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ) ) ); }
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl rint(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double rint ( _Ty _Left ) { return ( :: rint ( static_cast < double > ( _Left ) ) ); }
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl round(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double round ( _Ty _Left ) { return ( :: round ( static_cast < double > ( _Left ) ) ); }
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl scalbln(double, long); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double scalbln ( _Ty _Left, long _Arg2 ) { return ( :: scalbln ( static_cast < double > ( _Left ), _Arg2 ) ); }
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl scalbn(double, int); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double scalbn ( _Ty _Left, int _Arg2 ) { return ( :: scalbn ( static_cast < double > ( _Left ), _Arg2 ) ); }
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl tgamma(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double tgamma ( _Ty _Left ) { return ( :: tgamma ( static_cast < double > ( _Left ) ) ); }
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
extern "C" double __cdecl trunc(double); template < class _Ty, class = :: std :: enable_if_t < :: std :: is_integral_v < _Ty > > > inline double trunc ( _Ty _Left ) { return ( :: trunc ( static_cast < double > ( _Left ) ) ); }
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
namespace std { 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::abs;using ::acos;using ::asin;
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::atan;using ::atan2;using ::ceil;
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::cos;using ::cosh;using ::exp;
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::fabs;using ::floor;using ::fmod;
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::frexp;using ::ldexp;using ::log;
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::log10;using ::modf;using ::pow;
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::sin;using ::sinh;using ::sqrt;
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::tan;using ::tanh;
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::acosf;using ::asinf;
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::atanf;using ::atan2f;using ::ceilf;
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::cosf;using ::coshf;using ::expf;
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::fabsf;using ::floorf;using ::fmodf;
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::frexpf;using ::ldexpf;using ::logf;
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::log10f;using ::modff;using ::powf;
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::sinf;using ::sinhf;using ::sqrtf;
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::tanf;using ::tanhf;
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::acosl;using ::asinl;
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::atanl;using ::atan2l;using ::ceill;
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::cosl;using ::coshl;using ::expl;
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::fabsl;using ::floorl;using ::fmodl;
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::frexpl;using ::ldexpl;using ::logl;
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::log10l;using ::modfl;using ::powl;
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::sinl;using ::sinhl;using ::sqrtl;
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::tanl;using ::tanhl;
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::float_t;using ::double_t;
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::acosh;using ::asinh;using ::atanh;
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::cbrt;using ::erf;using ::erfc;
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::expm1;using ::exp2;
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::hypot;using ::ilogb;using ::lgamma;
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::log1p;using ::log2;using ::logb;
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::llrint;using ::lrint;using ::nearbyint;
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::rint;using ::llround;using ::lround;
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::fdim;using ::fma;using ::fmax;using ::fmin;
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::round;using ::trunc;
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::remainder;using ::remquo;
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::copysign;using ::nan;using ::nextafter;
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::scalbn;using ::scalbln;
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::nexttoward;using ::tgamma;
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::acoshf;using ::asinhf;using ::atanhf;
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::cbrtf;using ::erff;using ::erfcf;
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::expm1f;using ::exp2f;
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::hypotf;using ::ilogbf;using ::lgammaf;
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::log1pf;using ::log2f;using ::logbf;
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::llrintf;using ::lrintf;using ::nearbyintf;
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::rintf;using ::llroundf;using ::lroundf;
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::fdimf;using ::fmaf;using ::fmaxf;using ::fminf;
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::roundf;using ::truncf;
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::remainderf;using ::remquof;
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::copysignf;using ::nanf;
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::nextafterf;using ::scalbnf;using ::scalblnf;
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::nexttowardf;using ::tgammaf;
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::acoshl;using ::asinhl;using ::atanhl;
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::cbrtl;using ::erfl;using ::erfcl;
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::expm1l;using ::exp2l;
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::hypotl;using ::ilogbl;using ::lgammal;
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::log1pl;using ::log2l;using ::logbl;
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::llrintl;using ::lrintl;using ::nearbyintl;
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::rintl;using ::llroundl;using ::lroundl;
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::fdiml;using ::fmal;using ::fmaxl;using ::fminl;
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::roundl;using ::truncl;
#line 694 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::remainderl;using ::remquol;
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::copysignl;using ::nanl;
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::nextafterl;using ::scalbnl;using ::scalblnl;
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::nexttowardl;using ::tgammal;
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::fpclassify;using ::signbit;
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::isfinite;using ::isinf;
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::isnan;using ::isnormal;
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::isgreater;using ::isgreaterequal;
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::isless;using ::islessequal;
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
using ::islessgreater;using ::isunordered;
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
}
#line 1183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
#pragma warning(pop)
#pragma pack ( pop )
#line 9110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern "C" double __cdecl _hypot(double x, double y); 
#line 9111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern "C" float __cdecl _hypotf(float x, float y); 
#line 9121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline bool signbit(long double) throw(); 
#line 9122 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern "C" int _ldsign(long double); 
#line 9165 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline bool signbit(double) throw(); 
#line 9166 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern "C" int _dsign(double); 
#line 9210 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline bool signbit(float) throw(); 
#line 9211 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern "C" int _fdsign(float); 
#line 9219 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static __inline bool isinf(long double a); 
#line 9254 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static __inline bool isinf(double a); 
#line 9292 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static __inline bool isinf(float a); 
#line 9299 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static __inline bool isnan(long double a); 
#line 9332 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static __inline bool isnan(double a); 
#line 9368 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static __inline bool isnan(float a); 
#line 9375 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static __inline bool isfinite(long double a); 
#line 9412 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static __inline bool isfinite(double a); 
#line 9448 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static __inline bool isfinite(float a); 
#line 9456 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
template< class T> extern T _Pow_int(T, int) throw(); 
#line 9457 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline __int64 abs(__int64) throw(); 
#line 9532 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline long __cdecl abs(long) throw(); 
#line 9536 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl abs(float) throw(); 
#line 9537 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline double __cdecl abs(double) throw(); 
#line 9538 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl fabs(float) throw(); 
#line 9539 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl ceil(float) throw(); 
#line 9540 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl floor(float) throw(); 
#line 9541 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl sqrt(float) throw(); 
#line 9542 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl pow(float, float) throw(); 
#line 9567 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl pow(float, int) throw(); 
#line 9568 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline double __cdecl pow(double, int) throw(); 
#line 9571 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl log(float) throw(); 
#line 9572 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl log10(float) throw(); 
#line 9573 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl fmod(float, float) throw(); 
#line 9574 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl modf(float, float *) throw(); 
#line 9575 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl exp(float) throw(); 
#line 9576 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl frexp(float, int *) throw(); 
#line 9577 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl ldexp(float, int) throw(); 
#line 9578 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl asin(float) throw(); 
#line 9579 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl sin(float) throw(); 
#line 9580 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl sinh(float) throw(); 
#line 9581 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl acos(float) throw(); 
#line 9582 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl cos(float) throw(); 
#line 9583 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl cosh(float) throw(); 
#line 9584 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl atan(float) throw(); 
#line 9585 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl atan2(float, float) throw(); 
#line 9586 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl tan(float) throw(); 
#line 9587 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl tanh(float) throw(); 
#line 9807 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl logb(float) throw(); 
#line 9808 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline int __cdecl ilogb(float) throw(); 
#line 9809 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern float __cdecl scalbn(float, float) throw(); 
#line 9810 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl scalbln(float, long) throw(); 
#line 9811 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl exp2(float) throw(); 
#line 9812 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl expm1(float) throw(); 
#line 9813 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl log2(float) throw(); 
#line 9814 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl log1p(float) throw(); 
#line 9815 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl acosh(float) throw(); 
#line 9816 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl asinh(float) throw(); 
#line 9817 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl atanh(float) throw(); 
#line 9818 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl hypot(float, float) throw(); 
#line 9819 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl cbrt(float) throw(); 
#line 9820 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl erf(float) throw(); 
#line 9821 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl erfc(float) throw(); 
#line 9822 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl lgamma(float) throw(); 
#line 9823 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl tgamma(float) throw(); 
#line 9824 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl copysign(float, float) throw(); 
#line 9825 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl nextafter(float, float) throw(); 
#line 9826 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl remainder(float, float) throw(); 
#line 9827 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl remquo(float, float, int *) throw(); 
#line 9828 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl round(float) throw(); 
#line 9829 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline long __cdecl lround(float) throw(); 
#line 9830 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline __int64 __cdecl llround(float) throw(); 
#line 9831 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl trunc(float) throw(); 
#line 9832 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl rint(float) throw(); 
#line 9833 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline long __cdecl lrint(float) throw(); 
#line 9834 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline __int64 __cdecl llrint(float) throw(); 
#line 9835 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl nearbyint(float) throw(); 
#line 9836 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl fdim(float, float) throw(); 
#line 9837 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl fma(float, float, float) throw(); 
#line 9838 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl fmax(float, float) throw(); 
#line 9839 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
extern inline float __cdecl fmin(float, float) throw(); 
#line 9842 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float exp10(float a); 
#line 9844 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float rsqrt(float a); 
#line 9846 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float rcbrt(float a); 
#line 9848 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float sinpi(float a); 
#line 9850 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float cospi(float a); 
#line 9852 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline void sincospi(float a, float * sptr, float * cptr); 
#line 9854 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline void sincos(float a, float * sptr, float * cptr); 
#line 9856 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float j0(float a); 
#line 9858 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float j1(float a); 
#line 9860 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float jn(int n, float a); 
#line 9862 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float y0(float a); 
#line 9864 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float y1(float a); 
#line 9866 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float yn(int n, float a); 
#line 9868 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float cyl_bessel_i0(float a); 
#line 9870 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float cyl_bessel_i1(float a); 
#line 9872 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float erfinv(float a); 
#line 9874 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float erfcinv(float a); 
#line 9876 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float normcdfinv(float a); 
#line 9878 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float normcdf(float a); 
#line 9880 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float erfcx(float a); 
#line 9882 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline double copysign(double a, float b); 
#line 9884 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline double copysign(float a, double b); 
#line 9886 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned min(unsigned a, unsigned b); 
#line 9888 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned min(int a, unsigned b); 
#line 9890 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned min(unsigned a, int b); 
#line 9892 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline long min(long a, long b); 
#line 9894 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned long min(unsigned long a, unsigned long b); 
#line 9896 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned long min(long a, unsigned long b); 
#line 9898 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned long min(unsigned long a, long b); 
#line 9900 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline __int64 min(__int64 a, __int64 b); 
#line 9902 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b); 
#line 9904 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned __int64 min(__int64 a, unsigned __int64 b); 
#line 9906 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned __int64 min(unsigned __int64 a, __int64 b); 
#line 9908 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float min(float a, float b); 
#line 9910 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline double min(double a, double b); 
#line 9912 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline double min(float a, double b); 
#line 9914 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline double min(double a, float b); 
#line 9916 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned max(unsigned a, unsigned b); 
#line 9918 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned max(int a, unsigned b); 
#line 9920 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned max(unsigned a, int b); 
#line 9922 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline long max(long a, long b); 
#line 9924 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned long max(unsigned long a, unsigned long b); 
#line 9926 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned long max(long a, unsigned long b); 
#line 9928 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned long max(unsigned long a, long b); 
#line 9930 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline __int64 max(__int64 a, __int64 b); 
#line 9932 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b); 
#line 9934 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned __int64 max(__int64 a, unsigned __int64 b); 
#line 9936 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline unsigned __int64 max(unsigned __int64 a, __int64 b); 
#line 9938 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline float max(float a, float b); 
#line 9940 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline double max(double a, double b); 
#line 9942 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline double max(float a, double b); 
#line 9944 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
static inline double max(double a, float b); 
#line 433 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static __inline bool isinf(long double a) 
#line 434 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 438 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return isinf< long double> (a); 
#line 440 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 449 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static __inline bool isinf(double a) 
#line 450 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 454 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return isinf< double> (a); 
#line 456 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 465 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static __inline bool isinf(float a) 
#line 466 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 470 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return isinf< float> (a); 
#line 472 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 481 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static __inline bool isnan(long double a) 
#line 482 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 486 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return isnan< long double> (a); 
#line 488 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 497 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static __inline bool isnan(double a) 
#line 498 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 502 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return isnan< double> (a); 
#line 504 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 513 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static __inline bool isnan(float a) 
#line 514 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 518 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return isnan< float> (a); 
#line 520 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 529 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static __inline bool isfinite(long double a) 
#line 530 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 534 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return isfinite< long double> (a); 
#line 536 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 545 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static __inline bool isfinite(double a) 
#line 546 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 550 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return isfinite< double> (a); 
#line 552 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 561 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static __inline bool isfinite(float a) 
#line 562 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 566 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return isfinite< float> (a); 
#line 568 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 756 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float exp10(float a) 
#line 757 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 758 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return exp10f(a); 
#line 759 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 761 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float rsqrt(float a) 
#line 762 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 763 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return rsqrtf(a); 
#line 764 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 766 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float rcbrt(float a) 
#line 767 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 768 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return rcbrtf(a); 
#line 769 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 771 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float sinpi(float a) 
#line 772 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 773 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return sinpif(a); 
#line 774 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 776 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float cospi(float a) 
#line 777 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 778 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return cospif(a); 
#line 779 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 781 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline void sincospi(float a, float *sptr, float *cptr) 
#line 782 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 783 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
sincospif(a, sptr, cptr); 
#line 784 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 786 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline void sincos(float a, float *sptr, float *cptr) 
#line 787 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 788 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
sincosf(a, sptr, cptr); 
#line 789 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 791 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float j0(float a) 
#line 792 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 793 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return j0f(a); 
#line 794 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 796 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float j1(float a) 
#line 797 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 798 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return j1f(a); 
#line 799 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 801 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float jn(int n, float a) 
#line 802 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 803 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return jnf(n, a); 
#line 804 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 806 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float y0(float a) 
#line 807 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 808 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return y0f(a); 
#line 809 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 811 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float y1(float a) 
#line 812 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 813 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return y1f(a); 
#line 814 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 816 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float yn(int n, float a) 
#line 817 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 818 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return ynf(n, a); 
#line 819 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 821 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float cyl_bessel_i0(float a) 
#line 822 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 823 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return cyl_bessel_i0f(a); 
#line 824 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 826 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float cyl_bessel_i1(float a) 
#line 827 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 828 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return cyl_bessel_i1f(a); 
#line 829 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 831 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float erfinv(float a) 
#line 832 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 833 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return erfinvf(a); 
#line 834 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 836 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float erfcinv(float a) 
#line 837 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 838 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return erfcinvf(a); 
#line 839 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 841 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float normcdfinv(float a) 
#line 842 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 843 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return normcdfinvf(a); 
#line 844 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 846 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float normcdf(float a) 
#line 847 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 848 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return normcdff(a); 
#line 849 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 851 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float erfcx(float a) 
#line 852 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 853 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return erfcxf(a); 
#line 854 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 856 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline double copysign(double a, float b) 
#line 857 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 858 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return copysign(a, (double)b); 
#line 859 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 861 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline double copysign(float a, double b) 
#line 862 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 863 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return copysign((double)a, b); 
#line 864 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 866 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned min(unsigned a, unsigned b) 
#line 867 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 868 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return umin(a, b); 
#line 869 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 871 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned min(int a, unsigned b) 
#line 872 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 873 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return umin((unsigned)a, b); 
#line 874 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 876 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned min(unsigned a, int b) 
#line 877 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 878 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return umin(a, (unsigned)b); 
#line 879 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 881 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline long min(long a, long b) 
#line 882 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 885 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 888 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 890 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (default: 4127)
#line 892 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (long)min((int)a, (int)b); 
#line 893 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} else { 
#line 894 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (long)llmin((__int64)a, (__int64)b); 
#line 895 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
}  
#line 896 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 898 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned long min(unsigned long a, unsigned long b) 
#line 899 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 901 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 903 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 905 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (default: 4127)
#line 907 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 908 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} else { 
#line 909 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 910 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
}  
#line 911 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 913 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned long min(long a, unsigned long b) 
#line 914 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 916 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 918 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 920 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (default: 4127)
#line 922 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 923 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} else { 
#line 924 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 925 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
}  
#line 926 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 928 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned long min(unsigned long a, long b) 
#line 929 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 931 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 933 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 935 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (default: 4127)
#line 937 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 938 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} else { 
#line 939 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 940 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
}  
#line 941 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 943 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline __int64 min(__int64 a, __int64 b) 
#line 944 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 945 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return llmin(a, b); 
#line 946 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 948 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b) 
#line 949 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 950 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return ullmin(a, b); 
#line 951 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 953 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned __int64 min(__int64 a, unsigned __int64 b) 
#line 954 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 955 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return ullmin((unsigned __int64)a, b); 
#line 956 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 958 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned __int64 min(unsigned __int64 a, __int64 b) 
#line 959 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 960 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return ullmin(a, (unsigned __int64)b); 
#line 961 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 963 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float min(float a, float b) 
#line 964 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 965 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return fminf(a, b); 
#line 966 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 968 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline double min(double a, double b) 
#line 969 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 970 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return fmin(a, b); 
#line 971 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 973 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline double min(float a, double b) 
#line 974 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 975 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return fmin((double)a, b); 
#line 976 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 978 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline double min(double a, float b) 
#line 979 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 980 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return fmin(a, (double)b); 
#line 981 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 983 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned max(unsigned a, unsigned b) 
#line 984 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 985 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return umax(a, b); 
#line 986 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 988 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned max(int a, unsigned b) 
#line 989 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 990 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return umax((unsigned)a, b); 
#line 991 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 993 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned max(unsigned a, int b) 
#line 994 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 995 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return umax(a, (unsigned)b); 
#line 996 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 998 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline long max(long a, long b) 
#line 999 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1002 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 1004 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 1006 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (default: 4127)
#line 1008 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (long)max((int)a, (int)b); 
#line 1009 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} else { 
#line 1010 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (long)llmax((__int64)a, (__int64)b); 
#line 1011 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
}  
#line 1012 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1014 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned long max(unsigned long a, unsigned long b) 
#line 1015 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1017 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 1019 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1021 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (default: 4127)
#line 1023 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 1024 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} else { 
#line 1025 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 1026 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
}  
#line 1027 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1029 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned long max(long a, unsigned long b) 
#line 1030 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1032 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 1034 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1036 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (default: 4127)
#line 1038 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 1039 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} else { 
#line 1040 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 1041 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
}  
#line 1042 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1044 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned long max(unsigned long a, long b) 
#line 1045 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1047 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 1049 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1051 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning (default: 4127)
#line 1053 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 1054 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} else { 
#line 1055 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 1056 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
}  
#line 1057 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1059 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline __int64 max(__int64 a, __int64 b) 
#line 1060 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1061 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return llmax(a, b); 
#line 1062 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1064 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b) 
#line 1065 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1066 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return ullmax(a, b); 
#line 1067 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1069 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned __int64 max(__int64 a, unsigned __int64 b) 
#line 1070 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1071 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return ullmax((unsigned __int64)a, b); 
#line 1072 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1074 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned __int64 max(unsigned __int64 a, __int64 b) 
#line 1075 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1076 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return ullmax(a, (unsigned __int64)b); 
#line 1077 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1079 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline float max(float a, float b) 
#line 1080 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1081 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return fmaxf(a, b); 
#line 1082 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1084 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline double max(double a, double b) 
#line 1085 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1086 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return fmax(a, b); 
#line 1087 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1089 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline double max(float a, double b) 
#line 1090 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1091 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return fmax((double)a, b); 
#line 1092 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1094 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline double max(double a, float b) 
#line 1095 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1096 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return fmax(a, (double)b); 
#line 1097 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning(disable : 4211)
#line 1108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline int min(int a, int b) 
#line 1109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned umin(unsigned a, unsigned b) 
#line 1114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1116 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline __int64 llmin(__int64 a, __int64 b) 
#line 1119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned __int64 ullmin(unsigned __int64 a, unsigned __int64 
#line 1124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
b) 
#line 1125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1126 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1127 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline int max(int a, int b) 
#line 1130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1131 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned umax(unsigned a, unsigned b) 
#line 1135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline __int64 llmax(__int64 a, __int64 b) 
#line 1140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
static inline unsigned __int64 ullmax(unsigned __int64 a, unsigned __int64 
#line 1145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
b) 
#line 1146 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
{ 
#line 1147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1148 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
} 
#line 1151 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#pragma warning(default: 4211)
#line 74 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
template< class T, int dim = 1> 
#line 75 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
struct surface : public surfaceReference { 
#line 78 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
surface() 
#line 79 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
{ 
#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
(channelDesc) = cudaCreateChannelDesc< T> (); 
#line 81 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
} 
#line 83 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
surface(::cudaChannelFormatDesc desc) 
#line 84 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
{ 
#line 85 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
(channelDesc) = desc; 
#line 86 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
} 
#line 88 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
}; 
#line 90 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
template< int dim> 
#line 91 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
struct surface< void, dim>  : public surfaceReference { 
#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
surface() 
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
{ 
#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
(channelDesc) = cudaCreateChannelDesc< void> (); 
#line 97 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
} 
#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_surface_types.h"
}; 
#line 74 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
#line 75 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
struct texture : public textureReference { 
#line 78 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
texture(int norm = 0, ::cudaTextureFilterMode 
#line 79 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
fMode = cudaFilterModePoint, ::cudaTextureAddressMode 
#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
aMode = cudaAddressModeClamp) 
#line 81 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
{ 
#line 82 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
(normalized) = norm; 
#line 83 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
(filterMode) = fMode; 
#line 84 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
((addressMode)[0]) = aMode; 
#line 85 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
((addressMode)[1]) = aMode; 
#line 86 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
((addressMode)[2]) = aMode; 
#line 87 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
(channelDesc) = cudaCreateChannelDesc< T> (); 
#line 88 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
(sRGB) = 0; 
#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
} 
#line 91 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
texture(int norm, ::cudaTextureFilterMode 
#line 92 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
fMode, ::cudaTextureAddressMode 
#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
aMode, ::cudaChannelFormatDesc 
#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
desc) 
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
{ 
#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
(normalized) = norm; 
#line 97 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
(filterMode) = fMode; 
#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
((addressMode)[0]) = aMode; 
#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
((addressMode)[1]) = aMode; 
#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
((addressMode)[2]) = aMode; 
#line 101 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
(channelDesc) = desc; 
#line 102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
(sRGB) = 0; 
#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
} 
#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\cuda_texture_types.h"
}; 
#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
extern "C" {
#line 3217 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
}
#line 3225 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline int mulhi(int a, int b); 
#line 3227 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline unsigned mulhi(unsigned a, unsigned b); 
#line 3229 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline unsigned mulhi(int a, unsigned b); 
#line 3231 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline unsigned mulhi(unsigned a, int b); 
#line 3233 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline __int64 mul64hi(__int64 a, __int64 b); 
#line 3235 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b); 
#line 3237 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b); 
#line 3239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b); 
#line 3241 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline int float_as_int(float a); 
#line 3243 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline float int_as_float(int a); 
#line 3245 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline unsigned float_as_uint(float a); 
#line 3247 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline float uint_as_float(unsigned a); 
#line 3249 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline float saturate(float a); 
#line 3251 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline int mul24(int a, int b); 
#line 3253 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline unsigned umul24(unsigned a, unsigned b); 
#line 3255 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline int float2int(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3257 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3259 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 3261 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
static __inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 90 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline int mulhi(int a, int b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}







#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, unsigned b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}







#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline unsigned mulhi(int a, unsigned b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}







#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, int b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}







#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline __int64 mul64hi(__int64 a, __int64 b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}







#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}







#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}







#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}







#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline int float_as_int(float a) {int volatile ___ = 1;(void)a;::exit(___);}







#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline float int_as_float(int a) {int volatile ___ = 1;(void)a;::exit(___);}







#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline unsigned float_as_uint(float a) {int volatile ___ = 1;(void)a;::exit(___);}







#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline float uint_as_float(unsigned a) {int volatile ___ = 1;(void)a;::exit(___);}







#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline float saturate(float a) {int volatile ___ = 1;(void)a;::exit(___);}







#line 158 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline int mul24(int a, int b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}







#line 163 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline unsigned umul24(unsigned a, unsigned b) {int volatile ___ = 1;(void)a;(void)b;::exit(___);}







#line 168 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 164 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline int float2int(float a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 173 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline unsigned float2uint(float a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 181 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline float int2float(int a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 189 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 188 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
static __inline float uint2float(unsigned a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 197 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_functions.hpp"
#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 117 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 116 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 122 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 127 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 126 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 131 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 128 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 143 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 146 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 151 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 171 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
extern "C" {
#line 180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
}
#line 189 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned __int64 atomicAdd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 194 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 191 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned __int64 atomicExch(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 196 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 193 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
static __inline unsigned __int64 atomicCAS(unsigned __int64 *address, unsigned __int64 compare, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 198 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 195 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
__declspec(deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning).")) static __inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}



#line 200 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 197 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
__declspec(deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning).")) static __inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}



#line 202 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_atomic_functions.h"
#line 87 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
extern "C" {
#line 1139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
}
#line 1147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline double fma(double a, double b, double c, cudaRoundMode mode); 
#line 1149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1151 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1155 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline __int64 double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1161 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1163 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline double ll2double(__int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1165 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 1169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 1171 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.h"
static __inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline double fma(double a, double b, double c, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;::exit(___);}







#line 102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 101 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline double dmul(double a, double b, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}







#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline double dadd(double a, double b, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}







#line 118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 117 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline double dsub(double a, double b, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}







#line 126 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline int double2int(double a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline unsigned double2uint(double a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline __int64 double2ll(double a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 150 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 158 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline double ll2double(__int64 a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 166 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 165 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 174 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 173 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline double int2double(int a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 182 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline double uint2double(unsigned a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 187 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 183 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
static __inline double float2double(float a, cudaRoundMode mode) {int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 192 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\device_double_functions.hpp"
#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_atomic_functions.h"
static __inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_atomic_functions.h"
#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
static __inline __int64 atomicMin(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
#line 102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
static __inline __int64 atomicMax(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
static __inline __int64 atomicAnd(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
static __inline __int64 atomicOr(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
static __inline __int64 atomicXor(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMin(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
#line 112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMax(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 117 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicAnd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
#line 116 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicOr(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
#line 118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicXor(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_atomic_functions.h"
#line 303 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 308 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 306 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 311 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 309 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 314 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 312 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 317 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 315 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 320 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 318 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 323 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 321 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 326 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 324 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 329 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 327 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 332 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 330 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 335 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 333 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 338 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 336 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 341 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 339 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 344 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 342 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 347 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 345 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 350 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 348 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 353 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 351 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 356 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 354 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 359 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 357 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 362 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 360 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 365 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 363 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 368 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 366 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 371 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 369 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 374 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 372 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 377 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 375 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 380 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 378 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 383 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 381 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 386 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 384 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 389 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 387 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 392 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 390 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 395 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 393 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 398 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 396 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 401 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 399 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 404 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 402 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 407 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 405 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 410 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 408 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 413 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 411 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 416 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 414 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 419 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 417 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 422 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 420 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 425 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 423 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 428 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 426 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 431 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 429 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 434 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 432 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 437 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 435 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 440 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 438 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
#line 439 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 444 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 442 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
#line 443 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 448 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 446 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_block(unsigned __int64 *address, unsigned __int64 
#line 447 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
compare, unsigned __int64 
#line 448 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 453 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 451 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_system(unsigned __int64 *address, unsigned __int64 
#line 452 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
compare, unsigned __int64 
#line 453 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 458 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 456 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 461 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 459 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 464 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 462 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 467 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 465 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 470 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 468 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 473 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 471 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 476 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 474 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 479 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 477 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 482 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 480 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 485 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 483 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 488 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 486 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 491 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 489 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 494 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 492 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 497 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 495 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 500 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 498 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 503 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 501 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 506 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 504 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 509 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 507 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 512 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 510 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 515 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 513 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 518 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 516 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 521 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 519 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 524 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 522 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 527 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 525 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 530 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_60_atomic_functions.h"
#line 90 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
extern "C" {
#line 1475 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
}
#line 1482 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
__declspec(deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning).")) static __inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1487 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
#line 1484 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
static __inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1489 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
#line 1486 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
static __inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1491 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
#line 1488 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
static __inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1493 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
#line 1493 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
static __inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1498 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
#line 1494 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
static __inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1499 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
#line 1495 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
static __inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1500 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
#line 1496 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
static __inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1501 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_20_intrinsics.h"
#line 102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}



#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}



#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}



#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}



#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}



#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}



#line 112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}



#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}



#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}



#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 126 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 122 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 127 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 128 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 126 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 131 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 127 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 128 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 143 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 146 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 143 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 148 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 148 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned __int64 __shfl(unsigned __int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline __int64 __shfl(__int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 150 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline __int64 __shfl_up(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 155 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 151 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned __int64 __shfl_up(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 156 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 152 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline __int64 __shfl_down(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned __int64 __shfl_down(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 158 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline __int64 __shfl_xor(__int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 155 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned __int64 __shfl_xor(unsigned __int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 160 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 156 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 161 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 162 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 158 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 163 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 164 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 162 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline __int64 __shfl_sync(unsigned mask, __int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 163 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_sync(unsigned mask, unsigned __int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 168 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 164 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline __int64 __shfl_up_sync(unsigned mask, __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 165 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_up_sync(unsigned mask, unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 170 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 166 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline __int64 __shfl_down_sync(unsigned mask, __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 171 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_down_sync(unsigned mask, unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 168 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline __int64 __shfl_xor_sync(unsigned mask, __int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 173 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_xor_sync(unsigned mask, unsigned __int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 174 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 170 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 175 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 171 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 176 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 177 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 173 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 177 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 182 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 183 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 179 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 184 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 185 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 181 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 186 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 182 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 187 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 183 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 188 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 184 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 189 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 187 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 192 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 188 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 193 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 189 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 194 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 190 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 195 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 191 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 196 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 192 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 197 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 193 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 198 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 194 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 199 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_30_intrinsics.h"
#line 87 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 92 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 88 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 90 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 91 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 92 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 97 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline __int64 __ldg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 101 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 97 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 101 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 116 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 117 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 116 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 117 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 122 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 128 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 124 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 126 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 131 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 127 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 128 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline __int64 __ldcg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 131 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 134 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 146 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 143 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 148 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 150 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 146 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 151 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 152 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 148 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 151 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 156 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 152 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 158 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 155 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 160 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 164 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 160 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 165 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 162 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 163 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 168 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 164 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 165 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 170 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 166 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline __int64 __ldca(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 171 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 168 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 173 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 174 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 170 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 175 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 171 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 176 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 177 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 173 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 175 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 176 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 181 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 177 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 182 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldca(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 183 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 179 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 184 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 185 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 181 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 186 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 182 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 187 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 183 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 188 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 184 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 189 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 185 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 190 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 187 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 192 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 188 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 193 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 189 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 194 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 190 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 195 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 191 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 196 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 195 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 200 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 196 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 201 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 198 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 203 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 199 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 204 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 200 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 205 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 201 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 206 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 202 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline __int64 __ldcs(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 207 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 203 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 208 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 204 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 209 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 205 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 210 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 206 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 211 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 207 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 212 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 208 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 213 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 209 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 214 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 211 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 216 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 212 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 217 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 213 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 218 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 214 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcs(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 219 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 215 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 220 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 216 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 221 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 217 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 222 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 218 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 223 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 219 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 224 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 220 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 225 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 221 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 226 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 223 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 228 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 224 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 229 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 225 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 230 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 226 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 231 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 227 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 232 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 249 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 256 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 261 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 269 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 274 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 281 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 286 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_32_intrinsics.h"
#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 90 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 92 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 97 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 101 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\sm_61_intrinsics.h"
#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 101 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 97 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned __int64 value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, __int64 value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 106 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned __int64 value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, __int64 value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}



#line 116 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
static __inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\sm_70_rt.h"
#line 114 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf1Dread(T *res, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;::exit(___);}





#line 122 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 122 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline T 
#line 123 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf1Dread(::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surf;(void)x;(void)mode;::exit(___);}





#line 130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 132 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf1Dread(T *res, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;::exit(___);}





#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;::exit(___);}





#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline T 
#line 150 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf2Dread(::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;::exit(___);}





#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 160 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;::exit(___);}





#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 168 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;::exit(___);}





#line 176 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 176 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline T 
#line 177 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf3Dread(::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;::exit(___);}





#line 184 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 186 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 187 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;::exit(___);}





#line 194 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 196 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 197 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;::exit(___);}





#line 204 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 204 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline T 
#line 205 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf1DLayeredread(::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;::exit(___);}





#line 212 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 215 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 216 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;::exit(___);}





#line 223 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 224 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 225 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;::exit(___);}





#line 232 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 232 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline T 
#line 233 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf2DLayeredread(::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}





#line 240 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 243 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}





#line 251 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 252 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 253 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;::exit(___);}





#line 260 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 260 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline T 
#line 261 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surfCubemapread(::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;::exit(___);}





#line 268 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 271 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 272 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;::exit(___);}





#line 279 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 280 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 281 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;::exit(___);}





#line 288 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 288 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline T 
#line 289 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surfCubemapLayeredread(::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;::exit(___);}





#line 296 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 298 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 299 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;::exit(___);}





#line 306 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 307 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 308 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;::exit(___);}





#line 315 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 315 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 316 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;::exit(___);}





#line 323 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 325 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 326 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;::exit(___);}





#line 333 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 333 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 334 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;::exit(___);}





#line 341 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 342 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 343 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;::exit(___);}





#line 350 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 350 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 351 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;::exit(___);}





#line 358 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 359 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 360 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;::exit(___);}





#line 367 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 367 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 368 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;::exit(___);}





#line 375 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 376 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 377 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;::exit(___);}





#line 384 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 384 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 385 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}





#line 392 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 393 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 394 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;::exit(___);}





#line 401 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 401 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 402 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;::exit(___);}





#line 409 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 411 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 412 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;::exit(___);}





#line 419 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 419 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
template< class T> static __forceinline void 
#line 420 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;::exit(___);}





#line 427 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_functions.h"
#line 66 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> 
#line 67 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
struct __nv_tex_rmet_ret { }; 
#line 69 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< char>  { typedef char type; }; 
#line 70 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< signed char>  { typedef signed char type; }; 
#line 71 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< unsigned char>  { typedef unsigned char type; }; 
#line 72 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< char1>  { typedef char1 type; }; 
#line 73 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< uchar1>  { typedef uchar1 type; }; 
#line 74 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< char2>  { typedef char2 type; }; 
#line 75 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< uchar2>  { typedef uchar2 type; }; 
#line 76 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< char4>  { typedef char4 type; }; 
#line 77 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< uchar4>  { typedef uchar4 type; }; 
#line 79 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< short>  { typedef short type; }; 
#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< unsigned short>  { typedef unsigned short type; }; 
#line 81 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< short1>  { typedef short1 type; }; 
#line 82 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< ushort1>  { typedef ushort1 type; }; 
#line 83 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< short2>  { typedef short2 type; }; 
#line 84 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< ushort2>  { typedef ushort2 type; }; 
#line 85 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< short4>  { typedef short4 type; }; 
#line 86 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< ushort4>  { typedef ushort4 type; }; 
#line 88 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< int>  { typedef int type; }; 
#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< unsigned>  { typedef unsigned type; }; 
#line 90 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< int1>  { typedef int1 type; }; 
#line 91 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< uint1>  { typedef uint1 type; }; 
#line 92 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< int2>  { typedef int2 type; }; 
#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< uint2>  { typedef uint2 type; }; 
#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< int4>  { typedef int4 type; }; 
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< uint4>  { typedef uint4 type; }; 
#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< long>  { typedef long type; }; 
#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< unsigned long>  { typedef unsigned long type; }; 
#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< long1>  { typedef long1 type; }; 
#line 101 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< ulong1>  { typedef ulong1 type; }; 
#line 102 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< long2>  { typedef long2 type; }; 
#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< ulong2>  { typedef ulong2 type; }; 
#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< long4>  { typedef long4 type; }; 
#line 105 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< ulong4>  { typedef ulong4 type; }; 
#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< float>  { typedef float type; }; 
#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< float1>  { typedef float1 type; }; 
#line 109 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< float2>  { typedef float2 type; }; 
#line 110 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< float4>  { typedef float4 type; }; 
#line 113 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> struct __nv_tex_rmet_cast { typedef T *type; }; 
#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_cast< long>  { typedef int *type; }; 
#line 116 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_cast< unsigned long>  { typedef unsigned *type; }; 
#line 117 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_cast< long1>  { typedef int1 *type; }; 
#line 118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_cast< ulong1>  { typedef uint1 *type; }; 
#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_cast< long2>  { typedef int2 *type; }; 
#line 120 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_cast< ulong2>  { typedef uint2 *type; }; 
#line 121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_cast< long4>  { typedef int4 *type; }; 
#line 122 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmet_cast< ulong4>  { typedef uint4 *type; }; 
#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 126 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1Dfetch(texture< T, 1, cudaReadModeElementType>  t, int x) {int volatile ___ = 1;(void)t;(void)x;::exit(___);}





#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 135 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> 
#line 136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
struct __nv_tex_rmnf_ret { }; 
#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
#line 139 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
#line 140 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
#line 143 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
#line 145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
#line 146 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
#line 147 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
#line 148 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
#line 150 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
#line 151 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
#line 152 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
#line 153 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
#line 156 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat>  t, int x) {int volatile ___ = 1;(void)t;(void)x;::exit(___);}





#line 164 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 168 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 169 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1D(texture< T, 1, cudaReadModeElementType>  t, float x) {int volatile ___ = 1;(void)t;(void)x;::exit(___);}





#line 176 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 179 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1D(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x) {int volatile ___ = 1;(void)t;(void)x;::exit(___);}





#line 186 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 191 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 192 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2D(texture< T, 2, cudaReadModeElementType>  t, float x, float y) {int volatile ___ = 1;(void)t;(void)x;(void)y;::exit(___);}





#line 199 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 202 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 203 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2D(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y) {int volatile ___ = 1;(void)t;(void)x;(void)y;::exit(___);}





#line 210 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 215 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 216 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1DLayered(texture< T, 241, cudaReadModeElementType>  t, float x, int layer) {int volatile ___ = 1;(void)t;(void)x;(void)layer;::exit(___);}





#line 223 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 225 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 226 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) {int volatile ___ = 1;(void)t;(void)x;(void)layer;::exit(___);}





#line 233 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 238 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2DLayered(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;::exit(___);}





#line 246 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 248 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 249 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;::exit(___);}





#line 256 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 260 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 261 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex3D(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;::exit(___);}





#line 268 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 270 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 271 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex3D(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;::exit(___);}





#line 278 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 282 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 283 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemap(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;::exit(___);}





#line 290 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 292 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 293 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemap(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;::exit(___);}





#line 300 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 304 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> 
#line 305 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
struct __nv_tex2dgather_ret { }; 
#line 306 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
#line 307 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
#line 308 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
#line 309 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
#line 310 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
#line 311 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
#line 312 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
#line 313 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
#line 314 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
#line 315 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
#line 316 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
#line 318 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
#line 319 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
#line 320 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
#line 321 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
#line 322 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
#line 323 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
#line 324 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
#line 325 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
#line 326 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
#line 327 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
#line 329 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
#line 330 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
#line 331 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
#line 332 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
#line 333 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
#line 334 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
#line 335 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
#line 336 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
#line 337 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
#line 338 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
#line 340 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
#line 341 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
#line 342 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
#line 343 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
#line 344 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
#line 346 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex2dgather_ret< T> ::type 
#line 347 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2Dgather(texture< T, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;::exit(___);}





#line 354 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 358 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> struct __nv_tex2dgather_rmnf_ret { }; 
#line 359 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< char>  { typedef float4 type; }; 
#line 360 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< signed char>  { typedef float4 type; }; 
#line 361 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< unsigned char>  { typedef float4 type; }; 
#line 362 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< char1>  { typedef float4 type; }; 
#line 363 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< uchar1>  { typedef float4 type; }; 
#line 364 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< char2>  { typedef float4 type; }; 
#line 365 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< uchar2>  { typedef float4 type; }; 
#line 366 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< char3>  { typedef float4 type; }; 
#line 367 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< uchar3>  { typedef float4 type; }; 
#line 368 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< char4>  { typedef float4 type; }; 
#line 369 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< uchar4>  { typedef float4 type; }; 
#line 370 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< signed short>  { typedef float4 type; }; 
#line 371 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< unsigned short>  { typedef float4 type; }; 
#line 372 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< short1>  { typedef float4 type; }; 
#line 373 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< ushort1>  { typedef float4 type; }; 
#line 374 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< short2>  { typedef float4 type; }; 
#line 375 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< ushort2>  { typedef float4 type; }; 
#line 376 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< short3>  { typedef float4 type; }; 
#line 377 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< ushort3>  { typedef float4 type; }; 
#line 378 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< short4>  { typedef float4 type; }; 
#line 379 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_rmnf_ret< ushort4>  { typedef float4 type; }; 
#line 381 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex2dgather_rmnf_ret< T> ::type 
#line 382 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;::exit(___);}





#line 389 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 394 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 395 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1DLod(texture< T, 1, cudaReadModeElementType>  t, float x, float level) {int volatile ___ = 1;(void)t;(void)x;(void)level;::exit(___);}





#line 402 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 404 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 405 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float level) {int volatile ___ = 1;(void)t;(void)x;(void)level;::exit(___);}





#line 412 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 416 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 417 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2DLod(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float level) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;::exit(___);}





#line 424 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 426 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 427 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;::exit(___);}





#line 434 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 438 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 439 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1DLayeredLod(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float level) {int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;::exit(___);}





#line 446 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 448 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 449 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) {int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;::exit(___);}





#line 456 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 460 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 461 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2DLayeredLod(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;::exit(___);}





#line 468 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 470 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 471 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;::exit(___);}





#line 478 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 482 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 483 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex3DLod(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;::exit(___);}





#line 490 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 492 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 493 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;::exit(___);}





#line 500 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 504 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 505 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemapLod(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;::exit(___);}





#line 512 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 514 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 515 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;::exit(___);}





#line 522 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 527 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 528 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemapLayered(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;::exit(___);}





#line 535 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 537 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 538 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;::exit(___);}





#line 545 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 550 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 551 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;::exit(___);}





#line 558 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 560 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 561 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;::exit(___);}





#line 568 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 573 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 574 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemapGrad(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}





#line 581 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 583 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 584 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemapGrad(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}





#line 591 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 596 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 597 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemapLayeredGrad(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 604 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 606 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 607 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
texCubemapLayeredGrad(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 614 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 619 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 620 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1DGrad(texture< T, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;::exit(___);}





#line 627 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 629 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 630 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;::exit(___);}





#line 637 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 642 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 643 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2DGrad(texture< T, 2, cudaReadModeElementType>  t, float x, float y, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;::exit(___);}





#line 650 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 652 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 653 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;::exit(___);}





#line 660 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 664 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 665 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 672 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 674 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 675 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 682 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 686 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 687 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 694 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 696 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 697 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 704 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 708 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmet_ret< T> ::type 
#line 709 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex3DGrad(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}





#line 716 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 718 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
template< class T> static __forceinline typename __nv_tex_rmnf_ret< T> ::type 
#line 719 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}





#line 726 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_fetch_functions.h"
#line 60 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
#line 61 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
#line 62 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
#line 63 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
#line 64 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
#line 65 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
#line 66 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
#line 67 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
#line 68 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
#line 69 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
#line 70 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
#line 71 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
#line 72 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
#line 73 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
#line 74 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
#line 75 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
#line 76 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
#line 77 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
#line 78 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
#line 79 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
#line 81 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
#line 82 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
#line 83 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
#line 84 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
#line 85 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
#line 87 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< long>  { typedef void type; }; 
#line 88 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< long1>  { typedef void type; }; 
#line 89 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< long2>  { typedef void type; }; 
#line 90 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< long4>  { typedef void type; }; 
#line 91 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< unsigned long>  { typedef void type; }; 
#line 92 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ulong1>  { typedef void type; }; 
#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ulong2>  { typedef void type; }; 
#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ulong4>  { typedef void type; }; 
#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
#line 97 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
#line 98 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
#line 103 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 104 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1Dfetch(T *ptr, ::cudaTextureObject_t obj, int x) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;::exit(___);}





#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 111 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 112 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1Dfetch(::cudaTextureObject_t texObject, int x) {int volatile ___ = 1;(void)texObject;(void)x;::exit(___);}





#line 119 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 121 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 122 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1D(T *ptr, ::cudaTextureObject_t obj, float x) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;::exit(___);}





#line 129 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 130 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 131 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1D(::cudaTextureObject_t texObject, float x) {int volatile ___ = 1;(void)texObject;(void)x;::exit(___);}





#line 138 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 141 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 142 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2D(T *ptr, ::cudaTextureObject_t obj, float x, float y) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;::exit(___);}





#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 149 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 150 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2D(::cudaTextureObject_t texObject, float x, float y) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;::exit(___);}





#line 157 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 159 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 160 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex3D(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;::exit(___);}





#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 168 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex3D(::cudaTextureObject_t texObject, float x, float y, float z) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;::exit(___);}





#line 175 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 177 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 178 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1DLayered(T *ptr, ::cudaTextureObject_t obj, float x, int layer) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;::exit(___);}





#line 185 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 185 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 186 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1DLayered(::cudaTextureObject_t texObject, float x, int layer) {int volatile ___ = 1;(void)texObject;(void)x;(void)layer;::exit(___);}





#line 193 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 195 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 196 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2DLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;::exit(___);}





#line 203 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 203 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 204 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;::exit(___);}





#line 211 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 214 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 215 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemap(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;::exit(___);}





#line 222 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 223 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 224 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemap(::cudaTextureObject_t texObject, float x, float y, float z) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;::exit(___);}





#line 231 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 234 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 235 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemapLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;::exit(___);}





#line 242 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 242 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 243 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemapLayered(::cudaTextureObject_t texObject, float x, float y, float z, int layer) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;::exit(___);}





#line 250 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 252 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 253 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2Dgather(T *ptr, ::cudaTextureObject_t obj, float x, float y, int comp = 0) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;::exit(___);}





#line 260 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 260 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 261 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2Dgather(::cudaTextureObject_t to, float x, float y, int comp = 0) {int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;::exit(___);}





#line 268 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 272 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 273 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1DLod(T *ptr, ::cudaTextureObject_t obj, float x, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;::exit(___);}





#line 280 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 280 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 281 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1DLod(::cudaTextureObject_t texObject, float x, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)level;::exit(___);}





#line 288 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 291 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 292 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;::exit(___);}





#line 299 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 299 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 300 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;::exit(___);}





#line 307 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 310 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 311 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex3DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;::exit(___);}





#line 318 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 318 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 319 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;::exit(___);}





#line 326 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 329 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 330 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, int layer, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;::exit(___);}





#line 337 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 337 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 338 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1DLayeredLod(::cudaTextureObject_t texObject, float x, int layer, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;::exit(___);}





#line 345 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 348 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 349 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;::exit(___);}





#line 356 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 356 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 357 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;::exit(___);}





#line 364 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 367 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 368 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemapLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;::exit(___);}





#line 375 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 375 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 376 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemapLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;::exit(___);}





#line 383 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 386 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 387 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemapGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}





#line 394 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 394 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 395 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemapGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}





#line 402 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 404 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 405 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemapLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer, float level) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;::exit(___);}





#line 412 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 412 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 413 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemapLayeredLod(::cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;::exit(___);}





#line 420 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 422 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 423 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float dPdx, float dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;::exit(___);}





#line 430 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 430 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 431 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1DGrad(::cudaTextureObject_t texObject, float x, float dPdx, float dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;::exit(___);}





#line 438 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 441 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 442 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;::exit(___);}





#line 449 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 450 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 451 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;::exit(___);}





#line 458 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 461 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 462 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex3DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}





#line 469 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 469 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 470 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}





#line 477 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 480 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 481 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 488 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 488 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 489 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex1DLayeredGrad(::cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 496 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 499 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 500 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 507 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 507 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 508 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 515 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 518 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 519 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemapLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 526 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 526 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
template< class T> static T 
#line 527 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
texCubemapLayeredGrad(::cudaTextureObject_t texObject, float x, float y, float z, int layer, ::float4 dPdx, ::float4 dPdy) {int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}





#line 534 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\texture_indirect_functions.h"
#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
#line 60 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
#line 61 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
#line 62 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
#line 63 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
#line 64 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
#line 65 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
#line 66 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
#line 67 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
#line 68 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
#line 69 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
#line 70 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
#line 71 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
#line 72 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
#line 73 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< __int64>  { typedef void type; }; 
#line 74 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
#line 75 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< unsigned __int64>  { typedef void type; }; 
#line 76 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
#line 77 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
#line 78 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
#line 81 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
#line 82 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
#line 83 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
#line 84 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
#line 85 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
#line 86 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
#line 87 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
#line 88 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
#line 90 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
#line 91 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
#line 92 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
#line 93 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
#line 94 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
#line 95 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
#line 96 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
#line 99 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 100 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf1Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;::exit(___);}





#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 107 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static T 
#line 108 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf1Dread(::cudaSurfaceObject_t surfObject, int x, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;::exit(___);}





#line 115 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 117 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 118 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf2Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;::exit(___);}





#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 125 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static T 
#line 126 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf2Dread(::cudaSurfaceObject_t surfObject, int x, int y, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;::exit(___);}





#line 133 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 136 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 137 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf3Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;::exit(___);}





#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 144 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static T 
#line 145 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf3Dread(::cudaSurfaceObject_t surfObject, int x, int y, int z, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;::exit(___);}





#line 152 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 154 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 155 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf1DLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;::exit(___);}





#line 162 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 162 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static T 
#line 163 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf1DLayeredread(::cudaSurfaceObject_t surfObject, int x, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;::exit(___);}





#line 170 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 172 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 173 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf2DLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}





#line 180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 180 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static T 
#line 181 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf2DLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;::exit(___);}





#line 188 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 190 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 191 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surfCubemapread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;::exit(___);}





#line 198 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 198 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static T 
#line 199 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surfCubemapread(::cudaSurfaceObject_t surfObject, int x, int y, int face, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;::exit(___);}





#line 206 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 208 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 209 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surfCubemapLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int layerface, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;::exit(___);}





#line 216 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 216 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static T 
#line 217 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surfCubemapLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layerface, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;::exit(___);}





#line 224 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 226 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 227 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf1Dwrite(T val, ::cudaSurfaceObject_t obj, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;::exit(___);}





#line 234 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 234 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 235 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf2Dwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;::exit(___);}





#line 242 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 242 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 243 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf3Dwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;::exit(___);}





#line 250 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 250 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 251 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf1DLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;::exit(___);}





#line 258 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 258 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 259 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surf2DLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}





#line 266 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 266 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 267 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surfCubemapwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;::exit(___);}





#line 274 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 274 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 275 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
surfCubemapLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int layerface, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) {int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;::exit(___);}





#line 282 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\surface_indirect_functions.h"
#line 3296 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt/device_functions.h"
extern "C" unsigned __stdcall __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
#line 68 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_launch_parameters.h"
extern "C" {
#line 71 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_threadIdx; 
#line 72 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_blockIdx; 
#line 73 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_launch_parameters.h"
extern const dim3 __device_builtin_variable_blockDim; 
#line 74 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_launch_parameters.h"
extern const dim3 __device_builtin_variable_gridDim; 
#line 75 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_launch_parameters.h"
extern const int __device_builtin_variable_warpSize; 
#line 80 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\device_launch_parameters.h"
}
#line 199 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 200 "include/cu\\cuda_runtime.h"
cudaLaunchKernel(const T *
#line 201 "include/cu\\cuda_runtime.h"
func, ::dim3 
#line 202 "include/cu\\cuda_runtime.h"
gridDim, ::dim3 
#line 203 "include/cu\\cuda_runtime.h"
blockDim, void **
#line 204 "include/cu\\cuda_runtime.h"
args, ::size_t 
#line 205 "include/cu\\cuda_runtime.h"
sharedMem = 0, ::cudaStream_t 
#line 206 "include/cu\\cuda_runtime.h"
stream = 0) 
#line 208 "include/cu\\cuda_runtime.h"
{ 
#line 209 "include/cu\\cuda_runtime.h"
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 210 "include/cu\\cuda_runtime.h"
} 
#line 261 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 262 "include/cu\\cuda_runtime.h"
cudaLaunchCooperativeKernel(const T *
#line 263 "include/cu\\cuda_runtime.h"
func, ::dim3 
#line 264 "include/cu\\cuda_runtime.h"
gridDim, ::dim3 
#line 265 "include/cu\\cuda_runtime.h"
blockDim, void **
#line 266 "include/cu\\cuda_runtime.h"
args, ::size_t 
#line 267 "include/cu\\cuda_runtime.h"
sharedMem = 0, ::cudaStream_t 
#line 268 "include/cu\\cuda_runtime.h"
stream = 0) 
#line 270 "include/cu\\cuda_runtime.h"
{ 
#line 271 "include/cu\\cuda_runtime.h"
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 272 "include/cu\\cuda_runtime.h"
} 
#line 305 "include/cu\\cuda_runtime.h"
static __inline cudaError_t cudaEventCreate(cudaEvent_t *
#line 306 "include/cu\\cuda_runtime.h"
event, unsigned 
#line 307 "include/cu\\cuda_runtime.h"
flags) 
#line 309 "include/cu\\cuda_runtime.h"
{ 
#line 310 "include/cu\\cuda_runtime.h"
return ::cudaEventCreateWithFlags(event, flags); 
#line 311 "include/cu\\cuda_runtime.h"
} 
#line 370 "include/cu\\cuda_runtime.h"
static __inline cudaError_t cudaMallocHost(void **
#line 371 "include/cu\\cuda_runtime.h"
ptr, size_t 
#line 372 "include/cu\\cuda_runtime.h"
size, unsigned 
#line 373 "include/cu\\cuda_runtime.h"
flags) 
#line 375 "include/cu\\cuda_runtime.h"
{ 
#line 376 "include/cu\\cuda_runtime.h"
return ::cudaHostAlloc(ptr, size, flags); 
#line 377 "include/cu\\cuda_runtime.h"
} 
#line 379 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 380 "include/cu\\cuda_runtime.h"
cudaHostAlloc(T **
#line 381 "include/cu\\cuda_runtime.h"
ptr, ::size_t 
#line 382 "include/cu\\cuda_runtime.h"
size, unsigned 
#line 383 "include/cu\\cuda_runtime.h"
flags) 
#line 385 "include/cu\\cuda_runtime.h"
{ 
#line 386 "include/cu\\cuda_runtime.h"
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
#line 387 "include/cu\\cuda_runtime.h"
} 
#line 389 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 390 "include/cu\\cuda_runtime.h"
cudaHostGetDevicePointer(T **
#line 391 "include/cu\\cuda_runtime.h"
pDevice, void *
#line 392 "include/cu\\cuda_runtime.h"
pHost, unsigned 
#line 393 "include/cu\\cuda_runtime.h"
flags) 
#line 395 "include/cu\\cuda_runtime.h"
{ 
#line 396 "include/cu\\cuda_runtime.h"
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
#line 397 "include/cu\\cuda_runtime.h"
} 
#line 499 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 500 "include/cu\\cuda_runtime.h"
cudaMallocManaged(T **
#line 501 "include/cu\\cuda_runtime.h"
devPtr, ::size_t 
#line 502 "include/cu\\cuda_runtime.h"
size, unsigned 
#line 503 "include/cu\\cuda_runtime.h"
flags = 1) 
#line 505 "include/cu\\cuda_runtime.h"
{ 
#line 506 "include/cu\\cuda_runtime.h"
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
#line 507 "include/cu\\cuda_runtime.h"
} 
#line 589 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 590 "include/cu\\cuda_runtime.h"
cudaStreamAttachMemAsync(::cudaStream_t 
#line 591 "include/cu\\cuda_runtime.h"
stream, T *
#line 592 "include/cu\\cuda_runtime.h"
devPtr, ::size_t 
#line 593 "include/cu\\cuda_runtime.h"
length = 0, unsigned 
#line 594 "include/cu\\cuda_runtime.h"
flags = 4) 
#line 596 "include/cu\\cuda_runtime.h"
{ 
#line 597 "include/cu\\cuda_runtime.h"
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
#line 598 "include/cu\\cuda_runtime.h"
} 
#line 600 "include/cu\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 601 "include/cu\\cuda_runtime.h"
cudaMalloc(T **
#line 602 "include/cu\\cuda_runtime.h"
devPtr, ::size_t 
#line 603 "include/cu\\cuda_runtime.h"
size) 
#line 605 "include/cu\\cuda_runtime.h"
{ 
#line 606 "include/cu\\cuda_runtime.h"
return ::cudaMalloc((void **)((void *)devPtr), size); 
#line 607 "include/cu\\cuda_runtime.h"
} 
#line 609 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 610 "include/cu\\cuda_runtime.h"
cudaMallocHost(T **
#line 611 "include/cu\\cuda_runtime.h"
ptr, ::size_t 
#line 612 "include/cu\\cuda_runtime.h"
size, unsigned 
#line 613 "include/cu\\cuda_runtime.h"
flags = 0) 
#line 615 "include/cu\\cuda_runtime.h"
{ 
#line 616 "include/cu\\cuda_runtime.h"
return cudaMallocHost((void **)((void *)ptr), size, flags); 
#line 617 "include/cu\\cuda_runtime.h"
} 
#line 619 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 620 "include/cu\\cuda_runtime.h"
cudaMallocPitch(T **
#line 621 "include/cu\\cuda_runtime.h"
devPtr, ::size_t *
#line 622 "include/cu\\cuda_runtime.h"
pitch, ::size_t 
#line 623 "include/cu\\cuda_runtime.h"
width, ::size_t 
#line 624 "include/cu\\cuda_runtime.h"
height) 
#line 626 "include/cu\\cuda_runtime.h"
{ 
#line 627 "include/cu\\cuda_runtime.h"
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
#line 628 "include/cu\\cuda_runtime.h"
} 
#line 667 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 668 "include/cu\\cuda_runtime.h"
cudaMemcpyToSymbol(const T &
#line 669 "include/cu\\cuda_runtime.h"
symbol, const void *
#line 670 "include/cu\\cuda_runtime.h"
src, ::size_t 
#line 671 "include/cu\\cuda_runtime.h"
count, ::size_t 
#line 672 "include/cu\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 673 "include/cu\\cuda_runtime.h"
kind = cudaMemcpyHostToDevice) 
#line 675 "include/cu\\cuda_runtime.h"
{ 
#line 676 "include/cu\\cuda_runtime.h"
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
#line 677 "include/cu\\cuda_runtime.h"
} 
#line 721 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 722 "include/cu\\cuda_runtime.h"
cudaMemcpyToSymbolAsync(const T &
#line 723 "include/cu\\cuda_runtime.h"
symbol, const void *
#line 724 "include/cu\\cuda_runtime.h"
src, ::size_t 
#line 725 "include/cu\\cuda_runtime.h"
count, ::size_t 
#line 726 "include/cu\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 727 "include/cu\\cuda_runtime.h"
kind = cudaMemcpyHostToDevice, ::cudaStream_t 
#line 728 "include/cu\\cuda_runtime.h"
stream = 0) 
#line 730 "include/cu\\cuda_runtime.h"
{ 
#line 731 "include/cu\\cuda_runtime.h"
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
#line 732 "include/cu\\cuda_runtime.h"
} 
#line 769 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 770 "include/cu\\cuda_runtime.h"
cudaMemcpyFromSymbol(void *
#line 771 "include/cu\\cuda_runtime.h"
dst, const T &
#line 772 "include/cu\\cuda_runtime.h"
symbol, ::size_t 
#line 773 "include/cu\\cuda_runtime.h"
count, ::size_t 
#line 774 "include/cu\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 775 "include/cu\\cuda_runtime.h"
kind = cudaMemcpyDeviceToHost) 
#line 777 "include/cu\\cuda_runtime.h"
{ 
#line 778 "include/cu\\cuda_runtime.h"
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
#line 779 "include/cu\\cuda_runtime.h"
} 
#line 823 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 824 "include/cu\\cuda_runtime.h"
cudaMemcpyFromSymbolAsync(void *
#line 825 "include/cu\\cuda_runtime.h"
dst, const T &
#line 826 "include/cu\\cuda_runtime.h"
symbol, ::size_t 
#line 827 "include/cu\\cuda_runtime.h"
count, ::size_t 
#line 828 "include/cu\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 829 "include/cu\\cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, ::cudaStream_t 
#line 830 "include/cu\\cuda_runtime.h"
stream = 0) 
#line 832 "include/cu\\cuda_runtime.h"
{ 
#line 833 "include/cu\\cuda_runtime.h"
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
#line 834 "include/cu\\cuda_runtime.h"
} 
#line 859 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 860 "include/cu\\cuda_runtime.h"
cudaGetSymbolAddress(void **
#line 861 "include/cu\\cuda_runtime.h"
devPtr, const T &
#line 862 "include/cu\\cuda_runtime.h"
symbol) 
#line 864 "include/cu\\cuda_runtime.h"
{ 
#line 865 "include/cu\\cuda_runtime.h"
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
#line 866 "include/cu\\cuda_runtime.h"
} 
#line 891 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 892 "include/cu\\cuda_runtime.h"
cudaGetSymbolSize(::size_t *
#line 893 "include/cu\\cuda_runtime.h"
size, const T &
#line 894 "include/cu\\cuda_runtime.h"
symbol) 
#line 896 "include/cu\\cuda_runtime.h"
{ 
#line 897 "include/cu\\cuda_runtime.h"
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
#line 898 "include/cu\\cuda_runtime.h"
} 
#line 935 "include/cu\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 936 "include/cu\\cuda_runtime.h"
cudaBindTexture(::size_t *
#line 937 "include/cu\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 938 "include/cu\\cuda_runtime.h"
tex, const void *
#line 939 "include/cu\\cuda_runtime.h"
devPtr, const ::cudaChannelFormatDesc &
#line 940 "include/cu\\cuda_runtime.h"
desc, ::size_t 
#line 941 "include/cu\\cuda_runtime.h"
size = 4294967295U) 
#line 943 "include/cu\\cuda_runtime.h"
{ 
#line 944 "include/cu\\cuda_runtime.h"
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
#line 945 "include/cu\\cuda_runtime.h"
} 
#line 981 "include/cu\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 982 "include/cu\\cuda_runtime.h"
cudaBindTexture(::size_t *
#line 983 "include/cu\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 984 "include/cu\\cuda_runtime.h"
tex, const void *
#line 985 "include/cu\\cuda_runtime.h"
devPtr, ::size_t 
#line 986 "include/cu\\cuda_runtime.h"
size = 4294967295U) 
#line 988 "include/cu\\cuda_runtime.h"
{ 
#line 989 "include/cu\\cuda_runtime.h"
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
#line 990 "include/cu\\cuda_runtime.h"
} 
#line 1038 "include/cu\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1039 "include/cu\\cuda_runtime.h"
cudaBindTexture2D(::size_t *
#line 1040 "include/cu\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 1041 "include/cu\\cuda_runtime.h"
tex, const void *
#line 1042 "include/cu\\cuda_runtime.h"
devPtr, const ::cudaChannelFormatDesc &
#line 1043 "include/cu\\cuda_runtime.h"
desc, ::size_t 
#line 1044 "include/cu\\cuda_runtime.h"
width, ::size_t 
#line 1045 "include/cu\\cuda_runtime.h"
height, ::size_t 
#line 1046 "include/cu\\cuda_runtime.h"
pitch) 
#line 1048 "include/cu\\cuda_runtime.h"
{ 
#line 1049 "include/cu\\cuda_runtime.h"
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
#line 1050 "include/cu\\cuda_runtime.h"
} 
#line 1097 "include/cu\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1098 "include/cu\\cuda_runtime.h"
cudaBindTexture2D(::size_t *
#line 1099 "include/cu\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 1100 "include/cu\\cuda_runtime.h"
tex, const void *
#line 1101 "include/cu\\cuda_runtime.h"
devPtr, ::size_t 
#line 1102 "include/cu\\cuda_runtime.h"
width, ::size_t 
#line 1103 "include/cu\\cuda_runtime.h"
height, ::size_t 
#line 1104 "include/cu\\cuda_runtime.h"
pitch) 
#line 1106 "include/cu\\cuda_runtime.h"
{ 
#line 1107 "include/cu\\cuda_runtime.h"
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
#line 1108 "include/cu\\cuda_runtime.h"
} 
#line 1140 "include/cu\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1141 "include/cu\\cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1142 "include/cu\\cuda_runtime.h"
tex, ::cudaArray_const_t 
#line 1143 "include/cu\\cuda_runtime.h"
array, const ::cudaChannelFormatDesc &
#line 1144 "include/cu\\cuda_runtime.h"
desc) 
#line 1146 "include/cu\\cuda_runtime.h"
{ 
#line 1147 "include/cu\\cuda_runtime.h"
return ::cudaBindTextureToArray(&tex, array, &desc); 
#line 1148 "include/cu\\cuda_runtime.h"
} 
#line 1179 "include/cu\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1180 "include/cu\\cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1181 "include/cu\\cuda_runtime.h"
tex, ::cudaArray_const_t 
#line 1182 "include/cu\\cuda_runtime.h"
array) 
#line 1184 "include/cu\\cuda_runtime.h"
{ 
#line 1185 "include/cu\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1186 "include/cu\\cuda_runtime.h"
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1188 "include/cu\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
#line 1189 "include/cu\\cuda_runtime.h"
} 
#line 1221 "include/cu\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1222 "include/cu\\cuda_runtime.h"
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1223 "include/cu\\cuda_runtime.h"
tex, ::cudaMipmappedArray_const_t 
#line 1224 "include/cu\\cuda_runtime.h"
mipmappedArray, const ::cudaChannelFormatDesc &
#line 1225 "include/cu\\cuda_runtime.h"
desc) 
#line 1227 "include/cu\\cuda_runtime.h"
{ 
#line 1228 "include/cu\\cuda_runtime.h"
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
#line 1229 "include/cu\\cuda_runtime.h"
} 
#line 1260 "include/cu\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1261 "include/cu\\cuda_runtime.h"
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1262 "include/cu\\cuda_runtime.h"
tex, ::cudaMipmappedArray_const_t 
#line 1263 "include/cu\\cuda_runtime.h"
mipmappedArray) 
#line 1265 "include/cu\\cuda_runtime.h"
{ 
#line 1266 "include/cu\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1267 "include/cu\\cuda_runtime.h"
::cudaArray_t levelArray; 
#line 1268 "include/cu\\cuda_runtime.h"
::cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
#line 1270 "include/cu\\cuda_runtime.h"
if (err != (cudaSuccess)) { 
#line 1271 "include/cu\\cuda_runtime.h"
return err; 
#line 1272 "include/cu\\cuda_runtime.h"
}  
#line 1273 "include/cu\\cuda_runtime.h"
err = ::cudaGetChannelDesc(&desc, levelArray); 
#line 1275 "include/cu\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
#line 1276 "include/cu\\cuda_runtime.h"
} 
#line 1303 "include/cu\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1304 "include/cu\\cuda_runtime.h"
cudaUnbindTexture(const texture< T, dim, readMode>  &
#line 1305 "include/cu\\cuda_runtime.h"
tex) 
#line 1307 "include/cu\\cuda_runtime.h"
{ 
#line 1308 "include/cu\\cuda_runtime.h"
return ::cudaUnbindTexture(&tex); 
#line 1309 "include/cu\\cuda_runtime.h"
} 
#line 1339 "include/cu\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1340 "include/cu\\cuda_runtime.h"
cudaGetTextureAlignmentOffset(::size_t *
#line 1341 "include/cu\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 1342 "include/cu\\cuda_runtime.h"
tex) 
#line 1344 "include/cu\\cuda_runtime.h"
{ 
#line 1345 "include/cu\\cuda_runtime.h"
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
#line 1346 "include/cu\\cuda_runtime.h"
} 
#line 1391 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1392 "include/cu\\cuda_runtime.h"
cudaFuncSetCacheConfig(T *
#line 1393 "include/cu\\cuda_runtime.h"
func, ::cudaFuncCache 
#line 1394 "include/cu\\cuda_runtime.h"
cacheConfig) 
#line 1396 "include/cu\\cuda_runtime.h"
{ 
#line 1397 "include/cu\\cuda_runtime.h"
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
#line 1398 "include/cu\\cuda_runtime.h"
} 
#line 1400 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1401 "include/cu\\cuda_runtime.h"
cudaFuncSetSharedMemConfig(T *
#line 1402 "include/cu\\cuda_runtime.h"
func, ::cudaSharedMemConfig 
#line 1403 "include/cu\\cuda_runtime.h"
config) 
#line 1405 "include/cu\\cuda_runtime.h"
{ 
#line 1406 "include/cu\\cuda_runtime.h"
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
#line 1407 "include/cu\\cuda_runtime.h"
} 
#line 1436 "include/cu\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1437 "include/cu\\cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
#line 1438 "include/cu\\cuda_runtime.h"
numBlocks, T 
#line 1439 "include/cu\\cuda_runtime.h"
func, int 
#line 1440 "include/cu\\cuda_runtime.h"
blockSize, ::size_t 
#line 1441 "include/cu\\cuda_runtime.h"
dynamicSMemSize) 
#line 1442 "include/cu\\cuda_runtime.h"
{ 
#line 1443 "include/cu\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
#line 1444 "include/cu\\cuda_runtime.h"
} 
#line 1487 "include/cu\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1488 "include/cu\\cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
#line 1489 "include/cu\\cuda_runtime.h"
numBlocks, T 
#line 1490 "include/cu\\cuda_runtime.h"
func, int 
#line 1491 "include/cu\\cuda_runtime.h"
blockSize, ::size_t 
#line 1492 "include/cu\\cuda_runtime.h"
dynamicSMemSize, unsigned 
#line 1493 "include/cu\\cuda_runtime.h"
flags) 
#line 1494 "include/cu\\cuda_runtime.h"
{ 
#line 1495 "include/cu\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
#line 1496 "include/cu\\cuda_runtime.h"
} 
#line 1501 "include/cu\\cuda_runtime.h"
class __cudaOccupancyB2DHelper { 
#line 1502 "include/cu\\cuda_runtime.h"
size_t n; 
#line 1504 "include/cu\\cuda_runtime.h"
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
#line 1505 "include/cu\\cuda_runtime.h"
size_t operator()(int) 
#line 1506 "include/cu\\cuda_runtime.h"
{ 
#line 1507 "include/cu\\cuda_runtime.h"
return n; 
#line 1508 "include/cu\\cuda_runtime.h"
} 
#line 1509 "include/cu\\cuda_runtime.h"
}; 
#line 1556 "include/cu\\cuda_runtime.h"
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1557 "include/cu\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
#line 1558 "include/cu\\cuda_runtime.h"
minGridSize, int *
#line 1559 "include/cu\\cuda_runtime.h"
blockSize, T 
#line 1560 "include/cu\\cuda_runtime.h"
func, UnaryFunction 
#line 1561 "include/cu\\cuda_runtime.h"
blockSizeToDynamicSMemSize, int 
#line 1562 "include/cu\\cuda_runtime.h"
blockSizeLimit = 0, unsigned 
#line 1563 "include/cu\\cuda_runtime.h"
flags = 0) 
#line 1564 "include/cu\\cuda_runtime.h"
{ 
#line 1565 "include/cu\\cuda_runtime.h"
::cudaError_t status; 
#line 1568 "include/cu\\cuda_runtime.h"
int device; 
#line 1569 "include/cu\\cuda_runtime.h"
::cudaFuncAttributes attr; 
#line 1572 "include/cu\\cuda_runtime.h"
int maxThreadsPerMultiProcessor; 
#line 1573 "include/cu\\cuda_runtime.h"
int warpSize; 
#line 1574 "include/cu\\cuda_runtime.h"
int devMaxThreadsPerBlock; 
#line 1575 "include/cu\\cuda_runtime.h"
int multiProcessorCount; 
#line 1576 "include/cu\\cuda_runtime.h"
int funcMaxThreadsPerBlock; 
#line 1577 "include/cu\\cuda_runtime.h"
int occupancyLimit; 
#line 1578 "include/cu\\cuda_runtime.h"
int granularity; 
#line 1581 "include/cu\\cuda_runtime.h"
int maxBlockSize = 0; 
#line 1582 "include/cu\\cuda_runtime.h"
int numBlocks = 0; 
#line 1583 "include/cu\\cuda_runtime.h"
int maxOccupancy = 0; 
#line 1586 "include/cu\\cuda_runtime.h"
int blockSizeToTryAligned; 
#line 1587 "include/cu\\cuda_runtime.h"
int blockSizeToTry; 
#line 1588 "include/cu\\cuda_runtime.h"
int blockSizeLimitAligned; 
#line 1589 "include/cu\\cuda_runtime.h"
int occupancyInBlocks; 
#line 1590 "include/cu\\cuda_runtime.h"
int occupancyInThreads; 
#line 1591 "include/cu\\cuda_runtime.h"
::size_t dynamicSMemSize; 
#line 1597 "include/cu\\cuda_runtime.h"
if (((!minGridSize) || (!blockSize)) || (!func)) { 
#line 1598 "include/cu\\cuda_runtime.h"
return cudaErrorInvalidValue; 
#line 1599 "include/cu\\cuda_runtime.h"
}  
#line 1605 "include/cu\\cuda_runtime.h"
status = ::cudaGetDevice(&device); 
#line 1606 "include/cu\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1607 "include/cu\\cuda_runtime.h"
return status; 
#line 1608 "include/cu\\cuda_runtime.h"
}  
#line 1610 "include/cu\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
#line 1614 "include/cu\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1615 "include/cu\\cuda_runtime.h"
return status; 
#line 1616 "include/cu\\cuda_runtime.h"
}  
#line 1618 "include/cu\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
#line 1622 "include/cu\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1623 "include/cu\\cuda_runtime.h"
return status; 
#line 1624 "include/cu\\cuda_runtime.h"
}  
#line 1626 "include/cu\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
#line 1630 "include/cu\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1631 "include/cu\\cuda_runtime.h"
return status; 
#line 1632 "include/cu\\cuda_runtime.h"
}  
#line 1634 "include/cu\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
#line 1638 "include/cu\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1639 "include/cu\\cuda_runtime.h"
return status; 
#line 1640 "include/cu\\cuda_runtime.h"
}  
#line 1642 "include/cu\\cuda_runtime.h"
status = cudaFuncGetAttributes(&attr, func); 
#line 1643 "include/cu\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1644 "include/cu\\cuda_runtime.h"
return status; 
#line 1645 "include/cu\\cuda_runtime.h"
}  
#line 1647 "include/cu\\cuda_runtime.h"
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
#line 1653 "include/cu\\cuda_runtime.h"
occupancyLimit = maxThreadsPerMultiProcessor; 
#line 1654 "include/cu\\cuda_runtime.h"
granularity = warpSize; 
#line 1656 "include/cu\\cuda_runtime.h"
if (blockSizeLimit == 0) { 
#line 1657 "include/cu\\cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1658 "include/cu\\cuda_runtime.h"
}  
#line 1660 "include/cu\\cuda_runtime.h"
if (devMaxThreadsPerBlock < blockSizeLimit) { 
#line 1661 "include/cu\\cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1662 "include/cu\\cuda_runtime.h"
}  
#line 1664 "include/cu\\cuda_runtime.h"
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
#line 1665 "include/cu\\cuda_runtime.h"
blockSizeLimit = funcMaxThreadsPerBlock; 
#line 1666 "include/cu\\cuda_runtime.h"
}  
#line 1668 "include/cu\\cuda_runtime.h"
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
#line 1670 "include/cu\\cuda_runtime.h"
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
#line 1674 "include/cu\\cuda_runtime.h"
if (blockSizeLimit < blockSizeToTryAligned) { 
#line 1675 "include/cu\\cuda_runtime.h"
blockSizeToTry = blockSizeLimit; 
#line 1676 "include/cu\\cuda_runtime.h"
} else { 
#line 1677 "include/cu\\cuda_runtime.h"
blockSizeToTry = blockSizeToTryAligned; 
#line 1678 "include/cu\\cuda_runtime.h"
}  
#line 1680 "include/cu\\cuda_runtime.h"
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
#line 1682 "include/cu\\cuda_runtime.h"
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
#line 1689 "include/cu\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1690 "include/cu\\cuda_runtime.h"
return status; 
#line 1691 "include/cu\\cuda_runtime.h"
}  
#line 1693 "include/cu\\cuda_runtime.h"
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
#line 1695 "include/cu\\cuda_runtime.h"
if (occupancyInThreads > maxOccupancy) { 
#line 1696 "include/cu\\cuda_runtime.h"
maxBlockSize = blockSizeToTry; 
#line 1697 "include/cu\\cuda_runtime.h"
numBlocks = occupancyInBlocks; 
#line 1698 "include/cu\\cuda_runtime.h"
maxOccupancy = occupancyInThreads; 
#line 1699 "include/cu\\cuda_runtime.h"
}  
#line 1703 "include/cu\\cuda_runtime.h"
if (occupancyLimit == maxOccupancy) { 
#line 1704 "include/cu\\cuda_runtime.h"
break; 
#line 1705 "include/cu\\cuda_runtime.h"
}  
#line 1706 "include/cu\\cuda_runtime.h"
}  
#line 1714 "include/cu\\cuda_runtime.h"
(*minGridSize) = (numBlocks * multiProcessorCount); 
#line 1715 "include/cu\\cuda_runtime.h"
(*blockSize) = maxBlockSize; 
#line 1717 "include/cu\\cuda_runtime.h"
return status; 
#line 1718 "include/cu\\cuda_runtime.h"
} 
#line 1751 "include/cu\\cuda_runtime.h"
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1752 "include/cu\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
#line 1753 "include/cu\\cuda_runtime.h"
minGridSize, int *
#line 1754 "include/cu\\cuda_runtime.h"
blockSize, T 
#line 1755 "include/cu\\cuda_runtime.h"
func, UnaryFunction 
#line 1756 "include/cu\\cuda_runtime.h"
blockSizeToDynamicSMemSize, int 
#line 1757 "include/cu\\cuda_runtime.h"
blockSizeLimit = 0) 
#line 1758 "include/cu\\cuda_runtime.h"
{ 
#line 1759 "include/cu\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
#line 1760 "include/cu\\cuda_runtime.h"
} 
#line 1796 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1797 "include/cu\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSize(int *
#line 1798 "include/cu\\cuda_runtime.h"
minGridSize, int *
#line 1799 "include/cu\\cuda_runtime.h"
blockSize, T 
#line 1800 "include/cu\\cuda_runtime.h"
func, ::size_t 
#line 1801 "include/cu\\cuda_runtime.h"
dynamicSMemSize = 0, int 
#line 1802 "include/cu\\cuda_runtime.h"
blockSizeLimit = 0) 
#line 1803 "include/cu\\cuda_runtime.h"
{ 
#line 1804 "include/cu\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
#line 1805 "include/cu\\cuda_runtime.h"
} 
#line 1855 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1856 "include/cu\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
#line 1857 "include/cu\\cuda_runtime.h"
minGridSize, int *
#line 1858 "include/cu\\cuda_runtime.h"
blockSize, T 
#line 1859 "include/cu\\cuda_runtime.h"
func, ::size_t 
#line 1860 "include/cu\\cuda_runtime.h"
dynamicSMemSize = 0, int 
#line 1861 "include/cu\\cuda_runtime.h"
blockSizeLimit = 0, unsigned 
#line 1862 "include/cu\\cuda_runtime.h"
flags = 0) 
#line 1863 "include/cu\\cuda_runtime.h"
{ 
#line 1864 "include/cu\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
#line 1865 "include/cu\\cuda_runtime.h"
} 
#line 1896 "include/cu\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1897 "include/cu\\cuda_runtime.h"
cudaFuncGetAttributes(::cudaFuncAttributes *
#line 1898 "include/cu\\cuda_runtime.h"
attr, T *
#line 1899 "include/cu\\cuda_runtime.h"
entry) 
#line 1901 "include/cu\\cuda_runtime.h"
{ 
#line 1902 "include/cu\\cuda_runtime.h"
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
#line 1903 "include/cu\\cuda_runtime.h"
} 
#line 1941 "include/cu\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1942 "include/cu\\cuda_runtime.h"
cudaFuncSetAttribute(T *
#line 1943 "include/cu\\cuda_runtime.h"
entry, ::cudaFuncAttribute 
#line 1944 "include/cu\\cuda_runtime.h"
attr, int 
#line 1945 "include/cu\\cuda_runtime.h"
value) 
#line 1947 "include/cu\\cuda_runtime.h"
{ 
#line 1948 "include/cu\\cuda_runtime.h"
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
#line 1949 "include/cu\\cuda_runtime.h"
} 
#line 1973 "include/cu\\cuda_runtime.h"
template< class T, int dim> 
#line 1974 "include/cu\\cuda_runtime.h"
__declspec(deprecated) static __inline ::cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1975 "include/cu\\cuda_runtime.h"
surf, ::cudaArray_const_t 
#line 1976 "include/cu\\cuda_runtime.h"
array, const ::cudaChannelFormatDesc &
#line 1977 "include/cu\\cuda_runtime.h"
desc) 
#line 1979 "include/cu\\cuda_runtime.h"
{ 
#line 1980 "include/cu\\cuda_runtime.h"
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
#line 1981 "include/cu\\cuda_runtime.h"
} 
#line 2004 "include/cu\\cuda_runtime.h"
template< class T, int dim> 
#line 2005 "include/cu\\cuda_runtime.h"
__declspec(deprecated) static __inline ::cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
#line 2006 "include/cu\\cuda_runtime.h"
surf, ::cudaArray_const_t 
#line 2007 "include/cu\\cuda_runtime.h"
array) 
#line 2009 "include/cu\\cuda_runtime.h"
{ 
#line 2010 "include/cu\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 2011 "include/cu\\cuda_runtime.h"
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 2013 "include/cu\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
#line 2014 "include/cu\\cuda_runtime.h"
} 
#line 2028 "include/cu\\cuda_runtime.h"
#pragma warning(pop)
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_printf_options() 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
{ 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
static unsigned __int64 _OptionsStorage; 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
return &_OptionsStorage; 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
} 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_scanf_options() 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
{ 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
static unsigned __int64 _OptionsStorage; 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
return &_OptionsStorage; 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
} 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_stdio_config.h"
}__pragma(pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
typedef 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
struct _iobuf { 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
void *_Placeholder; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} FILE; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl __acrt_iob_func(unsigned _Ix); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl fgetwc(FILE * _Stream); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _fgetwchar(); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl fputwc(__wchar_t _Character, FILE * _Stream); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _fputwchar(__wchar_t _Character); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl getwc(FILE * _Stream); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl getwchar(); 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__wchar_t *__cdecl fgetws(__wchar_t * _Buffer, int _BufferCount, FILE * _Stream); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl fputws(const __wchar_t * _Buffer, FILE * _Stream); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__wchar_t *__cdecl _getws_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline wchar_t * __cdecl _getws_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _getws_s ( _Buffer, _Size ); }}
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl putwc(__wchar_t _Character, FILE * _Stream); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl putwchar(__wchar_t _Character); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl _putws(const __wchar_t * _Buffer); 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl ungetwc(wint_t _Character, FILE * _Stream); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl _wfdopen(int _FileHandle, const __wchar_t * _Mode); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl _wfopen(const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
errno_t __cdecl _wfopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl _wfreopen(const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
errno_t __cdecl _wfreopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl _wfsopen(const __wchar_t * _FileName, const __wchar_t * _Mode, int _ShFlag); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl _wpopen(const __wchar_t * _Command, const __wchar_t * _Mode); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl _wremove(const __wchar_t * _FileName); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__declspec(allocator) __wchar_t *__cdecl _wtempnam(const __wchar_t * _Directory, const __wchar_t * _FilePrefix); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
errno_t __cdecl _wtmpnam_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wtmpnam_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wtmpnam_s ( _Buffer, _Size ); }}
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__wchar_t *__cdecl _wtmpnam(__wchar_t * _Buffer); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _fgetwc_nolock(FILE * _Stream); 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _fputwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _getwc_nolock(FILE * _Stream); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _putwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _ungetwc_nolock(wint_t _Character, FILE * _Stream); 
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vfwprintf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vfwprintf_s(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vfwprintf_p(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_l(FILE *const 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf(FILE *const 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_s_l(FILE *const 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 329 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf_s(FILE *const 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p_l(FILE *const 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p(FILE *const 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_l(const __wchar_t *const 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf(const __wchar_t *const 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_s_l(const __wchar_t *const 
#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf_s(const __wchar_t *const 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p_l(const __wchar_t *const 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p(const __wchar_t *const 
#line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_l(FILE *const 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf(FILE *const 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_s_l(FILE *const 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf_s(FILE *const 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p_l(FILE *const 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p(FILE *const 
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 571 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 582 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 587 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_l(const __wchar_t *const 
#line 588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 589 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 600 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 605 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf(const __wchar_t *const 
#line 606 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 612 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 616 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 618 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 622 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_s_l(const __wchar_t *const 
#line 623 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 624 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 630 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 635 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 642 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf_s(const __wchar_t *const 
#line 643 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 651 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p_l(const __wchar_t *const 
#line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 663 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 670 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 672 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 674 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 679 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p(const __wchar_t *const 
#line 680 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 691 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vfwscanf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 711 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_l(FILE *const 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 715 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 721 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf(FILE *const 
#line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 730 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 731 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 737 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 738 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 742 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_s_l(FILE *const 
#line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 744 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 746 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 752 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf_s(FILE *const 
#line 762 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_l(const __wchar_t *const 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 785 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf(const __wchar_t *const 
#line 791 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 798 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_s_l(const __wchar_t *const 
#line 804 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 812 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf_s(const __wchar_t *const 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 821 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 827 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_l(FILE *const 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 842 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 846 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf(FILE *const 
#line 854 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 855 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 864 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 866 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_s_l(FILE *const 
#line 872 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 873 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 874 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf_s(FILE *const 
#line 893 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 894 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 905 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_l(const __wchar_t *const 
#line 913 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 914 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 925 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 930 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf(const __wchar_t *const 
#line 931 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 942 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 943 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 947 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_s_l(const __wchar_t *const 
#line 948 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 949 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 955 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 960 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 967 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf_s(const __wchar_t *const 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 978 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vswprintf(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1014 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vswprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1025 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vsnwprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1037 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vswprintf_p(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1048 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_l(__wchar_t *const 
#line 1049 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1050 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1051 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1052 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1053 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1063 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1067 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4793)
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s_l(__wchar_t *const 
#line 1073 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1075 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1077 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1084 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vsnwprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1088 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s(__wchar_t *const 
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1097 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1098 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1099 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, ...); __inline int __cdecl _vsnwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, va_list _Args); 
#line 1118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf(__wchar_t *
#line 1123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, size_t 
#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *
#line 1125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _vsnwprintf_s ( wchar_t ( & _Buffer ) [ _Size ], size_t _BufferCount, wchar_t const * _Format, va_list _ArgList ) throw ( ) { return _vsnwprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c_l(__wchar_t *const 
#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c(__wchar_t *const 
#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_l(__wchar_t *const 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
} 
#line 1207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __vswprintf_l(__wchar_t *const 
#line 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf(__wchar_t *const 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf(__wchar_t *const 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_s_l(__wchar_t *const 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf_s(__wchar_t *const 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1278 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1280 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1286 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1287 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1292 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vswprintf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, va_list _ArgList ) throw ( ) { return vswprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1302 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p_l(__wchar_t *const 
#line 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1304 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1306 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p(__wchar_t *const 
#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1333 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_l(const __wchar_t *const 
#line 1340 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1342 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1348 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1353 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1358 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf(const __wchar_t *const 
#line 1359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1360 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vscwprintf_l(_Format, 0, _ArgList); 
#line 1367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p_l(const __wchar_t *const 
#line 1373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p(const __wchar_t *const 
#line 1392 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1393 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t *const 
#line 1406 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1407 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1408 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1413 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1414 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1415 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1416 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1420 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1425 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_l(__wchar_t *const 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1434 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1436 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1439 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1440 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1441 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t *const 
#line 1447 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1448 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1454 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1456 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1457 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf(__wchar_t *const 
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1468 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1474 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1477 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1478 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1479 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1483 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#line 1486 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(disable:4793 4996)
#line 1488 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, ...); __inline int __cdecl __vswprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, va_list _Args); 
#line 1497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t * _Buffer, const __wchar_t * _Format, ...); __inline int __cdecl _vswprintf(__wchar_t * _Buffer, const __wchar_t * _Format, va_list _Args); 
#line 1504 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_s_l(__wchar_t *const 
#line 1509 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1511 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1518 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1520 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1530 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf_s(__wchar_t *const 
#line 1531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1532 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1533 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1540 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1541 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1543 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template < size_t _Size > inline int __cdecl swprintf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return vswprintf_s ( _Buffer, _Size, _Format, _ArgList ); }__pragma(warning(pop)) }
#line 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p_l(__wchar_t *const 
#line 1560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1562 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1569 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1571 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1572 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1575 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p(__wchar_t *const 
#line 1581 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1582 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1583 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1589 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1590 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1591 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1593 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1594 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1600 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c_l(__wchar_t *const 
#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1602 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1604 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1610 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1611 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1612 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1613 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1615 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1616 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c(__wchar_t *const 
#line 1622 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1623 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1624 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1630 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1632 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1634 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1635 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1636 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1641 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_l(__wchar_t *const 
#line 1642 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1643 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1644 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1645 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1650 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1652 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1653 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1655 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1660 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1661 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1667 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t *
#line 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, size_t 
#line 1669 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *
#line 1670 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1676 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1677 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1678 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1680 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1686 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1687 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1692 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s_l(__wchar_t *const 
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1694 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1695 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1696 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1697 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1703 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1704 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1705 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1707 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1708 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1709 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1714 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s(__wchar_t *const 
#line 1715 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1716 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1717 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1718 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1724 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1725 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1727 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1728 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1729 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template < size_t _Size > inline int __cdecl _snwprintf_s ( wchar_t ( & _Buffer ) [ _Size ], size_t _BufferCount, wchar_t const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return _vsnwprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }__pragma(warning(pop)) }
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_l(const __wchar_t *const 
#line 1743 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1744 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1749 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1751 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_l(_Format, _Locale, _ArgList); 
#line 1754 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1755 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1756 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1761 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf(const __wchar_t *const 
#line 1762 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1767 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1768 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1769 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1770 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_l(_Format, 0, _ArgList); 
#line 1772 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1773 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1774 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1779 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p_l(const __wchar_t *const 
#line 1780 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1781 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1787 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1788 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1789 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_p_l(_Format, _Locale, _ArgList); 
#line 1791 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1792 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1793 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1798 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p(const __wchar_t *const 
#line 1799 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1805 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1806 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1808 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1809 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1810 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1811 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1816 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)
#line 1822 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1821 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1822 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
swprintf(__wchar_t *const 
#line 1823 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1824 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) throw() 
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1828 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1829 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress: 28719)
_Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1832 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1833 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1837 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1836 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1837 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
vswprintf(__wchar_t *const 
#line 1838 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1839 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1840 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) throw() 
#line 1842 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(suppress: 28719)
return vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1847 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_swprintf_l(__wchar_t *const 
#line 1849 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1850 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) throw() 
#line 1853 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1855 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1856 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1857 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1858 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1859 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1860 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1862 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_vswprintf_l(__wchar_t *const 
#line 1864 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1866 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1867 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) throw() 
#line 1869 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1870 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1871 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1892 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vswscanf(unsigned __int64 _Options, const __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_l(const __wchar_t *const 
#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1905 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1906 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1907 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1913 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1916 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1921 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf(const __wchar_t *
#line 1922 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *
#line 1923 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1924 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1930 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 1931 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1936 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_s_l(const __wchar_t *const 
#line 1937 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1938 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1945 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1946 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1949 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1956 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf_s(const __wchar_t *const 
#line 1957 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1958 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1959 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1964 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1965 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 1966 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1971 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vswscanf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, va_list _ArgList ) throw ( ) { return vswscanf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1981 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_l(const __wchar_t *const 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1983 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1984 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1985 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1986 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1992 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1995 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_s_l(const __wchar_t *const 
#line 2001 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2002 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2003 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2004 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 2005 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 2010 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2014 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_l(const __wchar_t *const 
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2021 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, _locale_t 
#line 2022 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2028 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2029 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2030 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2031 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2032 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2039 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf(const __wchar_t *const 
#line 2040 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2041 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2047 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2048 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2049 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2050 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2051 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2052 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2053 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2058 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_s_l(const __wchar_t *const 
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2060 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2061 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2067 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2068 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2069 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2070 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2072 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf_s(const __wchar_t *const 
#line 2081 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2082 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2088 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2090 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2091 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2093 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2094 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_l(const __wchar_t *const 
#line 2102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 2120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf(const __wchar_t *const 
#line 2128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 2145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s_l(const __wchar_t *const 
#line 2153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s(const __wchar_t *const 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wstdio.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
typedef __int64 fpos_t; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
errno_t __cdecl _get_stream_buffer_pointers(FILE * _Stream, char *** _Base, char *** _Pointer, int ** _Count); 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
errno_t __cdecl clearerr_s(FILE * _Stream); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
errno_t __cdecl fopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
size_t __cdecl fread_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
errno_t __cdecl freopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode, FILE * _OldStream); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
char *__cdecl gets_s(char * _Buffer, rsize_t _Size); 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
errno_t __cdecl tmpfile_s(FILE ** _Stream); 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
errno_t __cdecl tmpnam_s(char * _Buffer, rsize_t _Size); 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
void __cdecl clearerr(FILE * _Stream); 
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fclose(FILE * _Stream); 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fcloseall(); 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
FILE *__cdecl _fdopen(int _FileHandle, const char * _Mode); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl feof(FILE * _Stream); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl ferror(FILE * _Stream); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fflush(FILE * _Stream); 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fgetc(FILE * _Stream); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fgetchar(); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fgetpos(FILE * _Stream, fpos_t * _Position); 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
char *__cdecl fgets(char * _Buffer, int _MaxCount, FILE * _Stream); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fileno(FILE * _Stream); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _flushall(); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
FILE *__cdecl fopen(const char * _FileName, const char * _Mode); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fputc(int _Character, FILE * _Stream); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fputchar(int _Character); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fputs(const char * _Buffer, FILE * _Stream); 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
size_t __cdecl fread(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
FILE *__cdecl freopen(const char * _FileName, const char * _Mode, FILE * _Stream); 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
FILE *__cdecl _fsopen(const char * _FileName, const char * _Mode, int _ShFlag); 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fsetpos(FILE * _Stream, const fpos_t * _Position); 
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fseek(FILE * _Stream, long _Offset, int _Origin); 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fseeki64(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
long __cdecl ftell(FILE * _Stream); 
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__int64 __cdecl _ftelli64(FILE * _Stream); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
size_t __cdecl fwrite(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl getc(FILE * _Stream); 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl getchar(); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _getmaxstdio(); 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline char * __cdecl gets_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return gets_s ( _Buffer, _Size ); }}
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _getw(FILE * _Stream); 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
void __cdecl perror(const char * _ErrorMessage); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _pclose(FILE * _Stream); 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
FILE *__cdecl _popen(const char * _Command, const char * _Mode); 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl putc(int _Character, FILE * _Stream); 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl putchar(int _Character); 
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl puts(const char * _Buffer); 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _putw(int _Word, FILE * _Stream); 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl remove(const char * _FileName); 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl rename(const char * _OldFileName, const char * _NewFileName); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _unlink(const char * _FileName); 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl unlink(const char * _FileName); 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
void __cdecl rewind(FILE * _Stream); 
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _rmtmp(); 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
void __cdecl setbuf(FILE * _Stream, char * _Buffer); 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _setmaxstdio(int _Maximum); 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl setvbuf(FILE * _Stream, char * _Buffer, int _Mode, size_t _Size); 
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__declspec(allocator) char *__cdecl _tempnam(const char * _DirectoryName, const char * _FilePrefix); 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
FILE *__cdecl tmpfile(); 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl tmpnam_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return tmpnam_s ( _Buffer, _Size ); }}
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 28726)
char *__cdecl tmpnam(char * _Buffer); 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl ungetc(int _Character, FILE * _Stream); 
#line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
void __cdecl _lock_file(FILE * _Stream); 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
void __cdecl _unlock_file(FILE * _Stream); 
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fclose_nolock(FILE * _Stream); 
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fflush_nolock(FILE * _Stream); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fgetc_nolock(FILE * _Stream); 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fputc_nolock(int _Character, FILE * _Stream); 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
size_t __cdecl _fread_nolock(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
size_t __cdecl _fread_nolock_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fseek_nolock(FILE * _Stream, long _Offset, int _Origin); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _fseeki64_nolock(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
long __cdecl _ftell_nolock(FILE * _Stream); 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__int64 __cdecl _ftelli64_nolock(FILE * _Stream); 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
size_t __cdecl _fwrite_nolock(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _getc_nolock(FILE * _Stream); 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _putc_nolock(int _Character, FILE * _Stream); 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _ungetc_nolock(int _Character, FILE * _Stream); 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int *__cdecl __p__commode(); 
#line 605 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vfprintf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vfprintf_s(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 622 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vfprintf_p(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_l(FILE *const 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 635 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 642 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf(FILE *const 
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_s_l(FILE *const 
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 663 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 670 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf_s(FILE *const 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 679 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 680 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p_l(FILE *const 
#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 697 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 703 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p(FILE *const 
#line 709 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 711 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 716 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 717 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_l(const char *const 
#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 725 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 730 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 731 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf(const char *const 
#line 737 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 738 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 744 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_s_l(const char *const 
#line 750 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 752 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 757 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 758 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 765 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf_s(const char *const 
#line 766 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p_l(const char *const 
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p(const char *const 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 802 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_l(FILE *const 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 810 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 818 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 821 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf(FILE *const 
#line 827 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 838 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 839 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _set_printf_count_output(int _Value); 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl _get_printf_count_output(); 
#line 850 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_s_l(FILE *const 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 852 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 859 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 864 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf_s(FILE *const 
#line 872 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 873 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 878 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p_l(FILE *const 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 893 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 894 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 905 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p(FILE *const 
#line 911 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_l(const char *const 
#line 929 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 930 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 942 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl printf(const char *const 
#line 947 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 955 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_s_l(const char *const 
#line 964 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 965 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl printf_s(const char *const 
#line 984 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 989 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 990 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 991 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 992 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 994 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 995 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 996 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p_l(const char *const 
#line 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1004 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1009 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1013 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 1014 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1015 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1016 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p(const char *const 
#line 1021 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1026 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1027 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 1031 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1032 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1033 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1042 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vfscanf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _Arglist); 
#line 1051 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_l(FILE *const 
#line 1052 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1053 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1054 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1055 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1060 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return __stdio_common_vfscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf(FILE *const 
#line 1069 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1070 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1071 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1077 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_s_l(FILE *const 
#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1084 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1085 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1091 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1092 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return __stdio_common_vfscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf_s(FILE *const 
#line 1103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1110 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_l(const char *const 
#line 1119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf(const char *const 
#line 1133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_s_l(const char *const 
#line 1146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf_s(const char *const 
#line 1162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_l(FILE *const 
#line 1177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 1189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf(FILE *const 
#line 1196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_s_l(FILE *const 
#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1222 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 1226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf_s(FILE *const 
#line 1235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1244 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_l(const char *const 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1267 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl scanf(const char *const 
#line 1273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1278 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1280 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1281 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1282 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1284 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_s_l(const char *const 
#line 1290 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1296 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1297 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1302 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl scanf_s(const char *const 
#line 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1321 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1335 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vsprintf(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1345 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vsprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vsnprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vsprintf_p(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1377 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_l(char *const 
#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1379 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1392 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1393 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf(char *const 
#line 1399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1401 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1402 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1407 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf(char *const 
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1430 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1442 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1443 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1448 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_l(char *const 
#line 1449 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1450 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1452 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1457 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#pragma warning(pop)
} 
#line 1467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf(char *const 
#line 1468 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1485 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_s_l(char *const 
#line 1486 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1487 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1488 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1489 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1500 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1501 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf_s(char *const 
#line 1509 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1511 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1518 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsprintf_s ( char ( & _Buffer ) [ _Size ], char const * _Format, va_list _ArgList ) throw ( ) { return vsprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1534 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p_l(char *const 
#line 1535 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1537 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1549 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1555 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p(char *const 
#line 1556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1558 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1564 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1571 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s_l(char *const 
#line 1572 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1575 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1576 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1582 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1583 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsnprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1587 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1593 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s(char *const 
#line 1594 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1597 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1604 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1605 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1608 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _vsnprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, va_list _ArgList ) throw ( ) { return _vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf_s(char *const 
#line 1622 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1623 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1624 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1625 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1626 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1632 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1636 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsnprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, va_list _ArgList ) throw ( ) { return vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_l(const char *const 
#line 1649 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1650 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1656 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1657 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1661 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf(const char *const 
#line 1667 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1674 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vscprintf_l(_Format, 0, _ArgList); 
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1679 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p_l(const char *const 
#line 1680 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1681 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1682 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1687 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1688 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1692 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1697 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p(const char *const 
#line 1698 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1699 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1704 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1705 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vscprintf_p_l(_Format, 0, _ArgList); 
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1710 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c_l(char *const 
#line 1711 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1713 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1714 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1715 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1720 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1725 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c(char *const 
#line 1732 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1734 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1735 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1741 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_l(char *const 
#line 1748 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1749 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1755 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1756 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1757 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1758 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1760 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1766 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1767 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1772 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char *const 
#line 1773 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1774 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1779 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1780 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1781 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1782 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1784 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 1789 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1791 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1794 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__inline int __cdecl sprintf(char * _Buffer, const char * _Format, ...); __inline int __cdecl vsprintf(char * _Buffer, const char * _Format, va_list _Args); 
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 1808 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_s_l(char *const 
#line 1809 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1810 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1811 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1812 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1818 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1820 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1821 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1822 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1823 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1824 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1831 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf_s(char *const 
#line 1832 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1833 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1839 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1840 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1841 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1842 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1843 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1844 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template < size_t _Size > inline int __cdecl sprintf_s ( char ( & _Buffer ) [ _Size ], char const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return vsprintf_s ( _Buffer, _Size, _Format, _ArgList ); }__pragma(warning(pop)) }
#line 1860 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p_l(char *const 
#line 1861 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1862 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1864 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1869 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1870 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1871 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1872 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1873 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1874 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1876 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1881 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p(char *const 
#line 1882 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1884 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1889 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1890 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1891 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1892 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 1893 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1894 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1895 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1896 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_l(char *const 
#line 1902 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1905 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1910 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1911 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1913 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 1915 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1920 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1921 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1922 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1938 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl snprintf(char *const 
#line 1939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1941 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1946 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1948 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1949 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress:28719)
_Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1952 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1953 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1954 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1959 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char *const 
#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1961 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1967 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 1969 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#pragma warning(suppress:28719)
_Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1973 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1974 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 1975 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 1978 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char * _Buffer, size_t _BufferCount, const char * _Format, ...); __inline int __cdecl _vsnprintf(char * _Buffer, size_t _BufferCount, const char * _Format, va_list _Args); 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c_l(char *const 
#line 1990 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1992 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1993 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 1999 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2001 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2002 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2003 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2004 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2005 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2010 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c(char *const 
#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2012 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2013 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2018 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2021 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2022 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2023 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2024 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2030 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s_l(char *const 
#line 2031 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2032 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2035 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2040 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2041 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2043 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2047 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2052 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s(char *const 
#line 2053 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2054 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 2055 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 2056 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2061 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2062 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2063 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2065 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2067 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2068 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template < size_t _Size > inline int __cdecl _snprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return _vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }__pragma(warning(pop)) }
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_l(const char *const 
#line 2081 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2082 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2088 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2090 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2091 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vscprintf_l(_Format, _Locale, _ArgList); 
#line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2093 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2094 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf(const char *const 
#line 2099 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vscprintf_l(_Format, 0, _ArgList); 
#line 2109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p_l(const char *const 
#line 2116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2117 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vscprintf_p_l(_Format, _Locale, _ArgList); 
#line 2127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p(const char *const 
#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vscprintf_p(_Format, _ArgList); 
#line 2144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vsscanf(unsigned __int64 _Options, const char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 2164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_l(const char *const 
#line 2165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 2173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf(const char *const 
#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 2184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 2189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_s_l(const char *const 
#line 2196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 2199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 2204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable:6530)
#line 2217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf_s(const char *const 
#line 2218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2219 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, va_list 
#line 2220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_ArgList) 
#line 2225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsscanf_s ( char const ( & _Buffer ) [ _Size ], char const * _Format, va_list _ArgList ) throw ( ) { return vsscanf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 2237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_l(const char *const 
#line 2243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2244 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf(const char *const 
#line 2262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2271 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2274 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2275 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_s_l(const char *const 
#line 2280 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2281 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2282 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2287 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2288 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2290 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2292 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2293 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf_s(const char *const 
#line 2301 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2302 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = vsscanf_s(_Buffer, _Format, _ArgList); 
#pragma warning(pop)
#line 2317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2318 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2324 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable:6530)
#line 2328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_l(const char *const 
#line 2329 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2330 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2337 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2340 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2342 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2346 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2348 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf(const char *const 
#line 2353 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2360 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2362 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s_l(const char *const 
#line 2377 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2378 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2379 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2385 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 2390 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2394 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2395 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2396 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s(const char *const 
#line 2401 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2402 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2403 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2408 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
{ 
#line 2409 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int _Result; 
#line 2410 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const char *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 2413 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
return _Result; 
#line 2419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
} 
#line 2422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
char *__cdecl tempnam(const char * _Directory, const char * _FilePrefix); 
#line 2454 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fcloseall(); 
#line 2455 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
FILE *__cdecl fdopen(int _FileHandle, const char * _Format); 
#line 2456 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fgetchar(); 
#line 2457 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fileno(FILE * _Stream); 
#line 2458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl flushall(); 
#line 2459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl fputchar(int _Ch); 
#line 2460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl getw(FILE * _Stream); 
#line 2461 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl putw(int _Ch, FILE * _Stream); 
#line 2462 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
int __cdecl rmtmp(); 
#line 2469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\stdio.h"
}__pragma(pack ( pop )) 
#line 55 "include/cu\\cuda.h"
typedef unsigned cuuint32_t; 
#line 56 "include/cu\\cuda.h"
typedef unsigned __int64 cuuint64_t; 
#line 240 "include/cu\\cuda.h"
extern "C" {
#line 250 "include/cu\\cuda.h"
typedef unsigned __int64 CUdeviceptr; 
#line 257 "include/cu\\cuda.h"
typedef int CUdevice; 
#line 258 "include/cu\\cuda.h"
typedef struct CUctx_st *CUcontext; 
#line 259 "include/cu\\cuda.h"
typedef struct CUmod_st *CUmodule; 
#line 260 "include/cu\\cuda.h"
typedef struct CUfunc_st *CUfunction; 
#line 261 "include/cu\\cuda.h"
typedef struct CUarray_st *CUarray; 
#line 262 "include/cu\\cuda.h"
typedef struct CUmipmappedArray_st *CUmipmappedArray; 
#line 263 "include/cu\\cuda.h"
typedef struct CUtexref_st *CUtexref; 
#line 264 "include/cu\\cuda.h"
typedef struct CUsurfref_st *CUsurfref; 
#line 265 "include/cu\\cuda.h"
typedef CUevent_st *CUevent; 
#line 266 "include/cu\\cuda.h"
typedef CUstream_st *CUstream; 
#line 267 "include/cu\\cuda.h"
typedef struct CUgraphicsResource_st *CUgraphicsResource; 
#line 268 "include/cu\\cuda.h"
typedef unsigned __int64 CUtexObject; 
#line 269 "include/cu\\cuda.h"
typedef unsigned __int64 CUsurfObject; 
#line 270 "include/cu\\cuda.h"
typedef struct CUextMemory_st *CUexternalMemory; 
#line 271 "include/cu\\cuda.h"
typedef struct CUextSemaphore_st *CUexternalSemaphore; 
#line 272 "include/cu\\cuda.h"
typedef CUgraph_st *CUgraph; 
#line 273 "include/cu\\cuda.h"
typedef CUgraphNode_st *CUgraphNode; 
#line 274 "include/cu\\cuda.h"
typedef CUgraphExec_st *CUgraphExec; 
#line 295 "include/cu\\cuda.h"
typedef 
#line 293 "include/cu\\cuda.h"
struct CUipcEventHandle_st { 
#line 294 "include/cu\\cuda.h"
char reserved[64]; 
#line 295 "include/cu\\cuda.h"
} CUipcEventHandle; 
#line 302 "include/cu\\cuda.h"
typedef 
#line 300 "include/cu\\cuda.h"
struct CUipcMemHandle_st { 
#line 301 "include/cu\\cuda.h"
char reserved[64]; 
#line 302 "include/cu\\cuda.h"
} CUipcMemHandle; 
#line 309 "include/cu\\cuda.h"
typedef 
#line 307 "include/cu\\cuda.h"
enum CUipcMem_flags_enum { 
#line 308 "include/cu\\cuda.h"
CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 1
#line 309 "include/cu\\cuda.h"
} CUipcMem_flags; 
#line 320 "include/cu\\cuda.h"
typedef 
#line 316 "include/cu\\cuda.h"
enum CUmemAttach_flags_enum { 
#line 317 "include/cu\\cuda.h"
CU_MEM_ATTACH_GLOBAL = 1, 
#line 318 "include/cu\\cuda.h"
CU_MEM_ATTACH_HOST, 
#line 319 "include/cu\\cuda.h"
CU_MEM_ATTACH_SINGLE = 4
#line 320 "include/cu\\cuda.h"
} CUmemAttach_flags; 
#line 337 "include/cu\\cuda.h"
typedef 
#line 325 "include/cu\\cuda.h"
enum CUctx_flags_enum { 
#line 326 "include/cu\\cuda.h"
CU_CTX_SCHED_AUTO, 
#line 327 "include/cu\\cuda.h"
CU_CTX_SCHED_SPIN, 
#line 328 "include/cu\\cuda.h"
CU_CTX_SCHED_YIELD, 
#line 329 "include/cu\\cuda.h"
CU_CTX_SCHED_BLOCKING_SYNC = 4, 
#line 330 "include/cu\\cuda.h"
CU_CTX_BLOCKING_SYNC = 4, 
#line 333 "include/cu\\cuda.h"
CU_CTX_SCHED_MASK = 7, 
#line 334 "include/cu\\cuda.h"
CU_CTX_MAP_HOST, 
#line 335 "include/cu\\cuda.h"
CU_CTX_LMEM_RESIZE_TO_MAX = 16, 
#line 336 "include/cu\\cuda.h"
CU_CTX_FLAGS_MASK = 31
#line 337 "include/cu\\cuda.h"
} CUctx_flags; 
#line 345 "include/cu\\cuda.h"
typedef 
#line 342 "include/cu\\cuda.h"
enum CUstream_flags_enum { 
#line 343 "include/cu\\cuda.h"
CU_STREAM_DEFAULT, 
#line 344 "include/cu\\cuda.h"
CU_STREAM_NON_BLOCKING
#line 345 "include/cu\\cuda.h"
} CUstream_flags; 
#line 375 "include/cu\\cuda.h"
typedef 
#line 370 "include/cu\\cuda.h"
enum CUevent_flags_enum { 
#line 371 "include/cu\\cuda.h"
CU_EVENT_DEFAULT, 
#line 372 "include/cu\\cuda.h"
CU_EVENT_BLOCKING_SYNC, 
#line 373 "include/cu\\cuda.h"
CU_EVENT_DISABLE_TIMING, 
#line 374 "include/cu\\cuda.h"
CU_EVENT_INTERPROCESS = 4
#line 375 "include/cu\\cuda.h"
} CUevent_flags; 
#line 399 "include/cu\\cuda.h"
typedef 
#line 381 "include/cu\\cuda.h"
enum CUstreamWaitValue_flags_enum { 
#line 382 "include/cu\\cuda.h"
CU_STREAM_WAIT_VALUE_GEQ, 
#line 385 "include/cu\\cuda.h"
CU_STREAM_WAIT_VALUE_EQ, 
#line 386 "include/cu\\cuda.h"
CU_STREAM_WAIT_VALUE_AND, 
#line 387 "include/cu\\cuda.h"
CU_STREAM_WAIT_VALUE_NOR, 
#line 390 "include/cu\\cuda.h"
CU_STREAM_WAIT_VALUE_FLUSH = 1073741824
#line 399 "include/cu\\cuda.h"
} CUstreamWaitValue_flags; 
#line 412 "include/cu\\cuda.h"
typedef 
#line 404 "include/cu\\cuda.h"
enum CUstreamWriteValue_flags_enum { 
#line 405 "include/cu\\cuda.h"
CU_STREAM_WRITE_VALUE_DEFAULT, 
#line 406 "include/cu\\cuda.h"
CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER
#line 412 "include/cu\\cuda.h"
} CUstreamWriteValue_flags; 
#line 424 "include/cu\\cuda.h"
typedef 
#line 417 "include/cu\\cuda.h"
enum CUstreamBatchMemOpType_enum { 
#line 418 "include/cu\\cuda.h"
CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1, 
#line 419 "include/cu\\cuda.h"
CU_STREAM_MEM_OP_WRITE_VALUE_32, 
#line 420 "include/cu\\cuda.h"
CU_STREAM_MEM_OP_WAIT_VALUE_64 = 4, 
#line 421 "include/cu\\cuda.h"
CU_STREAM_MEM_OP_WRITE_VALUE_64, 
#line 422 "include/cu\\cuda.h"
CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3
#line 424 "include/cu\\cuda.h"
} CUstreamBatchMemOpType; 
#line 456 "include/cu\\cuda.h"
typedef 
#line 429 "include/cu\\cuda.h"
union CUstreamBatchMemOpParams_union { 
#line 430 "include/cu\\cuda.h"
CUstreamBatchMemOpType operation; 
#line 431 "include/cu\\cuda.h"
struct CUstreamMemOpWaitValueParams_st { 
#line 432 "include/cu\\cuda.h"
CUstreamBatchMemOpType operation; 
#line 433 "include/cu\\cuda.h"
CUdeviceptr address; 
#line 434 "include/cu\\cuda.h"
union { 
#line 435 "include/cu\\cuda.h"
cuuint32_t value; 
#line 436 "include/cu\\cuda.h"
cuuint64_t value64; 
#line 437 "include/cu\\cuda.h"
}; 
#line 438 "include/cu\\cuda.h"
unsigned flags; 
#line 439 "include/cu\\cuda.h"
CUdeviceptr alias; 
#line 440 "include/cu\\cuda.h"
} waitValue; 
#line 441 "include/cu\\cuda.h"
struct CUstreamMemOpWriteValueParams_st { 
#line 442 "include/cu\\cuda.h"
CUstreamBatchMemOpType operation; 
#line 443 "include/cu\\cuda.h"
CUdeviceptr address; 
#line 444 "include/cu\\cuda.h"
union { 
#line 445 "include/cu\\cuda.h"
cuuint32_t value; 
#line 446 "include/cu\\cuda.h"
cuuint64_t value64; 
#line 447 "include/cu\\cuda.h"
}; 
#line 448 "include/cu\\cuda.h"
unsigned flags; 
#line 449 "include/cu\\cuda.h"
CUdeviceptr alias; 
#line 450 "include/cu\\cuda.h"
} writeValue; 
#line 451 "include/cu\\cuda.h"
struct CUstreamMemOpFlushRemoteWritesParams_st { 
#line 452 "include/cu\\cuda.h"
CUstreamBatchMemOpType operation; 
#line 453 "include/cu\\cuda.h"
unsigned flags; 
#line 454 "include/cu\\cuda.h"
} flushRemoteWrites; 
#line 455 "include/cu\\cuda.h"
cuuint64_t pad[6]; 
#line 456 "include/cu\\cuda.h"
} CUstreamBatchMemOpParams; 
#line 465 "include/cu\\cuda.h"
typedef 
#line 462 "include/cu\\cuda.h"
enum CUoccupancy_flags_enum { 
#line 463 "include/cu\\cuda.h"
CU_OCCUPANCY_DEFAULT, 
#line 464 "include/cu\\cuda.h"
CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE
#line 465 "include/cu\\cuda.h"
} CUoccupancy_flags; 
#line 479 "include/cu\\cuda.h"
typedef 
#line 470 "include/cu\\cuda.h"
enum CUarray_format_enum { 
#line 471 "include/cu\\cuda.h"
CU_AD_FORMAT_UNSIGNED_INT8 = 1, 
#line 472 "include/cu\\cuda.h"
CU_AD_FORMAT_UNSIGNED_INT16, 
#line 473 "include/cu\\cuda.h"
CU_AD_FORMAT_UNSIGNED_INT32, 
#line 474 "include/cu\\cuda.h"
CU_AD_FORMAT_SIGNED_INT8 = 8, 
#line 475 "include/cu\\cuda.h"
CU_AD_FORMAT_SIGNED_INT16, 
#line 476 "include/cu\\cuda.h"
CU_AD_FORMAT_SIGNED_INT32, 
#line 477 "include/cu\\cuda.h"
CU_AD_FORMAT_HALF = 16, 
#line 478 "include/cu\\cuda.h"
CU_AD_FORMAT_FLOAT = 32
#line 479 "include/cu\\cuda.h"
} CUarray_format; 
#line 489 "include/cu\\cuda.h"
typedef 
#line 484 "include/cu\\cuda.h"
enum CUaddress_mode_enum { 
#line 485 "include/cu\\cuda.h"
CU_TR_ADDRESS_MODE_WRAP, 
#line 486 "include/cu\\cuda.h"
CU_TR_ADDRESS_MODE_CLAMP, 
#line 487 "include/cu\\cuda.h"
CU_TR_ADDRESS_MODE_MIRROR, 
#line 488 "include/cu\\cuda.h"
CU_TR_ADDRESS_MODE_BORDER
#line 489 "include/cu\\cuda.h"
} CUaddress_mode; 
#line 497 "include/cu\\cuda.h"
typedef 
#line 494 "include/cu\\cuda.h"
enum CUfilter_mode_enum { 
#line 495 "include/cu\\cuda.h"
CU_TR_FILTER_MODE_POINT, 
#line 496 "include/cu\\cuda.h"
CU_TR_FILTER_MODE_LINEAR
#line 497 "include/cu\\cuda.h"
} CUfilter_mode; 
#line 614 "include/cu\\cuda.h"
typedef 
#line 502 "include/cu\\cuda.h"
enum CUdevice_attribute_enum { 
#line 503 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1, 
#line 504 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X, 
#line 505 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y, 
#line 506 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z, 
#line 507 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X, 
#line 508 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y, 
#line 509 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z, 
#line 510 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK, 
#line 511 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8, 
#line 512 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY, 
#line 513 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_WARP_SIZE, 
#line 514 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_PITCH, 
#line 515 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK, 
#line 516 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12, 
#line 517 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_CLOCK_RATE, 
#line 518 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT, 
#line 519 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP, 
#line 520 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT, 
#line 521 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, 
#line 522 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_INTEGRATED, 
#line 523 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY, 
#line 524 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, 
#line 525 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH, 
#line 526 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH, 
#line 527 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT, 
#line 528 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH, 
#line 529 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT, 
#line 530 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH, 
#line 531 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH, 
#line 532 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT, 
#line 533 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS, 
#line 534 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27, 
#line 535 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT, 
#line 536 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES, 
#line 537 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT, 
#line 538 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS, 
#line 539 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_ECC_ENABLED, 
#line 540 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_PCI_BUS_ID, 
#line 541 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID, 
#line 542 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_TCC_DRIVER, 
#line 543 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, 
#line 544 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH, 
#line 545 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE, 
#line 546 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR, 
#line 547 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT, 
#line 548 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING, 
#line 549 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH, 
#line 550 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS, 
#line 551 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER, 
#line 552 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH, 
#line 553 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT, 
#line 554 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE, 
#line 555 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE, 
#line 556 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE, 
#line 557 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID, 
#line 558 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT, 
#line 559 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH, 
#line 560 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH, 
#line 561 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS, 
#line 562 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH, 
#line 563 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH, 
#line 564 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT, 
#line 565 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH, 
#line 566 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT, 
#line 567 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH, 
#line 568 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH, 
#line 569 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS, 
#line 570 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH, 
#line 571 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT, 
#line 572 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS, 
#line 573 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH, 
#line 574 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH, 
#line 575 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS, 
#line 576 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH, 
#line 577 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH, 
#line 578 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT, 
#line 579 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH, 
#line 580 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH, 
#line 581 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT, 
#line 582 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR, 
#line 583 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR, 
#line 584 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH, 
#line 585 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED, 
#line 586 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED, 
#line 587 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED, 
#line 588 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR, 
#line 589 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR, 
#line 590 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY, 
#line 591 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD, 
#line 592 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID, 
#line 593 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED, 
#line 594 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO, 
#line 595 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS, 
#line 596 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS, 
#line 597 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED, 
#line 598 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM, 
#line 599 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS, 
#line 600 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS, 
#line 601 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR, 
#line 602 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH, 
#line 603 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH, 
#line 604 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN, 
#line 605 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES, 
#line 606 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED, 
#line 607 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES, 
#line 608 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST, 
#line 609 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED, 
#line 610 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED, 
#line 611 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_HANDLE_SUPPORTED, 
#line 612 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED, 
#line 613 "include/cu\\cuda.h"
CU_DEVICE_ATTRIBUTE_MAX
#line 614 "include/cu\\cuda.h"
} CUdevice_attribute; 
#line 630 "include/cu\\cuda.h"
typedef 
#line 619 "include/cu\\cuda.h"
struct CUdevprop_st { 
#line 620 "include/cu\\cuda.h"
int maxThreadsPerBlock; 
#line 621 "include/cu\\cuda.h"
int maxThreadsDim[3]; 
#line 622 "include/cu\\cuda.h"
int maxGridSize[3]; 
#line 623 "include/cu\\cuda.h"
int sharedMemPerBlock; 
#line 624 "include/cu\\cuda.h"
int totalConstantMemory; 
#line 625 "include/cu\\cuda.h"
int SIMDWidth; 
#line 626 "include/cu\\cuda.h"
int memPitch; 
#line 627 "include/cu\\cuda.h"
int regsPerBlock; 
#line 628 "include/cu\\cuda.h"
int clockRate; 
#line 629 "include/cu\\cuda.h"
int textureAlign; 
#line 630 "include/cu\\cuda.h"
} CUdevprop; 
#line 650 "include/cu\\cuda.h"
typedef 
#line 635 "include/cu\\cuda.h"
enum CUpointer_attribute_enum { 
#line 636 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_CONTEXT = 1, 
#line 637 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_MEMORY_TYPE, 
#line 638 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_DEVICE_POINTER, 
#line 639 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_HOST_POINTER, 
#line 640 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_P2P_TOKENS, 
#line 641 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_SYNC_MEMOPS, 
#line 642 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_BUFFER_ID, 
#line 643 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_IS_MANAGED, 
#line 644 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL, 
#line 645 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE, 
#line 646 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_RANGE_START_ADDR, 
#line 647 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_RANGE_SIZE, 
#line 648 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_MAPPED, 
#line 649 "include/cu\\cuda.h"
CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES
#line 650 "include/cu\\cuda.h"
} CUpointer_attribute; 
#line 728 "include/cu\\cuda.h"
typedef 
#line 655 "include/cu\\cuda.h"
enum CUfunction_attribute_enum { 
#line 661 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, 
#line 668 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, 
#line 674 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, 
#line 679 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, 
#line 684 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_NUM_REGS, 
#line 693 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_PTX_VERSION, 
#line 702 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_BINARY_VERSION, 
#line 708 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, 
#line 716 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, 
#line 725 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT, 
#line 727 "include/cu\\cuda.h"
CU_FUNC_ATTRIBUTE_MAX
#line 728 "include/cu\\cuda.h"
} CUfunction_attribute; 
#line 738 "include/cu\\cuda.h"
typedef 
#line 733 "include/cu\\cuda.h"
enum CUfunc_cache_enum { 
#line 734 "include/cu\\cuda.h"
CU_FUNC_CACHE_PREFER_NONE, 
#line 735 "include/cu\\cuda.h"
CU_FUNC_CACHE_PREFER_SHARED, 
#line 736 "include/cu\\cuda.h"
CU_FUNC_CACHE_PREFER_L1, 
#line 737 "include/cu\\cuda.h"
CU_FUNC_CACHE_PREFER_EQUAL
#line 738 "include/cu\\cuda.h"
} CUfunc_cache; 
#line 747 "include/cu\\cuda.h"
typedef 
#line 743 "include/cu\\cuda.h"
enum CUsharedconfig_enum { 
#line 744 "include/cu\\cuda.h"
CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE, 
#line 745 "include/cu\\cuda.h"
CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE, 
#line 746 "include/cu\\cuda.h"
CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE
#line 747 "include/cu\\cuda.h"
} CUsharedconfig; 
#line 756 "include/cu\\cuda.h"
typedef 
#line 752 "include/cu\\cuda.h"
enum CUshared_carveout_enum { 
#line 753 "include/cu\\cuda.h"
CU_SHAREDMEM_CARVEOUT_DEFAULT = (-1), 
#line 754 "include/cu\\cuda.h"
CU_SHAREDMEM_CARVEOUT_MAX_SHARED = 100, 
#line 755 "include/cu\\cuda.h"
CU_SHAREDMEM_CARVEOUT_MAX_L1 = 0
#line 756 "include/cu\\cuda.h"
} CUshared_carveout; 
#line 766 "include/cu\\cuda.h"
typedef 
#line 761 "include/cu\\cuda.h"
enum CUmemorytype_enum { 
#line 762 "include/cu\\cuda.h"
CU_MEMORYTYPE_HOST = 1, 
#line 763 "include/cu\\cuda.h"
CU_MEMORYTYPE_DEVICE, 
#line 764 "include/cu\\cuda.h"
CU_MEMORYTYPE_ARRAY, 
#line 765 "include/cu\\cuda.h"
CU_MEMORYTYPE_UNIFIED
#line 766 "include/cu\\cuda.h"
} CUmemorytype; 
#line 775 "include/cu\\cuda.h"
typedef 
#line 771 "include/cu\\cuda.h"
enum CUcomputemode_enum { 
#line 772 "include/cu\\cuda.h"
CU_COMPUTEMODE_DEFAULT, 
#line 773 "include/cu\\cuda.h"
CU_COMPUTEMODE_PROHIBITED = 2, 
#line 774 "include/cu\\cuda.h"
CU_COMPUTEMODE_EXCLUSIVE_PROCESS
#line 775 "include/cu\\cuda.h"
} CUcomputemode; 
#line 787 "include/cu\\cuda.h"
typedef 
#line 780 "include/cu\\cuda.h"
enum CUmem_advise_enum { 
#line 781 "include/cu\\cuda.h"
CU_MEM_ADVISE_SET_READ_MOSTLY = 1, 
#line 782 "include/cu\\cuda.h"
CU_MEM_ADVISE_UNSET_READ_MOSTLY, 
#line 783 "include/cu\\cuda.h"
CU_MEM_ADVISE_SET_PREFERRED_LOCATION, 
#line 784 "include/cu\\cuda.h"
CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION, 
#line 785 "include/cu\\cuda.h"
CU_MEM_ADVISE_SET_ACCESSED_BY, 
#line 786 "include/cu\\cuda.h"
CU_MEM_ADVISE_UNSET_ACCESSED_BY
#line 787 "include/cu\\cuda.h"
} CUmem_advise; 
#line 794 "include/cu\\cuda.h"
typedef 
#line 789 "include/cu\\cuda.h"
enum CUmem_range_attribute_enum { 
#line 790 "include/cu\\cuda.h"
CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1, 
#line 791 "include/cu\\cuda.h"
CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION, 
#line 792 "include/cu\\cuda.h"
CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY, 
#line 793 "include/cu\\cuda.h"
CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION
#line 794 "include/cu\\cuda.h"
} CUmem_range_attribute; 
#line 969 "include/cu\\cuda.h"
typedef 
#line 799 "include/cu\\cuda.h"
enum CUjit_option_enum { 
#line 806 "include/cu\\cuda.h"
CU_JIT_MAX_REGISTERS, 
#line 821 "include/cu\\cuda.h"
CU_JIT_THREADS_PER_BLOCK, 
#line 829 "include/cu\\cuda.h"
CU_JIT_WALL_TIME, 
#line 838 "include/cu\\cuda.h"
CU_JIT_INFO_LOG_BUFFER, 
#line 847 "include/cu\\cuda.h"
CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES, 
#line 856 "include/cu\\cuda.h"
CU_JIT_ERROR_LOG_BUFFER, 
#line 865 "include/cu\\cuda.h"
CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES, 
#line 873 "include/cu\\cuda.h"
CU_JIT_OPTIMIZATION_LEVEL, 
#line 881 "include/cu\\cuda.h"
CU_JIT_TARGET_FROM_CUCONTEXT, 
#line 889 "include/cu\\cuda.h"
CU_JIT_TARGET, 
#line 898 "include/cu\\cuda.h"
CU_JIT_FALLBACK_STRATEGY, 
#line 906 "include/cu\\cuda.h"
CU_JIT_GENERATE_DEBUG_INFO, 
#line 913 "include/cu\\cuda.h"
CU_JIT_LOG_VERBOSE, 
#line 920 "include/cu\\cuda.h"
CU_JIT_GENERATE_LINE_INFO, 
#line 928 "include/cu\\cuda.h"
CU_JIT_CACHE_MODE, 
#line 933 "include/cu\\cuda.h"
CU_JIT_NEW_SM3X_OPT, 
#line 934 "include/cu\\cuda.h"
CU_JIT_FAST_COMPILE, 
#line 948 "include/cu\\cuda.h"
CU_JIT_GLOBAL_SYMBOL_NAMES, 
#line 957 "include/cu\\cuda.h"
CU_JIT_GLOBAL_SYMBOL_ADDRESSES, 
#line 965 "include/cu\\cuda.h"
CU_JIT_GLOBAL_SYMBOL_COUNT, 
#line 967 "include/cu\\cuda.h"
CU_JIT_NUM_OPTIONS
#line 969 "include/cu\\cuda.h"
} CUjit_option; 
#line 991 "include/cu\\cuda.h"
typedef 
#line 974 "include/cu\\cuda.h"
enum CUjit_target_enum { 
#line 976 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_20 = 20, 
#line 977 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_21, 
#line 978 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_30 = 30, 
#line 979 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_32 = 32, 
#line 980 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_35 = 35, 
#line 981 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_37 = 37, 
#line 982 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_50 = 50, 
#line 983 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_52 = 52, 
#line 984 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_53, 
#line 985 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_60 = 60, 
#line 986 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_61, 
#line 987 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_62, 
#line 988 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_70 = 70, 
#line 989 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_72 = 72, 
#line 990 "include/cu\\cuda.h"
CU_TARGET_COMPUTE_75 = 75
#line 991 "include/cu\\cuda.h"
} CUjit_target; 
#line 1002 "include/cu\\cuda.h"
typedef 
#line 996 "include/cu\\cuda.h"
enum CUjit_fallback_enum { 
#line 998 "include/cu\\cuda.h"
CU_PREFER_PTX, 
#line 1000 "include/cu\\cuda.h"
CU_PREFER_BINARY
#line 1002 "include/cu\\cuda.h"
} CUjit_fallback; 
#line 1012 "include/cu\\cuda.h"
typedef 
#line 1007 "include/cu\\cuda.h"
enum CUjit_cacheMode_enum { 
#line 1009 "include/cu\\cuda.h"
CU_JIT_CACHE_OPTION_NONE, 
#line 1010 "include/cu\\cuda.h"
CU_JIT_CACHE_OPTION_CG, 
#line 1011 "include/cu\\cuda.h"
CU_JIT_CACHE_OPTION_CA
#line 1012 "include/cu\\cuda.h"
} CUjit_cacheMode; 
#line 1050 "include/cu\\cuda.h"
typedef 
#line 1017 "include/cu\\cuda.h"
enum CUjitInputType_enum { 
#line 1023 "include/cu\\cuda.h"
CU_JIT_INPUT_CUBIN, 
#line 1029 "include/cu\\cuda.h"
CU_JIT_INPUT_PTX, 
#line 1035 "include/cu\\cuda.h"
CU_JIT_INPUT_FATBINARY, 
#line 1041 "include/cu\\cuda.h"
CU_JIT_INPUT_OBJECT, 
#line 1047 "include/cu\\cuda.h"
CU_JIT_INPUT_LIBRARY, 
#line 1049 "include/cu\\cuda.h"
CU_JIT_NUM_INPUT_TYPES
#line 1050 "include/cu\\cuda.h"
} CUjitInputType; 
#line 1053 "include/cu\\cuda.h"
typedef struct CUlinkState_st *CUlinkState; 
#line 1065 "include/cu\\cuda.h"
typedef 
#line 1059 "include/cu\\cuda.h"
enum CUgraphicsRegisterFlags_enum { 
#line 1060 "include/cu\\cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_NONE, 
#line 1061 "include/cu\\cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY, 
#line 1062 "include/cu\\cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD, 
#line 1063 "include/cu\\cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 4, 
#line 1064 "include/cu\\cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 8
#line 1065 "include/cu\\cuda.h"
} CUgraphicsRegisterFlags; 
#line 1074 "include/cu\\cuda.h"
typedef 
#line 1070 "include/cu\\cuda.h"
enum CUgraphicsMapResourceFlags_enum { 
#line 1071 "include/cu\\cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE, 
#line 1072 "include/cu\\cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY, 
#line 1073 "include/cu\\cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD
#line 1074 "include/cu\\cuda.h"
} CUgraphicsMapResourceFlags; 
#line 1086 "include/cu\\cuda.h"
typedef 
#line 1079 "include/cu\\cuda.h"
enum CUarray_cubemap_face_enum { 
#line 1080 "include/cu\\cuda.h"
CU_CUBEMAP_FACE_POSITIVE_X, 
#line 1081 "include/cu\\cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_X, 
#line 1082 "include/cu\\cuda.h"
CU_CUBEMAP_FACE_POSITIVE_Y, 
#line 1083 "include/cu\\cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_Y, 
#line 1084 "include/cu\\cuda.h"
CU_CUBEMAP_FACE_POSITIVE_Z, 
#line 1085 "include/cu\\cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_Z
#line 1086 "include/cu\\cuda.h"
} CUarray_cubemap_face; 
#line 1099 "include/cu\\cuda.h"
typedef 
#line 1091 "include/cu\\cuda.h"
enum CUlimit_enum { 
#line 1092 "include/cu\\cuda.h"
CU_LIMIT_STACK_SIZE, 
#line 1093 "include/cu\\cuda.h"
CU_LIMIT_PRINTF_FIFO_SIZE, 
#line 1094 "include/cu\\cuda.h"
CU_LIMIT_MALLOC_HEAP_SIZE, 
#line 1095 "include/cu\\cuda.h"
CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH, 
#line 1096 "include/cu\\cuda.h"
CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT, 
#line 1097 "include/cu\\cuda.h"
CU_LIMIT_MAX_L2_FETCH_GRANULARITY, 
#line 1098 "include/cu\\cuda.h"
CU_LIMIT_MAX
#line 1099 "include/cu\\cuda.h"
} CUlimit; 
#line 1109 "include/cu\\cuda.h"
typedef 
#line 1104 "include/cu\\cuda.h"
enum CUresourcetype_enum { 
#line 1105 "include/cu\\cuda.h"
CU_RESOURCE_TYPE_ARRAY, 
#line 1106 "include/cu\\cuda.h"
CU_RESOURCE_TYPE_MIPMAPPED_ARRAY, 
#line 1107 "include/cu\\cuda.h"
CU_RESOURCE_TYPE_LINEAR, 
#line 1108 "include/cu\\cuda.h"
CU_RESOURCE_TYPE_PITCH2D
#line 1109 "include/cu\\cuda.h"
} CUresourcetype; 
#line 1123 "include/cu\\cuda.h"
typedef void (__stdcall *CUhostFn)(void * userData); 
#line 1139 "include/cu\\cuda.h"
typedef 
#line 1128 "include/cu\\cuda.h"
struct CUDA_KERNEL_NODE_PARAMS_st { 
#line 1129 "include/cu\\cuda.h"
CUfunction func; 
#line 1130 "include/cu\\cuda.h"
unsigned gridDimX; 
#line 1131 "include/cu\\cuda.h"
unsigned gridDimY; 
#line 1132 "include/cu\\cuda.h"
unsigned gridDimZ; 
#line 1133 "include/cu\\cuda.h"
unsigned blockDimX; 
#line 1134 "include/cu\\cuda.h"
unsigned blockDimY; 
#line 1135 "include/cu\\cuda.h"
unsigned blockDimZ; 
#line 1136 "include/cu\\cuda.h"
unsigned sharedMemBytes; 
#line 1137 "include/cu\\cuda.h"
void **kernelParams; 
#line 1138 "include/cu\\cuda.h"
void **extra; 
#line 1139 "include/cu\\cuda.h"
} CUDA_KERNEL_NODE_PARAMS; 
#line 1151 "include/cu\\cuda.h"
typedef 
#line 1144 "include/cu\\cuda.h"
struct CUDA_MEMSET_NODE_PARAMS_st { 
#line 1145 "include/cu\\cuda.h"
CUdeviceptr dst; 
#line 1146 "include/cu\\cuda.h"
size_t pitch; 
#line 1147 "include/cu\\cuda.h"
unsigned value; 
#line 1148 "include/cu\\cuda.h"
unsigned elementSize; 
#line 1149 "include/cu\\cuda.h"
size_t width; 
#line 1150 "include/cu\\cuda.h"
size_t height; 
#line 1151 "include/cu\\cuda.h"
} CUDA_MEMSET_NODE_PARAMS; 
#line 1159 "include/cu\\cuda.h"
typedef 
#line 1156 "include/cu\\cuda.h"
struct CUDA_HOST_NODE_PARAMS_st { 
#line 1157 "include/cu\\cuda.h"
CUhostFn fn; 
#line 1158 "include/cu\\cuda.h"
void *userData; 
#line 1159 "include/cu\\cuda.h"
} CUDA_HOST_NODE_PARAMS; 
#line 1172 "include/cu\\cuda.h"
typedef 
#line 1164 "include/cu\\cuda.h"
enum CUgraphNodeType_enum { 
#line 1165 "include/cu\\cuda.h"
CU_GRAPH_NODE_TYPE_KERNEL, 
#line 1166 "include/cu\\cuda.h"
CU_GRAPH_NODE_TYPE_MEMCPY, 
#line 1167 "include/cu\\cuda.h"
CU_GRAPH_NODE_TYPE_MEMSET, 
#line 1168 "include/cu\\cuda.h"
CU_GRAPH_NODE_TYPE_HOST, 
#line 1169 "include/cu\\cuda.h"
CU_GRAPH_NODE_TYPE_GRAPH, 
#line 1170 "include/cu\\cuda.h"
CU_GRAPH_NODE_TYPE_EMPTY, 
#line 1171 "include/cu\\cuda.h"
CU_GRAPH_NODE_TYPE_COUNT
#line 1172 "include/cu\\cuda.h"
} CUgraphNodeType; 
#line 1182 "include/cu\\cuda.h"
typedef 
#line 1177 "include/cu\\cuda.h"
enum CUstreamCaptureStatus_enum { 
#line 1178 "include/cu\\cuda.h"
CU_STREAM_CAPTURE_STATUS_NONE, 
#line 1179 "include/cu\\cuda.h"
CU_STREAM_CAPTURE_STATUS_ACTIVE, 
#line 1180 "include/cu\\cuda.h"
CU_STREAM_CAPTURE_STATUS_INVALIDATED
#line 1182 "include/cu\\cuda.h"
} CUstreamCaptureStatus; 
#line 1196 "include/cu\\cuda.h"
typedef 
#line 1192 "include/cu\\cuda.h"
enum CUstreamCaptureMode_enum { 
#line 1193 "include/cu\\cuda.h"
CU_STREAM_CAPTURE_MODE_GLOBAL, 
#line 1194 "include/cu\\cuda.h"
CU_STREAM_CAPTURE_MODE_THREAD_LOCAL, 
#line 1195 "include/cu\\cuda.h"
CU_STREAM_CAPTURE_MODE_RELAXED
#line 1196 "include/cu\\cuda.h"
} CUstreamCaptureMode; 
#line 1710 "include/cu\\cuda.h"
typedef 
#line 1203 "include/cu\\cuda.h"
enum cudaError_enum { 
#line 1209 "include/cu\\cuda.h"
CUDA_SUCCESS, 
#line 1215 "include/cu\\cuda.h"
CUDA_ERROR_INVALID_VALUE, 
#line 1221 "include/cu\\cuda.h"
CUDA_ERROR_OUT_OF_MEMORY, 
#line 1227 "include/cu\\cuda.h"
CUDA_ERROR_NOT_INITIALIZED, 
#line 1232 "include/cu\\cuda.h"
CUDA_ERROR_DEINITIALIZED, 
#line 1239 "include/cu\\cuda.h"
CUDA_ERROR_PROFILER_DISABLED, 
#line 1247 "include/cu\\cuda.h"
CUDA_ERROR_PROFILER_NOT_INITIALIZED, 
#line 1254 "include/cu\\cuda.h"
CUDA_ERROR_PROFILER_ALREADY_STARTED, 
#line 1261 "include/cu\\cuda.h"
CUDA_ERROR_PROFILER_ALREADY_STOPPED, 
#line 1267 "include/cu\\cuda.h"
CUDA_ERROR_NO_DEVICE = 100, 
#line 1273 "include/cu\\cuda.h"
CUDA_ERROR_INVALID_DEVICE, 
#line 1280 "include/cu\\cuda.h"
CUDA_ERROR_INVALID_IMAGE = 200, 
#line 1290 "include/cu\\cuda.h"
CUDA_ERROR_INVALID_CONTEXT, 
#line 1299 "include/cu\\cuda.h"
CUDA_ERROR_CONTEXT_ALREADY_CURRENT, 
#line 1304 "include/cu\\cuda.h"
CUDA_ERROR_MAP_FAILED = 205, 
#line 1309 "include/cu\\cuda.h"
CUDA_ERROR_UNMAP_FAILED, 
#line 1315 "include/cu\\cuda.h"
CUDA_ERROR_ARRAY_IS_MAPPED, 
#line 1320 "include/cu\\cuda.h"
CUDA_ERROR_ALREADY_MAPPED, 
#line 1328 "include/cu\\cuda.h"
CUDA_ERROR_NO_BINARY_FOR_GPU, 
#line 1333 "include/cu\\cuda.h"
CUDA_ERROR_ALREADY_ACQUIRED, 
#line 1338 "include/cu\\cuda.h"
CUDA_ERROR_NOT_MAPPED, 
#line 1344 "include/cu\\cuda.h"
CUDA_ERROR_NOT_MAPPED_AS_ARRAY, 
#line 1350 "include/cu\\cuda.h"
CUDA_ERROR_NOT_MAPPED_AS_POINTER, 
#line 1356 "include/cu\\cuda.h"
CUDA_ERROR_ECC_UNCORRECTABLE, 
#line 1362 "include/cu\\cuda.h"
CUDA_ERROR_UNSUPPORTED_LIMIT, 
#line 1369 "include/cu\\cuda.h"
CUDA_ERROR_CONTEXT_ALREADY_IN_USE, 
#line 1375 "include/cu\\cuda.h"
CUDA_ERROR_PEER_ACCESS_UNSUPPORTED, 
#line 1380 "include/cu\\cuda.h"
CUDA_ERROR_INVALID_PTX, 
#line 1385 "include/cu\\cuda.h"
CUDA_ERROR_INVALID_GRAPHICS_CONTEXT, 
#line 1391 "include/cu\\cuda.h"
CUDA_ERROR_NVLINK_UNCORRECTABLE, 
#line 1396 "include/cu\\cuda.h"
CUDA_ERROR_JIT_COMPILER_NOT_FOUND, 
#line 1401 "include/cu\\cuda.h"
CUDA_ERROR_INVALID_SOURCE = 300, 
#line 1406 "include/cu\\cuda.h"
CUDA_ERROR_FILE_NOT_FOUND, 
#line 1411 "include/cu\\cuda.h"
CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, 
#line 1416 "include/cu\\cuda.h"
CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, 
#line 1421 "include/cu\\cuda.h"
CUDA_ERROR_OPERATING_SYSTEM, 
#line 1427 "include/cu\\cuda.h"
CUDA_ERROR_INVALID_HANDLE = 400, 
#line 1433 "include/cu\\cuda.h"
CUDA_ERROR_ILLEGAL_STATE, 
#line 1439 "include/cu\\cuda.h"
CUDA_ERROR_NOT_FOUND = 500, 
#line 1447 "include/cu\\cuda.h"
CUDA_ERROR_NOT_READY = 600, 
#line 1456 "include/cu\\cuda.h"
CUDA_ERROR_ILLEGAL_ADDRESS = 700, 
#line 1467 "include/cu\\cuda.h"
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, 
#line 1477 "include/cu\\cuda.h"
CUDA_ERROR_LAUNCH_TIMEOUT, 
#line 1483 "include/cu\\cuda.h"
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, 
#line 1490 "include/cu\\cuda.h"
CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED, 
#line 1497 "include/cu\\cuda.h"
CUDA_ERROR_PEER_ACCESS_NOT_ENABLED, 
#line 1503 "include/cu\\cuda.h"
CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708, 
#line 1510 "include/cu\\cuda.h"
CUDA_ERROR_CONTEXT_IS_DESTROYED, 
#line 1518 "include/cu\\cuda.h"
CUDA_ERROR_ASSERT, 
#line 1525 "include/cu\\cuda.h"
CUDA_ERROR_TOO_MANY_PEERS, 
#line 1531 "include/cu\\cuda.h"
CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED, 
#line 1537 "include/cu\\cuda.h"
CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED, 
#line 1546 "include/cu\\cuda.h"
CUDA_ERROR_HARDWARE_STACK_ERROR, 
#line 1554 "include/cu\\cuda.h"
CUDA_ERROR_ILLEGAL_INSTRUCTION, 
#line 1563 "include/cu\\cuda.h"
CUDA_ERROR_MISALIGNED_ADDRESS, 
#line 1574 "include/cu\\cuda.h"
CUDA_ERROR_INVALID_ADDRESS_SPACE, 
#line 1582 "include/cu\\cuda.h"
CUDA_ERROR_INVALID_PC, 
#line 1593 "include/cu\\cuda.h"
CUDA_ERROR_LAUNCH_FAILED, 
#line 1602 "include/cu\\cuda.h"
CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE, 
#line 1607 "include/cu\\cuda.h"
CUDA_ERROR_NOT_PERMITTED = 800, 
#line 1613 "include/cu\\cuda.h"
CUDA_ERROR_NOT_SUPPORTED, 
#line 1622 "include/cu\\cuda.h"
CUDA_ERROR_SYSTEM_NOT_READY, 
#line 1629 "include/cu\\cuda.h"
CUDA_ERROR_SYSTEM_DRIVER_MISMATCH, 
#line 1638 "include/cu\\cuda.h"
CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE, 
#line 1644 "include/cu\\cuda.h"
CUDA_ERROR_STREAM_CAPTURE_UNSUPPORTED = 900, 
#line 1650 "include/cu\\cuda.h"
CUDA_ERROR_STREAM_CAPTURE_INVALIDATED, 
#line 1656 "include/cu\\cuda.h"
CUDA_ERROR_STREAM_CAPTURE_MERGE, 
#line 1661 "include/cu\\cuda.h"
CUDA_ERROR_STREAM_CAPTURE_UNMATCHED, 
#line 1667 "include/cu\\cuda.h"
CUDA_ERROR_STREAM_CAPTURE_UNJOINED, 
#line 1674 "include/cu\\cuda.h"
CUDA_ERROR_STREAM_CAPTURE_ISOLATION, 
#line 1680 "include/cu\\cuda.h"
CUDA_ERROR_STREAM_CAPTURE_IMPLICIT, 
#line 1686 "include/cu\\cuda.h"
CUDA_ERROR_CAPTURED_EVENT, 
#line 1693 "include/cu\\cuda.h"
CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD, 
#line 1698 "include/cu\\cuda.h"
CUDA_ERROR_TIMEOUT, 
#line 1704 "include/cu\\cuda.h"
CUDA_ERROR_GRAPH_EXEC_UPDATE_FAILURE, 
#line 1709 "include/cu\\cuda.h"
CUDA_ERROR_UNKNOWN = 999
#line 1710 "include/cu\\cuda.h"
} CUresult; 
#line 1721 "include/cu\\cuda.h"
typedef 
#line 1715 "include/cu\\cuda.h"
enum CUdevice_P2PAttribute_enum { 
#line 1716 "include/cu\\cuda.h"
CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 1, 
#line 1717 "include/cu\\cuda.h"
CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED, 
#line 1718 "include/cu\\cuda.h"
CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED, 
#line 1719 "include/cu\\cuda.h"
CU_DEVICE_P2P_ATTRIBUTE_ACCESS_ACCESS_SUPPORTED, 
#line 1720 "include/cu\\cuda.h"
CU_DEVICE_P2P_ATTRIBUTE_CUDA_ARRAY_ACCESS_SUPPORTED = 4
#line 1721 "include/cu\\cuda.h"
} CUdevice_P2PAttribute; 
#line 1729 "include/cu\\cuda.h"
typedef void (__stdcall *CUstreamCallback)(CUstream hStream, CUresult status, void * userData); 
#line 1737 "include/cu\\cuda.h"
typedef size_t (__stdcall *CUoccupancyB2DSize)(int blockSize); 
#line 1813 "include/cu\\cuda.h"
typedef 
#line 1792 "include/cu\\cuda.h"
struct CUDA_MEMCPY2D_st { 
#line 1793 "include/cu\\cuda.h"
size_t srcXInBytes; 
#line 1794 "include/cu\\cuda.h"
size_t srcY; 
#line 1796 "include/cu\\cuda.h"
CUmemorytype srcMemoryType; 
#line 1797 "include/cu\\cuda.h"
const void *srcHost; 
#line 1798 "include/cu\\cuda.h"
CUdeviceptr srcDevice; 
#line 1799 "include/cu\\cuda.h"
CUarray srcArray; 
#line 1800 "include/cu\\cuda.h"
size_t srcPitch; 
#line 1802 "include/cu\\cuda.h"
size_t dstXInBytes; 
#line 1803 "include/cu\\cuda.h"
size_t dstY; 
#line 1805 "include/cu\\cuda.h"
CUmemorytype dstMemoryType; 
#line 1806 "include/cu\\cuda.h"
void *dstHost; 
#line 1807 "include/cu\\cuda.h"
CUdeviceptr dstDevice; 
#line 1808 "include/cu\\cuda.h"
CUarray dstArray; 
#line 1809 "include/cu\\cuda.h"
size_t dstPitch; 
#line 1811 "include/cu\\cuda.h"
size_t WidthInBytes; 
#line 1812 "include/cu\\cuda.h"
size_t Height; 
#line 1813 "include/cu\\cuda.h"
} CUDA_MEMCPY2D; 
#line 1846 "include/cu\\cuda.h"
typedef 
#line 1818 "include/cu\\cuda.h"
struct CUDA_MEMCPY3D_st { 
#line 1819 "include/cu\\cuda.h"
size_t srcXInBytes; 
#line 1820 "include/cu\\cuda.h"
size_t srcY; 
#line 1821 "include/cu\\cuda.h"
size_t srcZ; 
#line 1822 "include/cu\\cuda.h"
size_t srcLOD; 
#line 1823 "include/cu\\cuda.h"
CUmemorytype srcMemoryType; 
#line 1824 "include/cu\\cuda.h"
const void *srcHost; 
#line 1825 "include/cu\\cuda.h"
CUdeviceptr srcDevice; 
#line 1826 "include/cu\\cuda.h"
CUarray srcArray; 
#line 1827 "include/cu\\cuda.h"
void *reserved0; 
#line 1828 "include/cu\\cuda.h"
size_t srcPitch; 
#line 1829 "include/cu\\cuda.h"
size_t srcHeight; 
#line 1831 "include/cu\\cuda.h"
size_t dstXInBytes; 
#line 1832 "include/cu\\cuda.h"
size_t dstY; 
#line 1833 "include/cu\\cuda.h"
size_t dstZ; 
#line 1834 "include/cu\\cuda.h"
size_t dstLOD; 
#line 1835 "include/cu\\cuda.h"
CUmemorytype dstMemoryType; 
#line 1836 "include/cu\\cuda.h"
void *dstHost; 
#line 1837 "include/cu\\cuda.h"
CUdeviceptr dstDevice; 
#line 1838 "include/cu\\cuda.h"
CUarray dstArray; 
#line 1839 "include/cu\\cuda.h"
void *reserved1; 
#line 1840 "include/cu\\cuda.h"
size_t dstPitch; 
#line 1841 "include/cu\\cuda.h"
size_t dstHeight; 
#line 1843 "include/cu\\cuda.h"
size_t WidthInBytes; 
#line 1844 "include/cu\\cuda.h"
size_t Height; 
#line 1845 "include/cu\\cuda.h"
size_t Depth; 
#line 1846 "include/cu\\cuda.h"
} CUDA_MEMCPY3D; 
#line 1879 "include/cu\\cuda.h"
typedef 
#line 1851 "include/cu\\cuda.h"
struct CUDA_MEMCPY3D_PEER_st { 
#line 1852 "include/cu\\cuda.h"
size_t srcXInBytes; 
#line 1853 "include/cu\\cuda.h"
size_t srcY; 
#line 1854 "include/cu\\cuda.h"
size_t srcZ; 
#line 1855 "include/cu\\cuda.h"
size_t srcLOD; 
#line 1856 "include/cu\\cuda.h"
CUmemorytype srcMemoryType; 
#line 1857 "include/cu\\cuda.h"
const void *srcHost; 
#line 1858 "include/cu\\cuda.h"
CUdeviceptr srcDevice; 
#line 1859 "include/cu\\cuda.h"
CUarray srcArray; 
#line 1860 "include/cu\\cuda.h"
CUcontext srcContext; 
#line 1861 "include/cu\\cuda.h"
size_t srcPitch; 
#line 1862 "include/cu\\cuda.h"
size_t srcHeight; 
#line 1864 "include/cu\\cuda.h"
size_t dstXInBytes; 
#line 1865 "include/cu\\cuda.h"
size_t dstY; 
#line 1866 "include/cu\\cuda.h"
size_t dstZ; 
#line 1867 "include/cu\\cuda.h"
size_t dstLOD; 
#line 1868 "include/cu\\cuda.h"
CUmemorytype dstMemoryType; 
#line 1869 "include/cu\\cuda.h"
void *dstHost; 
#line 1870 "include/cu\\cuda.h"
CUdeviceptr dstDevice; 
#line 1871 "include/cu\\cuda.h"
CUarray dstArray; 
#line 1872 "include/cu\\cuda.h"
CUcontext dstContext; 
#line 1873 "include/cu\\cuda.h"
size_t dstPitch; 
#line 1874 "include/cu\\cuda.h"
size_t dstHeight; 
#line 1876 "include/cu\\cuda.h"
size_t WidthInBytes; 
#line 1877 "include/cu\\cuda.h"
size_t Height; 
#line 1878 "include/cu\\cuda.h"
size_t Depth; 
#line 1879 "include/cu\\cuda.h"
} CUDA_MEMCPY3D_PEER; 
#line 1891 "include/cu\\cuda.h"
typedef 
#line 1884 "include/cu\\cuda.h"
struct CUDA_ARRAY_DESCRIPTOR_st { 
#line 1886 "include/cu\\cuda.h"
size_t Width; 
#line 1887 "include/cu\\cuda.h"
size_t Height; 
#line 1889 "include/cu\\cuda.h"
CUarray_format Format; 
#line 1890 "include/cu\\cuda.h"
unsigned NumChannels; 
#line 1891 "include/cu\\cuda.h"
} CUDA_ARRAY_DESCRIPTOR; 
#line 1905 "include/cu\\cuda.h"
typedef 
#line 1896 "include/cu\\cuda.h"
struct CUDA_ARRAY3D_DESCRIPTOR_st { 
#line 1898 "include/cu\\cuda.h"
size_t Width; 
#line 1899 "include/cu\\cuda.h"
size_t Height; 
#line 1900 "include/cu\\cuda.h"
size_t Depth; 
#line 1902 "include/cu\\cuda.h"
CUarray_format Format; 
#line 1903 "include/cu\\cuda.h"
unsigned NumChannels; 
#line 1904 "include/cu\\cuda.h"
unsigned Flags; 
#line 1905 "include/cu\\cuda.h"
} CUDA_ARRAY3D_DESCRIPTOR; 
#line 1945 "include/cu\\cuda.h"
typedef 
#line 1914 "include/cu\\cuda.h"
struct CUDA_RESOURCE_DESC_st { 
#line 1916 "include/cu\\cuda.h"
CUresourcetype resType; 
#line 1918 "include/cu\\cuda.h"
union { 
#line 1919 "include/cu\\cuda.h"
struct { 
#line 1920 "include/cu\\cuda.h"
CUarray hArray; 
#line 1921 "include/cu\\cuda.h"
} array; 
#line 1922 "include/cu\\cuda.h"
struct { 
#line 1923 "include/cu\\cuda.h"
CUmipmappedArray hMipmappedArray; 
#line 1924 "include/cu\\cuda.h"
} mipmap; 
#line 1925 "include/cu\\cuda.h"
struct { 
#line 1926 "include/cu\\cuda.h"
CUdeviceptr devPtr; 
#line 1927 "include/cu\\cuda.h"
CUarray_format format; 
#line 1928 "include/cu\\cuda.h"
unsigned numChannels; 
#line 1929 "include/cu\\cuda.h"
size_t sizeInBytes; 
#line 1930 "include/cu\\cuda.h"
} linear; 
#line 1931 "include/cu\\cuda.h"
struct { 
#line 1932 "include/cu\\cuda.h"
CUdeviceptr devPtr; 
#line 1933 "include/cu\\cuda.h"
CUarray_format format; 
#line 1934 "include/cu\\cuda.h"
unsigned numChannels; 
#line 1935 "include/cu\\cuda.h"
size_t width; 
#line 1936 "include/cu\\cuda.h"
size_t height; 
#line 1937 "include/cu\\cuda.h"
size_t pitchInBytes; 
#line 1938 "include/cu\\cuda.h"
} pitch2D; 
#line 1939 "include/cu\\cuda.h"
struct { 
#line 1940 "include/cu\\cuda.h"
int reserved[32]; 
#line 1941 "include/cu\\cuda.h"
} reserved; 
#line 1942 "include/cu\\cuda.h"
} res; 
#line 1944 "include/cu\\cuda.h"
unsigned flags; 
#line 1945 "include/cu\\cuda.h"
} CUDA_RESOURCE_DESC; 
#line 1961 "include/cu\\cuda.h"
typedef 
#line 1950 "include/cu\\cuda.h"
struct CUDA_TEXTURE_DESC_st { 
#line 1951 "include/cu\\cuda.h"
CUaddress_mode addressMode[3]; 
#line 1952 "include/cu\\cuda.h"
CUfilter_mode filterMode; 
#line 1953 "include/cu\\cuda.h"
unsigned flags; 
#line 1954 "include/cu\\cuda.h"
unsigned maxAnisotropy; 
#line 1955 "include/cu\\cuda.h"
CUfilter_mode mipmapFilterMode; 
#line 1956 "include/cu\\cuda.h"
float mipmapLevelBias; 
#line 1957 "include/cu\\cuda.h"
float minMipmapLevelClamp; 
#line 1958 "include/cu\\cuda.h"
float maxMipmapLevelClamp; 
#line 1959 "include/cu\\cuda.h"
float borderColor[4]; 
#line 1960 "include/cu\\cuda.h"
int reserved[12]; 
#line 1961 "include/cu\\cuda.h"
} CUDA_TEXTURE_DESC; 
#line 2003 "include/cu\\cuda.h"
typedef 
#line 1966 "include/cu\\cuda.h"
enum CUresourceViewFormat_enum { 
#line 1968 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_NONE, 
#line 1969 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UINT_1X8, 
#line 1970 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UINT_2X8, 
#line 1971 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UINT_4X8, 
#line 1972 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SINT_1X8, 
#line 1973 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SINT_2X8, 
#line 1974 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SINT_4X8, 
#line 1975 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UINT_1X16, 
#line 1976 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UINT_2X16, 
#line 1977 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UINT_4X16, 
#line 1978 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SINT_1X16, 
#line 1979 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SINT_2X16, 
#line 1980 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SINT_4X16, 
#line 1981 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UINT_1X32, 
#line 1982 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UINT_2X32, 
#line 1983 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UINT_4X32, 
#line 1984 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SINT_1X32, 
#line 1985 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SINT_2X32, 
#line 1986 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SINT_4X32, 
#line 1987 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_1X16, 
#line 1988 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_2X16, 
#line 1989 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_4X16, 
#line 1990 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_1X32, 
#line 1991 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_2X32, 
#line 1992 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_FLOAT_4X32, 
#line 1993 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC1, 
#line 1994 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC2, 
#line 1995 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC3, 
#line 1996 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC4, 
#line 1997 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SIGNED_BC4, 
#line 1998 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC5, 
#line 1999 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SIGNED_BC5, 
#line 2000 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC6H, 
#line 2001 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_SIGNED_BC6H, 
#line 2002 "include/cu\\cuda.h"
CU_RES_VIEW_FORMAT_UNSIGNED_BC7
#line 2003 "include/cu\\cuda.h"
} CUresourceViewFormat; 
#line 2019 "include/cu\\cuda.h"
typedef 
#line 2008 "include/cu\\cuda.h"
struct CUDA_RESOURCE_VIEW_DESC_st { 
#line 2010 "include/cu\\cuda.h"
CUresourceViewFormat format; 
#line 2011 "include/cu\\cuda.h"
size_t width; 
#line 2012 "include/cu\\cuda.h"
size_t height; 
#line 2013 "include/cu\\cuda.h"
size_t depth; 
#line 2014 "include/cu\\cuda.h"
unsigned firstMipmapLevel; 
#line 2015 "include/cu\\cuda.h"
unsigned lastMipmapLevel; 
#line 2016 "include/cu\\cuda.h"
unsigned firstLayer; 
#line 2017 "include/cu\\cuda.h"
unsigned lastLayer; 
#line 2018 "include/cu\\cuda.h"
unsigned reserved[16]; 
#line 2019 "include/cu\\cuda.h"
} CUDA_RESOURCE_VIEW_DESC; 
#line 2027 "include/cu\\cuda.h"
typedef 
#line 2024 "include/cu\\cuda.h"
struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st { 
#line 2025 "include/cu\\cuda.h"
unsigned __int64 p2pToken; 
#line 2026 "include/cu\\cuda.h"
unsigned vaSpaceToken; 
#line 2027 "include/cu\\cuda.h"
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS; 
#line 2047 "include/cu\\cuda.h"
typedef 
#line 2036 "include/cu\\cuda.h"
struct CUDA_LAUNCH_PARAMS_st { 
#line 2037 "include/cu\\cuda.h"
CUfunction function; 
#line 2038 "include/cu\\cuda.h"
unsigned gridDimX; 
#line 2039 "include/cu\\cuda.h"
unsigned gridDimY; 
#line 2040 "include/cu\\cuda.h"
unsigned gridDimZ; 
#line 2041 "include/cu\\cuda.h"
unsigned blockDimX; 
#line 2042 "include/cu\\cuda.h"
unsigned blockDimY; 
#line 2043 "include/cu\\cuda.h"
unsigned blockDimZ; 
#line 2044 "include/cu\\cuda.h"
unsigned sharedMemBytes; 
#line 2045 "include/cu\\cuda.h"
CUstream hStream; 
#line 2046 "include/cu\\cuda.h"
void **kernelParams; 
#line 2047 "include/cu\\cuda.h"
} CUDA_LAUNCH_PARAMS; 
#line 2089 "include/cu\\cuda.h"
typedef 
#line 2056 "include/cu\\cuda.h"
enum CUexternalMemoryHandleType_enum { 
#line 2060 "include/cu\\cuda.h"
CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD = 1, 
#line 2064 "include/cu\\cuda.h"
CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32, 
#line 2068 "include/cu\\cuda.h"
CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT, 
#line 2072 "include/cu\\cuda.h"
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP, 
#line 2076 "include/cu\\cuda.h"
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE, 
#line 2080 "include/cu\\cuda.h"
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE, 
#line 2084 "include/cu\\cuda.h"
CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT, 
#line 2088 "include/cu\\cuda.h"
CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF
#line 2089 "include/cu\\cuda.h"
} CUexternalMemoryHandleType; 
#line 2183 "include/cu\\cuda.h"
typedef 
#line 2130 "include/cu\\cuda.h"
struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st { 
#line 2134 "include/cu\\cuda.h"
CUexternalMemoryHandleType type; 
#line 2135 "include/cu\\cuda.h"
union { 
#line 2141 "include/cu\\cuda.h"
int fd; 
#line 2157 "include/cu\\cuda.h"
struct { 
#line 2161 "include/cu\\cuda.h"
void *handle; 
#line 2166 "include/cu\\cuda.h"
const void *name; 
#line 2167 "include/cu\\cuda.h"
} win32; 
#line 2172 "include/cu\\cuda.h"
const void *nvSciBufObject; 
#line 2173 "include/cu\\cuda.h"
} handle; 
#line 2177 "include/cu\\cuda.h"
unsigned __int64 size; 
#line 2181 "include/cu\\cuda.h"
unsigned flags; 
#line 2182 "include/cu\\cuda.h"
unsigned reserved[16]; 
#line 2183 "include/cu\\cuda.h"
} CUDA_EXTERNAL_MEMORY_HANDLE_DESC; 
#line 2202 "include/cu\\cuda.h"
typedef 
#line 2188 "include/cu\\cuda.h"
struct CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st { 
#line 2192 "include/cu\\cuda.h"
unsigned __int64 offset; 
#line 2196 "include/cu\\cuda.h"
unsigned __int64 size; 
#line 2200 "include/cu\\cuda.h"
unsigned flags; 
#line 2201 "include/cu\\cuda.h"
unsigned reserved[16]; 
#line 2202 "include/cu\\cuda.h"
} CUDA_EXTERNAL_MEMORY_BUFFER_DESC; 
#line 2222 "include/cu\\cuda.h"
typedef 
#line 2207 "include/cu\\cuda.h"
struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st { 
#line 2212 "include/cu\\cuda.h"
unsigned __int64 offset; 
#line 2216 "include/cu\\cuda.h"
CUDA_ARRAY3D_DESCRIPTOR arrayDesc; 
#line 2220 "include/cu\\cuda.h"
unsigned numLevels; 
#line 2221 "include/cu\\cuda.h"
unsigned reserved[16]; 
#line 2222 "include/cu\\cuda.h"
} CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC; 
#line 2260 "include/cu\\cuda.h"
typedef 
#line 2227 "include/cu\\cuda.h"
enum CUexternalSemaphoreHandleType_enum { 
#line 2231 "include/cu\\cuda.h"
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD = 1, 
#line 2235 "include/cu\\cuda.h"
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32, 
#line 2239 "include/cu\\cuda.h"
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT, 
#line 2243 "include/cu\\cuda.h"
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE, 
#line 2247 "include/cu\\cuda.h"
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE, 
#line 2251 "include/cu\\cuda.h"
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC, 
#line 2255 "include/cu\\cuda.h"
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX, 
#line 2259 "include/cu\\cuda.h"
CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT
#line 2260 "include/cu\\cuda.h"
} CUexternalSemaphoreHandleType; 
#line 2312 "include/cu\\cuda.h"
typedef 
#line 2265 "include/cu\\cuda.h"
struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st { 
#line 2269 "include/cu\\cuda.h"
CUexternalSemaphoreHandleType type; 
#line 2270 "include/cu\\cuda.h"
union { 
#line 2276 "include/cu\\cuda.h"
int fd; 
#line 2291 "include/cu\\cuda.h"
struct { 
#line 2295 "include/cu\\cuda.h"
void *handle; 
#line 2300 "include/cu\\cuda.h"
const void *name; 
#line 2301 "include/cu\\cuda.h"
} win32; 
#line 2305 "include/cu\\cuda.h"
const void *nvSciSyncObj; 
#line 2306 "include/cu\\cuda.h"
} handle; 
#line 2310 "include/cu\\cuda.h"
unsigned flags; 
#line 2311 "include/cu\\cuda.h"
unsigned reserved[16]; 
#line 2312 "include/cu\\cuda.h"
} CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC; 
#line 2359 "include/cu\\cuda.h"
typedef 
#line 2317 "include/cu\\cuda.h"
struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st { 
#line 2318 "include/cu\\cuda.h"
struct { 
#line 2322 "include/cu\\cuda.h"
struct { 
#line 2326 "include/cu\\cuda.h"
unsigned __int64 value; 
#line 2327 "include/cu\\cuda.h"
} fence; 
#line 2328 "include/cu\\cuda.h"
union { 
#line 2333 "include/cu\\cuda.h"
void *fence; 
#line 2334 "include/cu\\cuda.h"
unsigned __int64 reserved; 
#line 2335 "include/cu\\cuda.h"
} nvSciSync; 
#line 2339 "include/cu\\cuda.h"
struct { 
#line 2343 "include/cu\\cuda.h"
unsigned __int64 key; 
#line 2344 "include/cu\\cuda.h"
} keyedMutex; 
#line 2345 "include/cu\\cuda.h"
unsigned reserved[12]; 
#line 2346 "include/cu\\cuda.h"
} params; 
#line 2357 "include/cu\\cuda.h"
unsigned flags; 
#line 2358 "include/cu\\cuda.h"
unsigned reserved[16]; 
#line 2359 "include/cu\\cuda.h"
} CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS; 
#line 2409 "include/cu\\cuda.h"
typedef 
#line 2364 "include/cu\\cuda.h"
struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st { 
#line 2365 "include/cu\\cuda.h"
struct { 
#line 2369 "include/cu\\cuda.h"
struct { 
#line 2373 "include/cu\\cuda.h"
unsigned __int64 value; 
#line 2374 "include/cu\\cuda.h"
} fence; 
#line 2379 "include/cu\\cuda.h"
union { 
#line 2380 "include/cu\\cuda.h"
void *fence; 
#line 2381 "include/cu\\cuda.h"
unsigned __int64 reserved; 
#line 2382 "include/cu\\cuda.h"
} nvSciSync; 
#line 2386 "include/cu\\cuda.h"
struct { 
#line 2390 "include/cu\\cuda.h"
unsigned __int64 key; 
#line 2394 "include/cu\\cuda.h"
unsigned timeoutMs; 
#line 2395 "include/cu\\cuda.h"
} keyedMutex; 
#line 2396 "include/cu\\cuda.h"
unsigned reserved[10]; 
#line 2397 "include/cu\\cuda.h"
} params; 
#line 2407 "include/cu\\cuda.h"
unsigned flags; 
#line 2408 "include/cu\\cuda.h"
unsigned reserved[16]; 
#line 2409 "include/cu\\cuda.h"
} CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS; 
#line 2416 "include/cu\\cuda.h"
typedef unsigned __int64 CUmemGenericAllocationHandle; 
#line 2426 "include/cu\\cuda.h"
typedef 
#line 2421 "include/cu\\cuda.h"
enum CUmemAllocationHandleType_enum { 
#line 2422 "include/cu\\cuda.h"
CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR = 1, 
#line 2423 "include/cu\\cuda.h"
CU_MEM_HANDLE_TYPE_WIN32, 
#line 2424 "include/cu\\cuda.h"
CU_MEM_HANDLE_TYPE_WIN32_KMT = 4, 
#line 2425 "include/cu\\cuda.h"
CU_MEM_HANDLE_TYPE_MAX = (-1)
#line 2426 "include/cu\\cuda.h"
} CUmemAllocationHandleType; 
#line 2436 "include/cu\\cuda.h"
typedef 
#line 2431 "include/cu\\cuda.h"
enum CUmemAccess_flags_enum { 
#line 2432 "include/cu\\cuda.h"
CU_MEM_ACCESS_FLAGS_PROT_NONE, 
#line 2433 "include/cu\\cuda.h"
CU_MEM_ACCESS_FLAGS_PROT_READ, 
#line 2434 "include/cu\\cuda.h"
CU_MEM_ACCESS_FLAGS_PROT_READWRITE = 3, 
#line 2435 "include/cu\\cuda.h"
CU_MEM_ACCESS_FLAGS_PROT_MAX = (-1)
#line 2436 "include/cu\\cuda.h"
} CUmemAccess_flags; 
#line 2445 "include/cu\\cuda.h"
typedef 
#line 2441 "include/cu\\cuda.h"
enum CUmemLocationType_enum { 
#line 2442 "include/cu\\cuda.h"
CU_MEM_LOCATION_TYPE_INVALID, 
#line 2443 "include/cu\\cuda.h"
CU_MEM_LOCATION_TYPE_DEVICE, 
#line 2444 "include/cu\\cuda.h"
CU_MEM_LOCATION_TYPE_MAX = (-1)
#line 2445 "include/cu\\cuda.h"
} CUmemLocationType; 
#line 2458 "include/cu\\cuda.h"
typedef 
#line 2450 "include/cu\\cuda.h"
enum CUmemAllocationType_enum { 
#line 2451 "include/cu\\cuda.h"
CU_MEM_ALLOCATION_TYPE_INVALID, 
#line 2456 "include/cu\\cuda.h"
CU_MEM_ALLOCATION_TYPE_PINNED, 
#line 2457 "include/cu\\cuda.h"
CU_MEM_ALLOCATION_TYPE_MAX = (-1)
#line 2458 "include/cu\\cuda.h"
} CUmemAllocationType; 
#line 2466 "include/cu\\cuda.h"
typedef 
#line 2463 "include/cu\\cuda.h"
enum CUmemAllocationGranularity_flags_enum { 
#line 2464 "include/cu\\cuda.h"
CU_MEM_ALLOC_GRANULARITY_MINIMUM, 
#line 2465 "include/cu\\cuda.h"
CU_MEM_ALLOC_GRANULARITY_RECOMMENDED
#line 2466 "include/cu\\cuda.h"
} CUmemAllocationGranularity_flags; 
#line 2474 "include/cu\\cuda.h"
typedef 
#line 2471 "include/cu\\cuda.h"
struct CUmemLocation_st { 
#line 2472 "include/cu\\cuda.h"
CUmemLocationType type; 
#line 2473 "include/cu\\cuda.h"
int id; 
#line 2474 "include/cu\\cuda.h"
} CUmemLocation; 
#line 2495 "include/cu\\cuda.h"
typedef 
#line 2479 "include/cu\\cuda.h"
struct CUmemAllocationProp_st { 
#line 2481 "include/cu\\cuda.h"
CUmemAllocationType type; 
#line 2483 "include/cu\\cuda.h"
CUmemAllocationHandleType requestedHandleTypes; 
#line 2485 "include/cu\\cuda.h"
CUmemLocation location; 
#line 2492 "include/cu\\cuda.h"
void *win32HandleMetaData; 
#line 2494 "include/cu\\cuda.h"
unsigned __int64 reserved; 
#line 2495 "include/cu\\cuda.h"
} CUmemAllocationProp; 
#line 2503 "include/cu\\cuda.h"
typedef 
#line 2500 "include/cu\\cuda.h"
struct CUmemAccessDesc_st { 
#line 2501 "include/cu\\cuda.h"
CUmemLocation location; 
#line 2502 "include/cu\\cuda.h"
CUmemAccess_flags flags; 
#line 2503 "include/cu\\cuda.h"
} CUmemAccessDesc; 
#line 2513 "include/cu\\cuda.h"
typedef 
#line 2505 "include/cu\\cuda.h"
enum CUgraphExecUpdateResult_enum { 
#line 2506 "include/cu\\cuda.h"
CU_GRAPH_EXEC_UPDATE_SUCCESS, 
#line 2507 "include/cu\\cuda.h"
CU_GRAPH_EXEC_UPDATE_ERROR, 
#line 2508 "include/cu\\cuda.h"
CU_GRAPH_EXEC_UPDATE_ERROR_TOPOLOGY_CHANGED, 
#line 2509 "include/cu\\cuda.h"
CU_GRAPH_EXEC_UPDATE_ERROR_NODE_TYPE_CHANGED, 
#line 2510 "include/cu\\cuda.h"
CU_GRAPH_EXEC_UPDATE_ERROR_FUNCTION_CHANGED, 
#line 2511 "include/cu\\cuda.h"
CU_GRAPH_EXEC_UPDATE_ERROR_PARAMETERS_CHANGED, 
#line 2512 "include/cu\\cuda.h"
CU_GRAPH_EXEC_UPDATE_ERROR_NOT_SUPPORTED
#line 2513 "include/cu\\cuda.h"
} CUgraphExecUpdateResult; 
#line 2682 "include/cu\\cuda.h"
CUresult __stdcall cuGetErrorString(CUresult error, const char ** pStr); 
#line 2703 "include/cu\\cuda.h"
CUresult __stdcall cuGetErrorName(CUresult error, const char ** pStr); 
#line 2737 "include/cu\\cuda.h"
CUresult __stdcall cuInit(unsigned Flags); 
#line 2775 "include/cu\\cuda.h"
CUresult __stdcall cuDriverGetVersion(int * driverVersion); 
#line 2817 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceGet(CUdevice * device, int ordinal); 
#line 2845 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceGetCount(int * count); 
#line 2876 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceGetName(char * name, int len, CUdevice dev); 
#line 2905 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceGetUuid(CUuuid * uuid, CUdevice dev); 
#line 2935 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceGetLuid(char * luid, unsigned * deviceNodeMask, CUdevice dev); 
#line 2965 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceTotalMem_v2(size_t * bytes, CUdevice dev); 
#line 3174 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceGetAttribute(int * pi, CUdevice_attribute attrib, CUdevice dev); 
#line 3223 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, CUdevice dev, int flags); 
#line 3301 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuDeviceGetProperties(CUdevprop * prop, CUdevice dev); 
#line 3335 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuDeviceComputeCapability(int * major, int * minor, CUdevice dev); 
#line 3403 "include/cu\\cuda.h"
CUresult __stdcall cuDevicePrimaryCtxRetain(CUcontext * pctx, CUdevice dev); 
#line 3437 "include/cu\\cuda.h"
CUresult __stdcall cuDevicePrimaryCtxRelease(CUdevice dev); 
#line 3502 "include/cu\\cuda.h"
CUresult __stdcall cuDevicePrimaryCtxSetFlags(CUdevice dev, unsigned flags); 
#line 3528 "include/cu\\cuda.h"
CUresult __stdcall cuDevicePrimaryCtxGetState(CUdevice dev, unsigned * flags, int * active); 
#line 3566 "include/cu\\cuda.h"
CUresult __stdcall cuDevicePrimaryCtxReset(CUdevice dev); 
#line 3678 "include/cu\\cuda.h"
CUresult __stdcall cuCtxCreate_v2(CUcontext * pctx, unsigned flags, CUdevice dev); 
#line 3718 "include/cu\\cuda.h"
CUresult __stdcall cuCtxDestroy_v2(CUcontext ctx); 
#line 3754 "include/cu\\cuda.h"
CUresult __stdcall cuCtxPushCurrent_v2(CUcontext ctx); 
#line 3788 "include/cu\\cuda.h"
CUresult __stdcall cuCtxPopCurrent_v2(CUcontext * pctx); 
#line 3818 "include/cu\\cuda.h"
CUresult __stdcall cuCtxSetCurrent(CUcontext ctx); 
#line 3841 "include/cu\\cuda.h"
CUresult __stdcall cuCtxGetCurrent(CUcontext * pctx); 
#line 3872 "include/cu\\cuda.h"
CUresult __stdcall cuCtxGetDevice(CUdevice * device); 
#line 3901 "include/cu\\cuda.h"
CUresult __stdcall cuCtxGetFlags(unsigned * flags); 
#line 3932 "include/cu\\cuda.h"
CUresult __stdcall cuCtxSynchronize(); 
#line 4024 "include/cu\\cuda.h"
CUresult __stdcall cuCtxSetLimit(CUlimit limit, size_t value); 
#line 4065 "include/cu\\cuda.h"
CUresult __stdcall cuCtxGetLimit(size_t * pvalue, CUlimit limit); 
#line 4109 "include/cu\\cuda.h"
CUresult __stdcall cuCtxGetCacheConfig(CUfunc_cache * pconfig); 
#line 4160 "include/cu\\cuda.h"
CUresult __stdcall cuCtxSetCacheConfig(CUfunc_cache config); 
#line 4203 "include/cu\\cuda.h"
CUresult __stdcall cuCtxGetSharedMemConfig(CUsharedconfig * pConfig); 
#line 4256 "include/cu\\cuda.h"
CUresult __stdcall cuCtxSetSharedMemConfig(CUsharedconfig config); 
#line 4295 "include/cu\\cuda.h"
CUresult __stdcall cuCtxGetApiVersion(CUcontext ctx, unsigned * version); 
#line 4335 "include/cu\\cuda.h"
CUresult __stdcall cuCtxGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
#line 4390 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuCtxAttach(CUcontext * pctx, unsigned flags); 
#line 4426 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuCtxDetach(CUcontext ctx); 
#line 4481 "include/cu\\cuda.h"
CUresult __stdcall cuModuleLoad(CUmodule * module, const char * fname); 
#line 4518 "include/cu\\cuda.h"
CUresult __stdcall cuModuleLoadData(CUmodule * module, const void * image); 
#line 4561 "include/cu\\cuda.h"
CUresult __stdcall cuModuleLoadDataEx(CUmodule * module, const void * image, unsigned numOptions, CUjit_option * options, void ** optionValues); 
#line 4603 "include/cu\\cuda.h"
CUresult __stdcall cuModuleLoadFatBinary(CUmodule * module, const void * fatCubin); 
#line 4628 "include/cu\\cuda.h"
CUresult __stdcall cuModuleUnload(CUmodule hmod); 
#line 4658 "include/cu\\cuda.h"
CUresult __stdcall cuModuleGetFunction(CUfunction * hfunc, CUmodule hmod, const char * name); 
#line 4694 "include/cu\\cuda.h"
CUresult __stdcall cuModuleGetGlobal_v2(CUdeviceptr * dptr, size_t * bytes, CUmodule hmod, const char * name); 
#line 4729 "include/cu\\cuda.h"
CUresult __stdcall cuModuleGetTexRef(CUtexref * pTexRef, CUmodule hmod, const char * name); 
#line 4761 "include/cu\\cuda.h"
CUresult __stdcall cuModuleGetSurfRef(CUsurfref * pSurfRef, CUmodule hmod, const char * name); 
#line 4804 "include/cu\\cuda.h"
CUresult __stdcall cuLinkCreate_v2(unsigned numOptions, CUjit_option * options, void ** optionValues, CUlinkState * stateOut); 
#line 4841 "include/cu\\cuda.h"
CUresult __stdcall cuLinkAddData_v2(CUlinkState state, CUjitInputType type, void * data, size_t size, const char * name, unsigned numOptions, CUjit_option * options, void ** optionValues); 
#line 4880 "include/cu\\cuda.h"
CUresult __stdcall cuLinkAddFile_v2(CUlinkState state, CUjitInputType type, const char * path, unsigned numOptions, CUjit_option * options, void ** optionValues); 
#line 4907 "include/cu\\cuda.h"
CUresult __stdcall cuLinkComplete(CUlinkState state, void ** cubinOut, size_t * sizeOut); 
#line 4921 "include/cu\\cuda.h"
CUresult __stdcall cuLinkDestroy(CUlinkState state); 
#line 4970 "include/cu\\cuda.h"
CUresult __stdcall cuMemGetInfo_v2(size_t * free, size_t * total); 
#line 5004 "include/cu\\cuda.h"
CUresult __stdcall cuMemAlloc_v2(CUdeviceptr * dptr, size_t bytesize); 
#line 5066 "include/cu\\cuda.h"
CUresult __stdcall cuMemAllocPitch_v2(CUdeviceptr * dptr, size_t * pPitch, size_t WidthInBytes, size_t Height, unsigned ElementSizeBytes); 
#line 5096 "include/cu\\cuda.h"
CUresult __stdcall cuMemFree_v2(CUdeviceptr dptr); 
#line 5130 "include/cu\\cuda.h"
CUresult __stdcall cuMemGetAddressRange_v2(CUdeviceptr * pbase, size_t * psize, CUdeviceptr dptr); 
#line 5177 "include/cu\\cuda.h"
CUresult __stdcall cuMemAllocHost_v2(void ** pp, size_t bytesize); 
#line 5208 "include/cu\\cuda.h"
CUresult __stdcall cuMemFreeHost(void * p); 
#line 5290 "include/cu\\cuda.h"
CUresult __stdcall cuMemHostAlloc(void ** pp, size_t bytesize, unsigned Flags); 
#line 5344 "include/cu\\cuda.h"
CUresult __stdcall cuMemHostGetDevicePointer_v2(CUdeviceptr * pdptr, void * p, unsigned Flags); 
#line 5372 "include/cu\\cuda.h"
CUresult __stdcall cuMemHostGetFlags(unsigned * pFlags, void * p); 
#line 5484 "include/cu\\cuda.h"
CUresult __stdcall cuMemAllocManaged(CUdeviceptr * dptr, size_t bytesize, unsigned flags); 
#line 5517 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceGetByPCIBusId(CUdevice * dev, const char * pciBusId); 
#line 5549 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceGetPCIBusId(char * pciBusId, int len, CUdevice dev); 
#line 5594 "include/cu\\cuda.h"
CUresult __stdcall cuIpcGetEventHandle(CUipcEventHandle * pHandle, CUevent event); 
#line 5634 "include/cu\\cuda.h"
CUresult __stdcall cuIpcOpenEventHandle(CUevent * phEvent, CUipcEventHandle handle); 
#line 5674 "include/cu\\cuda.h"
CUresult __stdcall cuIpcGetMemHandle(CUipcMemHandle * pHandle, CUdeviceptr dptr); 
#line 5731 "include/cu\\cuda.h"
CUresult __stdcall cuIpcOpenMemHandle(CUdeviceptr * pdptr, CUipcMemHandle handle, unsigned Flags); 
#line 5764 "include/cu\\cuda.h"
CUresult __stdcall cuIpcCloseMemHandle(CUdeviceptr dptr); 
#line 5850 "include/cu\\cuda.h"
CUresult __stdcall cuMemHostRegister_v2(void * p, size_t bytesize, unsigned Flags); 
#line 5876 "include/cu\\cuda.h"
CUresult __stdcall cuMemHostUnregister(void * p); 
#line 5915 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount); 
#line 5945 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount); 
#line 5983 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void * srcHost, size_t ByteCount); 
#line 6018 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyDtoH_v2(void * dstHost, CUdeviceptr srcDevice, size_t ByteCount); 
#line 6054 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount); 
#line 6090 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyDtoA_v2(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount); 
#line 6128 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount); 
#line 6164 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyHtoA_v2(CUarray dstArray, size_t dstOffset, const void * srcHost, size_t ByteCount); 
#line 6200 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyAtoH_v2(void * dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount); 
#line 6240 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyAtoA_v2(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount); 
#line 6404 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpy2D_v2(const CUDA_MEMCPY2D * pCopy); 
#line 6566 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D * pCopy); 
#line 6735 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpy3D_v2(const CUDA_MEMCPY3D * pCopy); 
#line 6761 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER * pCopy); 
#line 6805 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream); 
#line 6838 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream); 
#line 6880 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void * srcHost, size_t ByteCount, CUstream hStream); 
#line 6920 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyDtoHAsync_v2(void * dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream); 
#line 6961 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream); 
#line 7002 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyHtoAAsync_v2(CUarray dstArray, size_t dstOffset, const void * srcHost, size_t ByteCount, CUstream hStream); 
#line 7043 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpyAtoHAsync_v2(void * dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream); 
#line 7212 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D * pCopy, CUstream hStream); 
#line 7386 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D * pCopy, CUstream hStream); 
#line 7414 "include/cu\\cuda.h"
CUresult __stdcall cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER * pCopy, CUstream hStream); 
#line 7451 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, size_t N); 
#line 7486 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, size_t N); 
#line 7521 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned ui, size_t N); 
#line 7561 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD2D8_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height); 
#line 7602 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD2D16_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height); 
#line 7643 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD2D32_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned ui, size_t Width, size_t Height); 
#line 7680 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream); 
#line 7717 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream); 
#line 7753 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD32Async(CUdeviceptr dstDevice, unsigned ui, size_t N, CUstream hStream); 
#line 7795 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD2D8Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream); 
#line 7838 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD2D16Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream); 
#line 7881 "include/cu\\cuda.h"
CUresult __stdcall cuMemsetD2D32Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned ui, size_t Width, size_t Height, CUstream hStream); 
#line 7985 "include/cu\\cuda.h"
CUresult __stdcall cuArrayCreate_v2(CUarray * pHandle, const CUDA_ARRAY_DESCRIPTOR * pAllocateArray); 
#line 8019 "include/cu\\cuda.h"
CUresult __stdcall cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR * pArrayDescriptor, CUarray hArray); 
#line 8052 "include/cu\\cuda.h"
CUresult __stdcall cuArrayDestroy(CUarray hArray); 
#line 8233 "include/cu\\cuda.h"
CUresult __stdcall cuArray3DCreate_v2(CUarray * pHandle, const CUDA_ARRAY3D_DESCRIPTOR * pAllocateArray); 
#line 8271 "include/cu\\cuda.h"
CUresult __stdcall cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR * pArrayDescriptor, CUarray hArray); 
#line 8416 "include/cu\\cuda.h"
CUresult __stdcall cuMipmappedArrayCreate(CUmipmappedArray * pHandle, const CUDA_ARRAY3D_DESCRIPTOR * pMipmappedArrayDesc, unsigned numMipmapLevels); 
#line 8446 "include/cu\\cuda.h"
CUresult __stdcall cuMipmappedArrayGetLevel(CUarray * pLevelArray, CUmipmappedArray hMipmappedArray, unsigned level); 
#line 8471 "include/cu\\cuda.h"
CUresult __stdcall cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray); 
#line 8513 "include/cu\\cuda.h"
CUresult __stdcall cuMemAddressReserve(CUdeviceptr * ptr, size_t size, size_t alignment, CUdeviceptr addr, unsigned __int64 flags); 
#line 8534 "include/cu\\cuda.h"
CUresult __stdcall cuMemAddressFree(CUdeviceptr ptr, size_t size); 
#line 8569 "include/cu\\cuda.h"
CUresult __stdcall cuMemCreate(CUmemGenericAllocationHandle * handle, size_t size, const CUmemAllocationProp * prop, unsigned __int64 flags); 
#line 8596 "include/cu\\cuda.h"
CUresult __stdcall cuMemRelease(CUmemGenericAllocationHandle handle); 
#line 8640 "include/cu\\cuda.h"
CUresult __stdcall cuMemMap(CUdeviceptr ptr, size_t size, size_t offset, CUmemGenericAllocationHandle handle, unsigned __int64 flags); 
#line 8669 "include/cu\\cuda.h"
CUresult __stdcall cuMemUnmap(CUdeviceptr ptr, size_t size); 
#line 8694 "include/cu\\cuda.h"
CUresult __stdcall cuMemSetAccess(CUdeviceptr ptr, size_t size, const CUmemAccessDesc * desc, size_t count); 
#line 8713 "include/cu\\cuda.h"
CUresult __stdcall cuMemGetAccess(unsigned __int64 * flags, const CUmemLocation * location, CUdeviceptr ptr); 
#line 8746 "include/cu\\cuda.h"
CUresult __stdcall cuMemExportToShareableHandle(void * shareableHandle, CUmemGenericAllocationHandle handle, CUmemAllocationHandleType handleType, unsigned __int64 flags); 
#line 8773 "include/cu\\cuda.h"
CUresult __stdcall cuMemImportFromShareableHandle(CUmemGenericAllocationHandle * handle, void * osHandle, CUmemAllocationHandleType shHandleType); 
#line 8795 "include/cu\\cuda.h"
CUresult __stdcall cuMemGetAllocationGranularity(size_t * granularity, const CUmemAllocationProp * prop, CUmemAllocationGranularity_flags option); 
#line 8812 "include/cu\\cuda.h"
CUresult __stdcall cuMemGetAllocationPropertiesFromHandle(CUmemAllocationProp * prop, CUmemGenericAllocationHandle handle); 
#line 9094 "include/cu\\cuda.h"
CUresult __stdcall cuPointerGetAttribute(void * data, CUpointer_attribute attribute, CUdeviceptr ptr); 
#line 9164 "include/cu\\cuda.h"
CUresult __stdcall cuMemPrefetchAsync(CUdeviceptr devPtr, size_t count, CUdevice dstDevice, CUstream hStream); 
#line 9278 "include/cu\\cuda.h"
CUresult __stdcall cuMemAdvise(CUdeviceptr devPtr, size_t count, CUmem_advise advice, CUdevice device); 
#line 9336 "include/cu\\cuda.h"
CUresult __stdcall cuMemRangeGetAttribute(void * data, size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, size_t count); 
#line 9376 "include/cu\\cuda.h"
CUresult __stdcall cuMemRangeGetAttributes(void ** data, size_t * dataSizes, CUmem_range_attribute * attributes, size_t numAttributes, CUdeviceptr devPtr, size_t count); 
#line 9420 "include/cu\\cuda.h"
CUresult __stdcall cuPointerSetAttribute(const void * value, CUpointer_attribute attribute, CUdeviceptr ptr); 
#line 9470 "include/cu\\cuda.h"
CUresult __stdcall cuPointerGetAttributes(unsigned numAttributes, CUpointer_attribute * attributes, void ** data, CUdeviceptr ptr); 
#line 9520 "include/cu\\cuda.h"
CUresult __stdcall cuStreamCreate(CUstream * phStream, unsigned Flags); 
#line 9569 "include/cu\\cuda.h"
CUresult __stdcall cuStreamCreateWithPriority(CUstream * phStream, unsigned flags, int priority); 
#line 9600 "include/cu\\cuda.h"
CUresult __stdcall cuStreamGetPriority(CUstream hStream, int * priority); 
#line 9628 "include/cu\\cuda.h"
CUresult __stdcall cuStreamGetFlags(CUstream hStream, unsigned * flags); 
#line 9674 "include/cu\\cuda.h"
CUresult __stdcall cuStreamGetCtx(CUstream hStream, CUcontext * pctx); 
#line 9707 "include/cu\\cuda.h"
CUresult __stdcall cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned Flags); 
#line 9782 "include/cu\\cuda.h"
CUresult __stdcall cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void * userData, unsigned flags); 
#line 9822 "include/cu\\cuda.h"
CUresult __stdcall cuStreamBeginCapture_v2(CUstream hStream, CUstreamCaptureMode mode); 
#line 9878 "include/cu\\cuda.h"
CUresult __stdcall cuThreadExchangeStreamCaptureMode(CUstreamCaptureMode * mode); 
#line 9911 "include/cu\\cuda.h"
CUresult __stdcall cuStreamEndCapture(CUstream hStream, CUgraph * phGraph); 
#line 9951 "include/cu\\cuda.h"
CUresult __stdcall cuStreamIsCapturing(CUstream hStream, CUstreamCaptureStatus * captureStatus); 
#line 9979 "include/cu\\cuda.h"
CUresult __stdcall cuStreamGetCaptureInfo(CUstream hStream, CUstreamCaptureStatus * captureStatus, cuuint64_t * id); 
#line 10071 "include/cu\\cuda.h"
CUresult __stdcall cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, size_t length, unsigned flags); 
#line 10103 "include/cu\\cuda.h"
CUresult __stdcall cuStreamQuery(CUstream hStream); 
#line 10132 "include/cu\\cuda.h"
CUresult __stdcall cuStreamSynchronize(CUstream hStream); 
#line 10163 "include/cu\\cuda.h"
CUresult __stdcall cuStreamDestroy_v2(CUstream hStream); 
#line 10220 "include/cu\\cuda.h"
CUresult __stdcall cuEventCreate(CUevent * phEvent, unsigned Flags); 
#line 10261 "include/cu\\cuda.h"
CUresult __stdcall cuEventRecord(CUevent hEvent, CUstream hStream); 
#line 10293 "include/cu\\cuda.h"
CUresult __stdcall cuEventQuery(CUevent hEvent); 
#line 10324 "include/cu\\cuda.h"
CUresult __stdcall cuEventSynchronize(CUevent hEvent); 
#line 10354 "include/cu\\cuda.h"
CUresult __stdcall cuEventDestroy_v2(CUevent hEvent); 
#line 10399 "include/cu\\cuda.h"
CUresult __stdcall cuEventElapsedTime(float * pMilliseconds, CUevent hStart, CUevent hEnd); 
#line 10575 "include/cu\\cuda.h"
CUresult __stdcall cuImportExternalMemory(CUexternalMemory * extMem_out, const CUDA_EXTERNAL_MEMORY_HANDLE_DESC * memHandleDesc); 
#line 10628 "include/cu\\cuda.h"
CUresult __stdcall cuExternalMemoryGetMappedBuffer(CUdeviceptr * devPtr, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_BUFFER_DESC * bufferDesc); 
#line 10680 "include/cu\\cuda.h"
CUresult __stdcall cuExternalMemoryGetMappedMipmappedArray(CUmipmappedArray * mipmap, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC * mipmapDesc); 
#line 10702 "include/cu\\cuda.h"
CUresult __stdcall cuDestroyExternalMemory(CUexternalMemory extMem); 
#line 10836 "include/cu\\cuda.h"
CUresult __stdcall cuImportExternalSemaphore(CUexternalSemaphore * extSem_out, const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC * semHandleDesc); 
#line 10901 "include/cu\\cuda.h"
CUresult __stdcall cuSignalExternalSemaphoresAsync(const CUexternalSemaphore * extSemArray, const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS * paramsArray, unsigned numExtSems, CUstream stream); 
#line 10975 "include/cu\\cuda.h"
CUresult __stdcall cuWaitExternalSemaphoresAsync(const CUexternalSemaphore * extSemArray, const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS * paramsArray, unsigned numExtSems, CUstream stream); 
#line 10996 "include/cu\\cuda.h"
CUresult __stdcall cuDestroyExternalSemaphore(CUexternalSemaphore extSem); 
#line 11083 "include/cu\\cuda.h"
CUresult __stdcall cuStreamWaitValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned flags); 
#line 11118 "include/cu\\cuda.h"
CUresult __stdcall cuStreamWaitValue64(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned flags); 
#line 11153 "include/cu\\cuda.h"
CUresult __stdcall cuStreamWriteValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned flags); 
#line 11187 "include/cu\\cuda.h"
CUresult __stdcall cuStreamWriteValue64(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned flags); 
#line 11222 "include/cu\\cuda.h"
CUresult __stdcall cuStreamBatchMemOp(CUstream stream, unsigned count, CUstreamBatchMemOpParams * paramArray, unsigned flags); 
#line 11296 "include/cu\\cuda.h"
CUresult __stdcall cuFuncGetAttribute(int * pi, CUfunction_attribute attrib, CUfunction hfunc); 
#line 11344 "include/cu\\cuda.h"
CUresult __stdcall cuFuncSetAttribute(CUfunction hfunc, CUfunction_attribute attrib, int value); 
#line 11389 "include/cu\\cuda.h"
CUresult __stdcall cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config); 
#line 11442 "include/cu\\cuda.h"
CUresult __stdcall cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config); 
#line 11557 "include/cu\\cuda.h"
CUresult __stdcall cuLaunchKernel(CUfunction f, unsigned gridDimX, unsigned gridDimY, unsigned gridDimZ, unsigned blockDimX, unsigned blockDimY, unsigned blockDimZ, unsigned sharedMemBytes, CUstream hStream, void ** kernelParams, void ** extra); 
#line 11646 "include/cu\\cuda.h"
CUresult __stdcall cuLaunchCooperativeKernel(CUfunction f, unsigned gridDimX, unsigned gridDimY, unsigned gridDimZ, unsigned blockDimX, unsigned blockDimY, unsigned blockDimZ, unsigned sharedMemBytes, CUstream hStream, void ** kernelParams); 
#line 11790 "include/cu\\cuda.h"
CUresult __stdcall cuLaunchCooperativeKernelMultiDevice(CUDA_LAUNCH_PARAMS * launchParamsList, unsigned numDevices, unsigned flags); 
#line 11859 "include/cu\\cuda.h"
CUresult __stdcall cuLaunchHostFunc(CUstream hStream, CUhostFn fn, void * userData); 
#line 11911 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z); 
#line 11945 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuFuncSetSharedSize(CUfunction hfunc, unsigned bytes); 
#line 11977 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuParamSetSize(CUfunction hfunc, unsigned numbytes); 
#line 12010 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuParamSeti(CUfunction hfunc, int offset, unsigned value); 
#line 12043 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuParamSetf(CUfunction hfunc, int offset, float value); 
#line 12078 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuParamSetv(CUfunction hfunc, int offset, void * ptr, unsigned numbytes); 
#line 12115 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuLaunch(CUfunction f); 
#line 12154 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuLaunchGrid(CUfunction f, int grid_width, int grid_height); 
#line 12201 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream); 
#line 12226 "include/cu\\cuda.h"
__declspec(deprecated) CUresult __stdcall cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef); 
#line 12273 "include/cu\\cuda.h"
CUresult __stdcall cuGraphCreate(CUgraph * phGraph, unsigned flags); 
#line 12372 "include/cu\\cuda.h"
CUresult __stdcall cuGraphAddKernelNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_KERNEL_NODE_PARAMS * nodeParams); 
#line 12404 "include/cu\\cuda.h"
CUresult __stdcall cuGraphKernelNodeGetParams(CUgraphNode hNode, CUDA_KERNEL_NODE_PARAMS * nodeParams); 
#line 12427 "include/cu\\cuda.h"
CUresult __stdcall cuGraphKernelNodeSetParams(CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS * nodeParams); 
#line 12475 "include/cu\\cuda.h"
CUresult __stdcall cuGraphAddMemcpyNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_MEMCPY3D * copyParams, CUcontext ctx); 
#line 12498 "include/cu\\cuda.h"
CUresult __stdcall cuGraphMemcpyNodeGetParams(CUgraphNode hNode, CUDA_MEMCPY3D * nodeParams); 
#line 12521 "include/cu\\cuda.h"
CUresult __stdcall cuGraphMemcpyNodeSetParams(CUgraphNode hNode, const CUDA_MEMCPY3D * nodeParams); 
#line 12563 "include/cu\\cuda.h"
CUresult __stdcall cuGraphAddMemsetNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_MEMSET_NODE_PARAMS * memsetParams, CUcontext ctx); 
#line 12586 "include/cu\\cuda.h"
CUresult __stdcall cuGraphMemsetNodeGetParams(CUgraphNode hNode, CUDA_MEMSET_NODE_PARAMS * nodeParams); 
#line 12609 "include/cu\\cuda.h"
CUresult __stdcall cuGraphMemsetNodeSetParams(CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS * nodeParams); 
#line 12650 "include/cu\\cuda.h"
CUresult __stdcall cuGraphAddHostNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, const CUDA_HOST_NODE_PARAMS * nodeParams); 
#line 12673 "include/cu\\cuda.h"
CUresult __stdcall cuGraphHostNodeGetParams(CUgraphNode hNode, CUDA_HOST_NODE_PARAMS * nodeParams); 
#line 12696 "include/cu\\cuda.h"
CUresult __stdcall cuGraphHostNodeSetParams(CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS * nodeParams); 
#line 12734 "include/cu\\cuda.h"
CUresult __stdcall cuGraphAddChildGraphNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies, CUgraph childGraph); 
#line 12758 "include/cu\\cuda.h"
CUresult __stdcall cuGraphChildGraphNodeGetGraph(CUgraphNode hNode, CUgraph * phGraph); 
#line 12796 "include/cu\\cuda.h"
CUresult __stdcall cuGraphAddEmptyNode(CUgraphNode * phGraphNode, CUgraph hGraph, const CUgraphNode * dependencies, size_t numDependencies); 
#line 12821 "include/cu\\cuda.h"
CUresult __stdcall cuGraphClone(CUgraph * phGraphClone, CUgraph originalGraph); 
#line 12847 "include/cu\\cuda.h"
CUresult __stdcall cuGraphNodeFindInClone(CUgraphNode * phNode, CUgraphNode hOriginalNode, CUgraph hClonedGraph); 
#line 12878 "include/cu\\cuda.h"
CUresult __stdcall cuGraphNodeGetType(CUgraphNode hNode, CUgraphNodeType * type); 
#line 12909 "include/cu\\cuda.h"
CUresult __stdcall cuGraphGetNodes(CUgraph hGraph, CUgraphNode * nodes, size_t * numNodes); 
#line 12940 "include/cu\\cuda.h"
CUresult __stdcall cuGraphGetRootNodes(CUgraph hGraph, CUgraphNode * rootNodes, size_t * numRootNodes); 
#line 12974 "include/cu\\cuda.h"
CUresult __stdcall cuGraphGetEdges(CUgraph hGraph, CUgraphNode * from, CUgraphNode * to, size_t * numEdges); 
#line 13005 "include/cu\\cuda.h"
CUresult __stdcall cuGraphNodeGetDependencies(CUgraphNode hNode, CUgraphNode * dependencies, size_t * numDependencies); 
#line 13037 "include/cu\\cuda.h"
CUresult __stdcall cuGraphNodeGetDependentNodes(CUgraphNode hNode, CUgraphNode * dependentNodes, size_t * numDependentNodes); 
#line 13066 "include/cu\\cuda.h"
CUresult __stdcall cuGraphAddDependencies(CUgraph hGraph, const CUgraphNode * from, const CUgraphNode * to, size_t numDependencies); 
#line 13095 "include/cu\\cuda.h"
CUresult __stdcall cuGraphRemoveDependencies(CUgraph hGraph, const CUgraphNode * from, const CUgraphNode * to, size_t numDependencies); 
#line 13119 "include/cu\\cuda.h"
CUresult __stdcall cuGraphDestroyNode(CUgraphNode hNode); 
#line 13155 "include/cu\\cuda.h"
CUresult __stdcall cuGraphInstantiate(CUgraphExec * phGraphExec, CUgraph hGraph, CUgraphNode * phErrorNode, char * logBuffer, size_t bufferSize); 
#line 13188 "include/cu\\cuda.h"
CUresult __stdcall cuGraphExecKernelNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS * nodeParams); 
#line 13228 "include/cu\\cuda.h"
CUresult __stdcall cuGraphExecMemcpyNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMCPY3D * copyParams, CUcontext ctx); 
#line 13266 "include/cu\\cuda.h"
CUresult __stdcall cuGraphExecMemsetNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS * memsetParams, CUcontext ctx); 
#line 13295 "include/cu\\cuda.h"
CUresult __stdcall cuGraphExecHostNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS * nodeParams); 
#line 13321 "include/cu\\cuda.h"
CUresult __stdcall cuGraphLaunch(CUgraphExec hGraphExec, CUstream hStream); 
#line 13345 "include/cu\\cuda.h"
CUresult __stdcall cuGraphExecDestroy(CUgraphExec hGraphExec); 
#line 13365 "include/cu\\cuda.h"
CUresult __stdcall cuGraphDestroy(CUgraph hGraph); 
#line 13439 "include/cu\\cuda.h"
CUresult __stdcall cuGraphExecUpdate(CUgraphExec hGraphExec, CUgraph hGraph, CUgraphNode * hErrorNode_out, CUgraphExecUpdateResult * updateResult_out); 
#line 13480 "include/cu\\cuda.h"
CUresult __stdcall cuOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize); 
#line 13522 "include/cu\\cuda.h"
CUresult __stdcall cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
#line 13574 "include/cu\\cuda.h"
CUresult __stdcall cuOccupancyMaxPotentialBlockSize(int * minGridSize, int * blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit); 
#line 13620 "include/cu\\cuda.h"
CUresult __stdcall cuOccupancyMaxPotentialBlockSizeWithFlags(int * minGridSize, int * blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit, unsigned flags); 
#line 13666 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned Flags); 
#line 13696 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned Flags); 
#line 13743 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetAddress_v2(size_t * ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes); 
#line 13798 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR * desc, CUdeviceptr dptr, size_t Pitch); 
#line 13834 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents); 
#line 13880 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am); 
#line 13916 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm); 
#line 13952 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm); 
#line 13981 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias); 
#line 14012 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp); 
#line 14042 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned maxAniso); 
#line 14078 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetBorderColor(CUtexref hTexRef, float * pBorderColor); 
#line 14119 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefSetFlags(CUtexref hTexRef, unsigned Flags); 
#line 14147 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetAddress_v2(CUdeviceptr * pdptr, CUtexref hTexRef); 
#line 14175 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetArray(CUarray * phArray, CUtexref hTexRef); 
#line 14202 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetMipmappedArray(CUmipmappedArray * phMipmappedArray, CUtexref hTexRef); 
#line 14230 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetAddressMode(CUaddress_mode * pam, CUtexref hTexRef, int dim); 
#line 14256 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetFilterMode(CUfilter_mode * pfm, CUtexref hTexRef); 
#line 14284 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetFormat(CUarray_format * pFormat, int * pNumChannels, CUtexref hTexRef); 
#line 14310 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetMipmapFilterMode(CUfilter_mode * pfm, CUtexref hTexRef); 
#line 14336 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetMipmapLevelBias(float * pbias, CUtexref hTexRef); 
#line 14363 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetMipmapLevelClamp(float * pminMipmapLevelClamp, float * pmaxMipmapLevelClamp, CUtexref hTexRef); 
#line 14389 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetMaxAnisotropy(int * pmaxAniso, CUtexref hTexRef); 
#line 14418 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetBorderColor(float * pBorderColor, CUtexref hTexRef); 
#line 14443 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefGetFlags(unsigned * pFlags, CUtexref hTexRef); 
#line 14468 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefCreate(CUtexref * pTexRef); 
#line 14488 "include/cu\\cuda.h"
CUresult __stdcall cuTexRefDestroy(CUtexref hTexRef); 
#line 14532 "include/cu\\cuda.h"
CUresult __stdcall cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned Flags); 
#line 14555 "include/cu\\cuda.h"
CUresult __stdcall cuSurfRefGetArray(CUarray * phArray, CUsurfref hSurfRef); 
#line 14779 "include/cu\\cuda.h"
CUresult __stdcall cuTexObjectCreate(CUtexObject * pTexObject, const CUDA_RESOURCE_DESC * pResDesc, const CUDA_TEXTURE_DESC * pTexDesc, const CUDA_RESOURCE_VIEW_DESC * pResViewDesc); 
#line 14799 "include/cu\\cuda.h"
CUresult __stdcall cuTexObjectDestroy(CUtexObject texObject); 
#line 14820 "include/cu\\cuda.h"
CUresult __stdcall cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC * pResDesc, CUtexObject texObject); 
#line 14841 "include/cu\\cuda.h"
CUresult __stdcall cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC * pTexDesc, CUtexObject texObject); 
#line 14863 "include/cu\\cuda.h"
CUresult __stdcall cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC * pResViewDesc, CUtexObject texObject); 
#line 14906 "include/cu\\cuda.h"
CUresult __stdcall cuSurfObjectCreate(CUsurfObject * pSurfObject, const CUDA_RESOURCE_DESC * pResDesc); 
#line 14926 "include/cu\\cuda.h"
CUresult __stdcall cuSurfObjectDestroy(CUsurfObject surfObject); 
#line 14947 "include/cu\\cuda.h"
CUresult __stdcall cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC * pResDesc, CUsurfObject surfObject); 
#line 14992 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceCanAccessPeer(int * canAccessPeer, CUdevice dev, CUdevice peerDev); 
#line 15045 "include/cu\\cuda.h"
CUresult __stdcall cuCtxEnablePeerAccess(CUcontext peerContext, unsigned Flags); 
#line 15072 "include/cu\\cuda.h"
CUresult __stdcall cuCtxDisablePeerAccess(CUcontext peerContext); 
#line 15116 "include/cu\\cuda.h"
CUresult __stdcall cuDeviceGetP2PAttribute(int * value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice); 
#line 15162 "include/cu\\cuda.h"
CUresult __stdcall cuGraphicsUnregisterResource(CUgraphicsResource resource); 
#line 15202 "include/cu\\cuda.h"
CUresult __stdcall cuGraphicsSubResourceGetMappedArray(CUarray * pArray, CUgraphicsResource resource, unsigned arrayIndex, unsigned mipLevel); 
#line 15235 "include/cu\\cuda.h"
CUresult __stdcall cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray * pMipmappedArray, CUgraphicsResource resource); 
#line 15272 "include/cu\\cuda.h"
CUresult __stdcall cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr * pDevPtr, size_t * pSize, CUgraphicsResource resource); 
#line 15314 "include/cu\\cuda.h"
CUresult __stdcall cuGraphicsResourceSetMapFlags_v2(CUgraphicsResource resource, unsigned flags); 
#line 15354 "include/cu\\cuda.h"
CUresult __stdcall cuGraphicsMapResources(unsigned count, CUgraphicsResource * resources, CUstream hStream); 
#line 15391 "include/cu\\cuda.h"
CUresult __stdcall cuGraphicsUnmapResources(unsigned count, CUgraphicsResource * resources, CUstream hStream); 
#line 15395 "include/cu\\cuda.h"
CUresult __stdcall cuGetExportTable(const void ** ppExportTable, const CUuuid * pExportTableId); 
#line 15739 "include/cu\\cuda.h"
}
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
namespace std { 
#pragma warning(push)
#pragma warning(disable: 4995)
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::FILE;using ::_Mbstatet;
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::fpos_t;
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::clearerr;using ::fclose;using ::feof;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::ferror;using ::fflush;using ::fgetc;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::fgetpos;using ::fgets;using ::fopen;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::fprintf;using ::fputc;using ::fputs;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::fread;using ::freopen;using ::fscanf;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::fseek;using ::fsetpos;using ::ftell;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::fwrite;using ::getc;using ::getchar;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::perror;
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::putc;using ::putchar;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::printf;using ::puts;using ::remove;
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::rename;using ::rewind;using ::scanf;
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::setbuf;using ::setvbuf;using ::sprintf;
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::sscanf;using ::tmpfile;using ::tmpnam;
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::ungetc;using ::vfprintf;using ::vprintf;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::vsprintf;
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::snprintf;using ::vsnprintf;
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
using ::vfscanf;using ::vscanf;using ::vsscanf;
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
#pragma warning(pop)
}
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
#pragma warning(pop)
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
namespace std { 
#pragma warning(push)
#pragma warning(disable: 4995)
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
using ::memchr;using ::memcmp;
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
using ::memcpy;using ::memmove;using ::memset;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
using ::strcat;using ::strchr;using ::strcmp;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
using ::strcoll;using ::strcpy;using ::strcspn;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
using ::strerror;using ::strlen;using ::strncat;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
using ::strncmp;using ::strncpy;using ::strpbrk;
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
using ::strrchr;using ::strspn;using ::strstr;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
using ::strtok;using ::strxfrm;
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
#pragma warning(pop)
}
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
#pragma warning(pop)
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"
using ::ptrdiff_t;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"
typedef double max_align_t; 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"
}
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"
using std::max_align_t;
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"
#pragma warning(pop)
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"
namespace std { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"
template < class _Elem >
 class initializer_list
 {
public :
 typedef _Elem value_type;
 typedef const _Elem & reference;
 typedef const _Elem & const_reference;
 typedef size_t size_type;

 typedef const _Elem * iterator;
 typedef const _Elem * const_iterator;

 constexpr initializer_list ( ) noexcept
  : _First ( nullptr ), _Last ( nullptr )
  {
  }

 constexpr initializer_list ( const _Elem * _First_arg,
  const _Elem * _Last_arg ) noexcept
  : _First ( _First_arg ), _Last ( _Last_arg )
  {
  }

  constexpr const _Elem * begin ( ) const noexcept
  {
  return ( _First );
  }

  constexpr const _Elem * end ( ) const noexcept
  {
  return ( _Last );
  }

  constexpr size_t size ( ) const noexcept
  {
  return ( static_cast < size_t > ( _Last - _First ) );
  }

private :
 const _Elem * _First;
 const _Elem * _Last;
 };
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"
template < class _Elem >
  constexpr const _Elem * begin ( initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . begin ( ) );
 }
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"
template < class _Elem >
  constexpr const _Elem * end ( initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . end ( ) );
 }
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"
}
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
namespace std { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template< class > constexpr bool 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
_Always_false = false; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template< class _Arg, class 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
_Result> 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
struct unary_function { 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef _Arg argument_type; 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef _Result result_type; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template< class _Arg1, class 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
_Arg2, class 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
_Result> 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
struct binary_function { 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef _Arg1 first_argument_type; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef _Arg2 second_argument_type; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef _Result result_type; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty = void >
 struct plus
 {
  typedef _Ty first_argument_type;
  typedef _Ty second_argument_type;
  typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left + _Right );
  }
 };
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty = void >
 struct minus
 {
  typedef _Ty first_argument_type;
  typedef _Ty second_argument_type;
  typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left - _Right );
  }
 };
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty = void >
 struct multiplies
 {
  typedef _Ty first_argument_type;
  typedef _Ty second_argument_type;
  typedef _Ty result_type;

 constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left * _Right );
  }
 };
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty = void >
 struct equal_to
 {
  typedef _Ty first_argument_type;
  typedef _Ty second_argument_type;
  typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left == _Right );
  }
 };
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty = void >
 struct not_equal_to
 {
  typedef _Ty first_argument_type;
  typedef _Ty second_argument_type;
  typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left != _Right );
  }
 };
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty = void >
 struct greater
 {
  typedef _Ty first_argument_type;
  typedef _Ty second_argument_type;
  typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left > _Right );
  }
 };
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty = void >
 struct less
 {
  typedef _Ty first_argument_type;
  typedef _Ty second_argument_type;
  typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left < _Right );
  }
 };
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty = void >
 struct greater_equal
 {
  typedef _Ty first_argument_type;
  typedef _Ty second_argument_type;
  typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left >= _Right );
  }
 };
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty = void >
 struct less_equal
 {
  typedef _Ty first_argument_type;
  typedef _Ty second_argument_type;
  typedef bool result_type;

 constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
  {
  return ( _Left <= _Right );
  }
 };
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template<> struct plus< void>  { 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef int is_transparent; 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   + static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   + static_cast < _Ty2 && > ( _Right ) );
  }
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template<> struct minus< void>  { 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef int is_transparent; 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   - static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   - static_cast < _Ty2 && > ( _Right ) );
  }
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template<> struct multiplies< void>  { 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef int is_transparent; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   * static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   * static_cast < _Ty2 && > ( _Right ) );
  }
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template<> struct equal_to<>  { 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef int is_transparent; 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   == static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   == static_cast < _Ty2 && > ( _Right ) );
  }
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template<> struct not_equal_to< void>  { 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef int is_transparent; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   != static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   != static_cast < _Ty2 && > ( _Right ) );
  }
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template<> struct greater< void>  { 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef int is_transparent; 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   > static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   > static_cast < _Ty2 && > ( _Right ) );
  }
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template<> struct less<>  { 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef int is_transparent; 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   < static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   < static_cast < _Ty2 && > ( _Right ) );
  }
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template<> struct greater_equal< void>  { 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef int is_transparent; 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   >= static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   >= static_cast < _Ty2 && > ( _Right ) );
  }
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template<> struct less_equal< void>  { 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
typedef int is_transparent; 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty1,
  class _Ty2 >
  constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
  -> decltype ( static_cast < _Ty1 && > ( _Left )
   <= static_cast < _Ty2 && > ( _Right ) )
  {
  return ( static_cast < _Ty1 && > ( _Left )
   <= static_cast < _Ty2 && > ( _Right ) );
  }
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}; 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty >
  constexpr _Ty * addressof ( _Ty & _Val ) noexcept
 {
 return ( __builtin_addressof ( _Val ) );
 }
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty >
 const _Ty * addressof ( const _Ty && ) = delete;
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ptrty > inline
 auto _Unfancy ( _Ptrty _Ptr )
 {
 return ( :: std :: addressof ( * _Ptr ) );
 }
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
template < class _Ty > inline
 _Ty * _Unfancy ( _Ty * _Ptr )
 {
 return ( _Ptr );
 }
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
}
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
#pragma warning(pop)
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma warning(disable: 4180)
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
namespace std { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty,
 _Ty ... _Vals >
 struct integer_sequence
 {
 static_assert ( is_integral_v < _Ty >,
  "integer_sequence<T, I...> requires T to be an integral type." );

 using value_type = _Ty;

  static constexpr size_t size ( ) noexcept
  {
  return ( sizeof ... ( _Vals ) );
  }
 };
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, _Ty 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Size> using make_integer_sequence = __make_integer_seq< integer_sequence, _Ty, _Size> ; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t ..._Vals> using index_sequence = integer_sequence< unsigned __int64, _Vals...> ; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Size> using make_index_sequence = make_integer_sequence< unsigned __int64, _Size> ; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< bool _First_value, class 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_First, class ...
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Rest> 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Conjunction { 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _First; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _True, class 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Next, class ...
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Rest> 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Conjunction< true, _True, _Next, _Rest...>  { 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename std::_Conjunction< _Next::value, _Next, _Rest...> ::type; 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ..._Traits> 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct conjunction : public true_type { 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _First, class ...
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Rest> 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct conjunction< _First, _Rest...>  : public _Conjunction< _First::value, _First, _Rest...> ::type { 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ..._Traits> constexpr bool 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
conjunction_v = (conjunction< _Traits...> ::value); 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< bool _First_value, class 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_First, class ...
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Rest> 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Disjunction { 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _First; 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _False, class 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Next, class ...
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Rest> 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Disjunction< false, _False, _Next, _Rest...>  { 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename std::_Disjunction< _Next::value, _Next, _Rest...> ::type; 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ..._Traits> 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct disjunction : public false_type { 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _First, class ...
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Rest> 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct disjunction< _First, _Rest...>  : public _Disjunction< _First::value, _First, _Rest...> ::type { 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ..._Traits> constexpr bool 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
disjunction_v = (disjunction< _Traits...> ::value); 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Trait> 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct negation : public bool_constant< !(static_cast< bool>(_Trait::value))>  { 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Trait> constexpr bool 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
negation_v = (negation< _Trait> ::value); 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class ...
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Types> constexpr bool 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Is_any_of_v = disjunction_v< is_same< _Ty, _Types> ...> ; 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ..._Types> 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Arg_types { 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1> 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Arg_types< _Ty1>  { 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef _Ty1 argument_type; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2> 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Arg_types< _Ty1, _Ty2>  { 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef _Ty1 first_argument_type; 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef _Ty2 second_argument_type; 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_function { 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Bool_type = false_type; 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...)>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...)>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) &>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) &>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const &>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const &>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile &>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile &>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) &&>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) &&>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const &&>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const &&>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __cdecl (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret __vectorcall (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; }; 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...)>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) &>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const &>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile &>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile &>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) &&>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const &&>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) volatile &&>  { using _Bool_type = true_type; typedef _Ret result_type; }; template< class _Ret, class ..._Types> struct _Is_function< _Ret (_Types ..., ...) const volatile &&>  { using _Bool_type = true_type; typedef _Ret result_type; }; 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_function : public _Is_function< _Ty> ::_Bool_type { 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_function_v = (is_function< _Ty> ::value); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_memfunptr { 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Bool_type = false_type; 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< !std::is_same_v< int, int &&> , _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< !std::is_same_v< int &, int &&> , _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< !std::is_same_v< int &&, int &&> , _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...)>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< is_integral_v< double> > ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &&>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &&>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &&>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &&>  { using _Bool_type = true_type; typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_void : public false_type { 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template<> struct is_void< void>  : public true_type { }; template<> struct is_void< const void>  : public true_type { }; template<> struct is_void< volatile void>  : public true_type { }; template<> struct is_void< const volatile void>  : public true_type { }; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_void_v = (is_void< _Ty> ::value); 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ..._Types> using void_t = void; 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct add_const { 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = const _Ty; 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using add_const_t = const _Ty; 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct add_volatile { 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = volatile _Ty; 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using add_volatile_t = volatile _Ty; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct add_cv { 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = const volatile _Ty; 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using add_cv_t = const volatile _Ty; 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Add_reference { 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Lvalue = _Ty; 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Rvalue = _Ty; 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Add_reference< _Ty, void_t< _Ty &> >  { 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Lvalue = _Ty &; 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Rvalue = _Ty &&; 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct add_lvalue_reference { 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename _Add_reference< _Ty> ::_Lvalue; 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using add_lvalue_reference_t = typename _Add_reference< _Ty> ::_Lvalue; 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct add_rvalue_reference { 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename _Add_reference< _Ty> ::_Rvalue; 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using add_rvalue_reference_t = typename _Add_reference< _Ty> ::_Rvalue; 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> add_rvalue_reference_t< _Ty>  declval() noexcept; 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct remove_extent { 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _Ty; 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct remove_extent< _Ty [_Ix]>  { 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _Ty; 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct remove_extent< _Ty []>  { 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _Ty; 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using remove_extent_t = typename remove_extent< _Ty> ::type; 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct remove_all_extents { 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _Ty; 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct remove_all_extents< _Ty [_Ix]>  { 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename std::remove_all_extents< _Ty> ::type; 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct remove_all_extents< _Ty []>  { 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename std::remove_all_extents< _Ty> ::type; 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using remove_all_extents_t = typename remove_all_extents< _Ty> ::type; 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct remove_pointer { 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _Ty; 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> struct remove_pointer< _Ty *>  { using type = _Ty; }; template< class _Ty> struct remove_pointer< _Ty *const>  { using type = _Ty; }; template< class _Ty> struct remove_pointer< _Ty *volatile>  { using type = _Ty; }; template< class _Ty> struct remove_pointer< _Ty *const volatile>  { using type = _Ty; }; 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using remove_pointer_t = typename remove_pointer< _Ty> ::type; 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Add_pointer { 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _Ty; 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Add_pointer< _Ty, void_t< remove_reference_t< _Ty>  *> >  { 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = remove_reference_t< _Ty>  *; 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct add_pointer { 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename _Add_pointer< _Ty> ::type; 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using add_pointer_t = typename _Add_pointer< _Ty> ::type; 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_array : public false_type { 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, size_t _Nx> 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_array< _Ty [_Nx]>  : public true_type { 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_array< _Ty []>  : public true_type { 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_array_v = (is_array< _Ty> ::value); 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_lvalue_reference : public false_type { 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_lvalue_reference< _Ty &>  : public true_type { 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_lvalue_reference_v = (is_lvalue_reference< _Ty> ::value); 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_rvalue_reference : public false_type { 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_rvalue_reference< _Ty &&>  : public true_type { 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_rvalue_reference_v = (is_rvalue_reference< _Ty> ::value); 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_reference : public false_type { 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_reference< _Ty &>  : public true_type { 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_reference< _Ty &&>  : public true_type { 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_reference_v = (is_reference< _Ty> ::value); 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, bool 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Pmf = _Is_memfunptr< _Ty> ::_Bool_type::value> 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_member_object_pointer : public false_type { 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2> 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_member_object_pointer< _Ty1 _Ty2::*, false>  : public true_type { 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Class_type = _Ty2; 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_member_object_pointer : public _Is_member_object_pointer< remove_cv_t< _Ty> > ::type { 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_member_object_pointer_v = (is_member_object_pointer< _Ty> ::value); 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_member_function_pointer : public _Is_memfunptr< remove_cv_t< _Ty> > ::_Bool_type { 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_member_function_pointer_v = (is_member_function_pointer< _Ty> ::value); 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_pointer : public false_type { 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_pointer< _Ty *>  : public true_type { 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_pointer< _Ty *const>  : public true_type { 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_pointer< _Ty *volatile>  : public true_type { 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_pointer< _Ty *const volatile>  : public true_type { 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_pointer_v = (is_pointer< _Ty> ::value); 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_null_pointer : public bool_constant< is_same_v< remove_cv_t< _Ty> , std::nullptr_t> >  { 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_null_pointer_v = is_same_v< remove_cv_t< _Ty> , std::nullptr_t> ; 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_union : public bool_constant< __is_union(_Ty)>  { 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_union_v = __is_union(_Ty); 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_class : public bool_constant< __is_class(_Ty)>  { 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_class_v = __is_class(_Ty); 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_fundamental : public bool_constant< (is_arithmetic_v< _Ty>  || is_void_v< _Ty> ) || is_null_pointer_v< _Ty> >  { 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_fundamental_v = (is_fundamental< _Ty> ::value); 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_object : public bool_constant< ((!is_function_v< _Ty> ) && (!is_reference_v< _Ty> )) && (!is_void_v< _Ty> )>  { 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_object_v = (is_object< _Ty> ::value); 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _From, class 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_To> 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_convertible : public bool_constant< __is_convertible_to(_From, _To)>  { 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _From, class 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_To> constexpr bool 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_convertible_v = __is_convertible_to(_From, _To); 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_enum : public bool_constant< __is_enum(_Ty)>  { 
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_enum_v = __is_enum(_Ty); 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_compound : public bool_constant< !is_fundamental_v< _Ty> >  { 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_compound_v = (is_compound< _Ty> ::value); 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_member_pointer : public bool_constant< is_member_object_pointer_v< _Ty>  || is_member_function_pointer_v< _Ty> >  { 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_member_pointer_v = (is_member_pointer< _Ty> ::value); 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_scalar : public bool_constant< (((is_arithmetic_v< _Ty>  || is_enum_v< _Ty> ) || is_pointer_v< _Ty> ) || is_member_pointer_v< _Ty> ) || is_null_pointer_v< _Ty> >  { 
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_scalar_v = (is_scalar< _Ty> ::value); 
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_const : public false_type { 
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_const< const _Ty>  : public true_type { 
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_const_v = (is_const< _Ty> ::value); 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_volatile : public false_type { 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_volatile< volatile _Ty>  : public true_type { 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_volatile_v = (is_volatile< _Ty> ::value); 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_pod : public bool_constant< __is_pod(_Ty)>  { 
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_pod_v = __is_pod(_Ty); 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_empty : public bool_constant< __is_empty(_Ty)>  { 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_empty_v = __is_empty(_Ty); 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_polymorphic : public bool_constant< __is_polymorphic(_Ty)>  { 
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 729 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_polymorphic_v = __is_polymorphic(_Ty); 
#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_abstract : public bool_constant< __is_abstract(_Ty)>  { 
#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_abstract_v = __is_abstract(_Ty); 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_final : public bool_constant< __is_final(_Ty)>  { 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_final_v = __is_final(_Ty); 
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_standard_layout : public bool_constant< __is_standard_layout(_Ty)>  { 
#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_standard_layout_v = __is_standard_layout(_Ty); 
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_literal_type : public bool_constant< __is_literal_type(_Ty)>  { 
#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Ty> constexpr bool 
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_literal_type_v = __is_literal_type(_Ty); 
#pragma warning(pop)
#line 775 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_trivial : public bool_constant< __is_trivial(_Ty)>  { 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_trivial_v = __is_trivial(_Ty); 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_trivially_copyable : public bool_constant< __is_trivially_copyable(_Ty)>  { 
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 792 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_trivially_copyable_v = __is_trivially_copyable(_Ty); 
#line 795 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct has_virtual_destructor : public bool_constant< __has_virtual_destructor(_Ty)>  { 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
has_virtual_destructor_v = __has_virtual_destructor(_Ty); 
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class ...
#line 829 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Args> 
#line 830 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_constructible : public bool_constant< __is_constructible(_Ty, _Args...)>  { 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class ...
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Args> constexpr bool 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_constructible_v = __is_constructible(_Ty, _Args...); 
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 841 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_copy_constructible : public bool_constant< __is_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 844 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 846 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_copy_constructible_v = __is_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_default_constructible : public bool_constant< __is_constructible(_Ty)>  { 
#line 854 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_default_constructible_v = __is_constructible(_Ty); 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_implicitly_default_constructible : public false_type { 
#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 867 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> void _Implicitly_default_construct(const _Ty &); 
#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 871 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_implicitly_default_constructible< _Ty, void_t< decltype((_Implicitly_default_construct< _Ty> ({})))> >  : public true_type { 
#line 874 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_move_constructible : public bool_constant< __is_constructible(_Ty, _Ty)>  { 
#line 881 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 883 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 884 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_move_constructible_v = __is_constructible(_Ty, _Ty); 
#line 887 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _To, class 
#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_From> 
#line 889 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_assignable : public bool_constant< __is_assignable(_To, _From)>  { 
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 894 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _To, class 
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_From> constexpr bool 
#line 896 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_assignable_v = __is_assignable(_To, _From); 
#line 899 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 900 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_copy_assignable : public bool_constant< __is_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 903 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 905 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_copy_assignable_v = __is_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 910 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_move_assignable : public bool_constant< __is_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 914 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 916 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 917 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_move_assignable_v = __is_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 921 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_destructible : public bool_constant< __is_destructible(_Ty)>  { 
#line 924 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 926 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_destructible_v = __is_destructible(_Ty); 
#line 931 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class ...
#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Args> 
#line 933 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_trivially_constructible : public bool_constant< __is_trivially_constructible(_Ty, _Args...)>  { 
#line 936 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 938 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class ...
#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Args> constexpr bool 
#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_trivially_constructible_v = __is_trivially_constructible(_Ty, _Args...); 
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 944 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_trivially_copy_constructible : public bool_constant< __is_trivially_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 947 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_trivially_copy_constructible_v = __is_trivially_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 955 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_trivially_default_constructible : public bool_constant< __is_trivially_constructible(_Ty)>  { 
#line 958 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 961 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_trivially_default_constructible_v = __is_trivially_constructible(_Ty); 
#line 964 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 965 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_trivially_move_constructible : public bool_constant< __is_trivially_constructible(_Ty, _Ty)>  { 
#line 968 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 970 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 971 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_trivially_move_constructible_v = __is_trivially_constructible(_Ty, _Ty); 
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _To, class 
#line 975 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_From> 
#line 976 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_trivially_assignable : public bool_constant< __is_trivially_assignable(_To, _From)>  { 
#line 979 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 981 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _To, class 
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_From> constexpr bool 
#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_trivially_assignable_v = __is_trivially_assignable(_To, _From); 
#line 986 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 987 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_trivially_copy_assignable : public bool_constant< __is_trivially_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 990 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 992 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_trivially_copy_assignable_v = __is_trivially_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_trivially_move_assignable : public bool_constant< __is_trivially_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1003 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_trivially_move_assignable_v = __is_trivially_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 1008 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1009 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_trivially_destructible : public bool_constant< __is_trivially_destructible(_Ty)>  { 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_trivially_destructible_v = __is_trivially_destructible(_Ty); 
#line 1019 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class ...
#line 1020 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Args> 
#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_nothrow_constructible : public bool_constant< __is_nothrow_constructible(_Ty, _Args...)>  { 
#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class ...
#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Args> constexpr bool 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_nothrow_constructible_v = __is_nothrow_constructible(_Ty, _Args...); 
#line 1031 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1032 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_nothrow_copy_constructible : public bool_constant< __is_nothrow_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_nothrow_copy_constructible_v = __is_nothrow_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 1042 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1043 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_nothrow_default_constructible : public bool_constant< __is_nothrow_constructible(_Ty)>  { 
#line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1048 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_nothrow_default_constructible_v = __is_nothrow_constructible(_Ty); 
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1053 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_nothrow_move_constructible : public bool_constant< __is_nothrow_constructible(_Ty, _Ty)>  { 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_nothrow_move_constructible_v = __is_nothrow_constructible(_Ty, _Ty); 
#line 1062 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _To, class 
#line 1063 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_From> 
#line 1064 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_nothrow_assignable : public bool_constant< __is_nothrow_assignable(_To, _From)>  { 
#line 1067 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _To, class 
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_From> constexpr bool 
#line 1071 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_nothrow_assignable_v = __is_nothrow_assignable(_To, _From); 
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_nothrow_copy_assignable : public bool_constant< __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_nothrow_copy_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 1085 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_nothrow_move_assignable : public bool_constant< __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 1089 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1092 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_nothrow_move_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 1095 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_nothrow_destructible : public bool_constant< __is_nothrow_destructible(_Ty)>  { 
#line 1099 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_nothrow_destructible_v = __is_nothrow_destructible(_Ty); 
#line 1105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma warning(push)
#pragma warning(disable: 4296)
template< class _Ty, bool 
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = is_integral_v< _Ty> > 
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Sign_base { 
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Uty = remove_cv_t< _Ty> ; 
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Signed = bool_constant< (((_Uty)(-1)) < ((_Uty)0))> ; 
#line 1113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Unsigned = bool_constant< (((_Uty)0) < ((_Uty)(-1)))> ; 
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma warning(pop)
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Sign_base< _Ty, false>  { 
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Signed = typename is_floating_point< _Ty> ::type; 
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Unsigned = false_type; 
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_signed : public _Sign_base< _Ty> ::_Signed { 
#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_signed_v = (is_signed< _Ty> ::value); 
#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_unsigned : public _Sign_base< _Ty> ::_Unsigned { 
#line 1139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_unsigned_v = (is_unsigned< _Ty> ::value); 
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using _Is_nonbool_integral = bool_constant< is_integral_v< _Ty>  && (!is_same_v< remove_cv_t< _Ty> , bool> )> ; 
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Change_sign { 
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
static_assert((_Is_nonbool_integral< _Ty> ::value || is_enum_v< _Ty> ), "make_signed<T>/make_unsigned<T> require that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool ty" "pe.");
#line 1158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Signed = conditional_t< _Is_any_of_v< _Ty, long, unsigned long> , long, conditional_t< sizeof(_Ty) == (1), signed char, conditional_t< sizeof(_Ty) == (2), short, conditional_t< sizeof(_Ty) == (4), int, __int64> > > > ; 
#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Unsigned = conditional_t< _Is_any_of_v< _Ty, long, unsigned long> , unsigned long, conditional_t< sizeof(_Ty) == (1), unsigned char, conditional_t< sizeof(_Ty) == (2), unsigned short, conditional_t< sizeof(_Ty) == (4), unsigned, unsigned __int64> > > > ; 
#line 1173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Change_sign< const _Ty>  { 
#line 1178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Signed = const typename std::_Change_sign< _Ty> ::_Signed; 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Unsigned = const typename std::_Change_sign< _Ty> ::_Unsigned; 
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Change_sign< volatile _Ty>  { 
#line 1185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Signed = volatile typename std::_Change_sign< _Ty> ::_Signed; 
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Unsigned = volatile typename std::_Change_sign< _Ty> ::_Unsigned; 
#line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Change_sign< const volatile _Ty>  { 
#line 1192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Signed = const volatile typename std::_Change_sign< _Ty> ::_Signed; 
#line 1193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Unsigned = const volatile typename std::_Change_sign< _Ty> ::_Unsigned; 
#line 1194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1197 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct make_signed { 
#line 1200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename _Change_sign< _Ty> ::_Signed; 
#line 1201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using make_signed_t = typename make_signed< _Ty> ::type; 
#line 1207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct make_unsigned { 
#line 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename _Change_sign< _Ty> ::_Unsigned; 
#line 1211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using make_unsigned_t = typename make_unsigned< _Ty> ::type; 
#line 1217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Rep >
 constexpr make_unsigned_t < _Rep > _Unsigned_value ( _Rep _Val )
 {
 return ( static_cast < make_unsigned_t < _Rep >> ( _Val ) );
 }
#line 1224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct alignment_of : public integral_constant< unsigned __int64, __alignof(_Ty)>  { 
#line 1228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr size_t 
#line 1231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
alignment_of_v = __alignof(_Ty); 
#line 1238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, size_t 
#line 1239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Len> 
#line 1240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
union _Align_type { 
#line 1242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty _Val; 
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
char _Pad[_Len]; 
#line 1244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Len, size_t 
#line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Align, class 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty, bool 
#line 1249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ok> struct _Aligned; 
#line 1252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Len, size_t 
#line 1253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Align, class 
#line 1254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty> 
#line 1255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Aligned< _Len, _Align, _Ty, true>  { 
#line 1257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _Align_type< _Ty, _Len> ; 
#line 1258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Len, size_t 
#line 1261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Align> 
#line 1262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Aligned< _Len, _Align, double, false>  { 
#line 1271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
static_assert((_Always_false< std::_Aligned< _Len, _Align, double, false> > ), "You\'ve instantiated std::aligned_storage<Len, Align> with an extended alignment (in other words, Align > alignof(max_align_t))." " Before VS 2017 15.8, the member type would non-conformingly have an alignment of only alignof(max_align_t). VS 2017 15.8 was fi" "xed to handle this correctly, but the fix inherently changes layout and breaks binary compatibility (*only* for uses of aligned_" "storage with extended alignments). Please define either (1) _ENABLE_EXTENDED_ALIGNED_STORAGE to acknowledge that you understand " "this message and that you actually want a type with an extended alignment, or (2) _DISABLE_EXTENDED_ALIGNED_STORAGE to silence t" "his message and get the old non-conformant behavior.");
#line 1283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _Align_type< max_align_t, _Len> ; 
#line 1285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Len, size_t 
#line 1288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Align> 
#line 1289 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Aligned< _Len, _Align, int, false>  { 
#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename std::_Aligned< _Len, _Align, double, _Align <= __alignof(double)> ::type; 
#line 1292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Len, size_t 
#line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Align> 
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Aligned< _Len, _Align, short, false>  { 
#line 1298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename std::_Aligned< _Len, _Align, int, _Align <= __alignof(int)> ::type; 
#line 1299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Len, size_t 
#line 1302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Align> 
#line 1303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Aligned< _Len, _Align, char, false>  { 
#line 1305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename std::_Aligned< _Len, _Align, short, _Align <= __alignof(short)> ::type; 
#line 1306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Len, size_t 
#line 1309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Align = 8Ui64> 
#line 1310 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct aligned_storage { 
#line 1312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = typename _Aligned< _Len, _Align, char, _Align <= __alignof(char)> ::type; 
#line 1313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Len, size_t 
#line 1319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Align = 8Ui64> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
#line 1323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t ..._Vals> struct _Maximum; 
#line 1327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template<> struct _Maximum< >  : public integral_constant< unsigned __int64, 0Ui64>  { 
#line 1330 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Val> 
#line 1333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Maximum< _Val>  : public integral_constant< unsigned __int64, _Val>  { 
#line 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _First, size_t 
#line 1339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Second, size_t ...
#line 1340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Rest> 
#line 1341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Maximum< _First, _Second, _Rest...>  : public std::_Maximum< (((_First) < _Second) ? _Second : _First), _Rest...> ::type { 
#line 1344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1346 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Len, class ...
#line 1347 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Types> 
#line 1348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct aligned_union { 
#line 1350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
static constexpr size_t _Max_len = (_Maximum< _Len, sizeof(_Types)...> ::value); 
#line 1351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
static constexpr size_t alignment_value = (_Maximum< __alignof(_Types)...> ::value); 
#line 1352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = aligned_storage_t< _Max_len, alignment_value> ; 
#line 1353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< size_t _Len, class ...
#line 1356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
#line 1360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct underlying_type { 
#line 1363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = __underlying_type(_Ty); 
#line 1364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using underlying_type_t = typename underlying_type< _Ty> ::type; 
#line 1370 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct rank : public integral_constant< unsigned __int64, 0Ui64>  { 
#line 1374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 1377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct rank< _Ty [_Ix]>  : public integral_constant< unsigned __int64, std::rank< _Ty> ::value + 1>  { 
#line 1380 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1382 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct rank< _Ty []>  : public integral_constant< unsigned __int64, std::rank< _Ty> ::value + 1>  { 
#line 1386 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr size_t 
#line 1389 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
rank_v = (rank< _Ty> ::value); 
#line 1392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, unsigned _Nx> 
#line 1393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Extent : public integral_constant< unsigned __int64, 0Ui64>  { 
#line 1396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 1399 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Extent< _Ty [_Ix], 0>  : public integral_constant< unsigned __int64, _Ix>  { 
#line 1402 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, unsigned _Nx, size_t _Ix> 
#line 1405 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Extent< _Ty [_Ix], _Nx>  : public std::_Extent< _Ty, _Nx - (1)>  { 
#line 1408 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1410 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, unsigned _Nx> 
#line 1411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Extent< _Ty [], _Nx>  : public std::_Extent< _Ty, _Nx - (1)>  { 
#line 1414 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, unsigned _Nx = 0U> 
#line 1417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct extent : public _Extent< _Ty, _Nx>  { 
#line 1420 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1422 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, unsigned 
#line 1423 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ix = 0U> constexpr size_t 
#line 1424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
extent_v = (extent< _Ty, _Ix> ::value); 
#line 1427 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Base, class 
#line 1428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Derived> 
#line 1429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct is_base_of : public bool_constant< __is_base_of(_Base, _Derived)>  { 
#line 1432 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1434 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Base, class 
#line 1435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Derived> constexpr bool 
#line 1436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
is_base_of_v = __is_base_of(_Base, _Derived); 
#line 1439 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct decay { 
#line 1442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Ty1 = remove_reference_t< _Ty> ; 
#line 1444 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = conditional_t< is_array_v< _Ty1> , add_pointer_t< remove_extent_t< _Ty1> > , conditional_t< is_function_v< _Ty1> , add_pointer_t< _Ty1> , remove_cv_t< _Ty1> > > ; 
#line 1449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using decay_t = typename decay< _Ty> ::type; 
#line 1455 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 1456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2, class 
#line 1457 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#line 1458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Decayed_cond_oper { 
#line 1460 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1462 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 1463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2> 
#line 1464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Decayed_cond_oper< _Ty1, _Ty2, void_t< decltype((false ? std::declval< _Ty1> () : std::declval< _Ty2> ()))> >  { 
#line 1466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = decay_t< decltype((false ? std::declval< _Ty1> () : std::declval< _Ty2> ()))> ; 
#line 1467 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1469 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ..._Ty> struct common_type; 
#line 1472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ..._Ty> using common_type_t = typename common_type< _Ty...> ::type; 
#line 1476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template<> struct common_type< >  { 
#line 1478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1> 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct common_type< _Ty1>  : public std::common_type< _Ty1, _Ty1>  { 
#line 1484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 1487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2, class 
#line 1488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Decayed1 = decay_t< _Ty1> , class 
#line 1489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Decayed2 = decay_t< _Ty2> > 
#line 1490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Common_type2 : public common_type< _Decayed1, _Decayed2>  { 
#line 1493 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 1496 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2> 
#line 1497 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Common_type2< _Ty1, _Ty2, _Ty1, _Ty2>  : public _Decayed_cond_oper< _Ty1, _Ty2>  { 
#line 1500 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 1503 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2> 
#line 1504 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct common_type< _Ty1, _Ty2>  : public _Common_type2< _Ty1, _Ty2>  { 
#line 1507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Void, class 
#line 1510 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty1, class 
#line 1511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2, class ...
#line 1512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Rest> 
#line 1513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Common_type3 { 
#line 1515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 1518 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2, class ...
#line 1519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Rest> 
#line 1520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Common_type3< void_t< common_type_t< _Ty1, _Ty2> > , _Ty1, _Ty2, _Rest...>  : public common_type< common_type_t< _Ty1, _Ty2> , _Rest...>  { 
#line 1523 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 1526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2, class ...
#line 1527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Rest> 
#line 1528 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct common_type< _Ty1, _Ty2, _Rest...>  : public _Common_type3< void, _Ty1, _Ty2, _Rest...>  { 
#line 1531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
 struct [ [ deprecated ( "warning STL4003: The non-Standard std::identity struct is deprecated and will be REMOVED. You can define _SILENCE_IDENTITY_STRUC" "T_DEPRECATION_WARNING to acknowledge that you have received this warning." ) ] ] identity
 {
 using type = _Ty;

 const _Ty & operator ( ) ( const _Ty & _Left ) const
  {
  return ( _Left );
  }
 };
#line 1548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 1549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Identity { 
#line 1551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = _Ty; 
#line 1552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1553 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> using _Identity_t = typename _Identity< _Ty> ::type; 
#line 1557 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Type, 
#line 1558 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ...>  class _Template> constexpr bool 
#line 1559 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Is_specialization_v = false; 
#line 1560 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< template< class ...>  class _Template, class ...
#line 1561 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Types> constexpr bool 
#line 1562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Is_specialization_v< _Template< _Types...> , _Template>  = true; 
#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Type, 
#line 1565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ...>  class _Template> 
#line 1566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_specialization : public bool_constant< _Is_specialization_v< _Type, _Template> >  { 
#line 1568 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr _Ty &&
#line 1572 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
forward(remove_reference_t< _Ty>  &_Arg) noexcept 
#line 1573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
{ 
#line 1574 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
return static_cast< _Ty &&>(_Arg); 
#line 1575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
} 
#line 1577 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr _Ty &&
#line 1578 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
forward(remove_reference_t< _Ty>  &&_Arg) noexcept 
#line 1579 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
{ 
#line 1580 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
static_assert((!is_lvalue_reference_v< _Ty> ), "bad forward call");
#line 1581 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
return static_cast< _Ty &&>(_Arg); 
#line 1582 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
} 
#line 1585 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr remove_reference_t< _Ty>  &&
#line 1587 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
move(_Ty &&_Arg) noexcept 
#line 1588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
{ 
#line 1589 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
return static_cast< remove_reference_t< _Ty>  &&>(_Arg); 
#line 1590 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
} 
#line 1593 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
  constexpr conditional_t < ! is_nothrow_move_constructible_v < _Ty > && is_copy_constructible_v < _Ty >,
  const _Ty &, _Ty && >
 move_if_noexcept ( _Ty & _Arg ) noexcept
 {
 return ( :: std :: move ( _Arg ) );
 }
#line 1601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
 class reference_wrapper;
#line 1771 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Callable, class ...
#line 1772 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Types> struct _Invoker; 
#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Callable,
 class ... _Types > inline
 auto invoke ( _Callable && _Obj, _Types && ... _Args )
 noexcept ( noexcept ( _Invoker < _Callable, _Types ... > :: _Call ( :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) ) )

 -> decltype ( _Invoker < _Callable, _Types ... > :: _Call (
  :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) );
#line 1783 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Unforced { 
#line 1785 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1788 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _To> void _Implicitly_convert_to(_To) noexcept; 
#line 1791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _From, class 
#line 1792 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_To, bool 
#line 1793 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = is_convertible_v< _From, _To> > 
#line 1794 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_nothrow_convertible : public bool_constant< noexcept(_Implicitly_convert_to< _To> (std::declval< _From> ()))>  { 
#line 1797 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1799 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _From, class 
#line 1800 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_To> 
#line 1801 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_nothrow_convertible< _From, _To, false>  : public false_type { 
#line 1804 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1806 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Void, class ...
#line 1807 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Types> 
#line 1808 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Invoke_traits { 
#line 1810 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Is_invocable = false_type; 
#line 1811 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Is_nothrow_invocable = false_type; 
#line 1812 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Rx> using _Is_invocable_r = false_type; 
#line 1814 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Rx> using _Is_nothrow_invocable_r = false_type; 
#line 1816 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1818 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class ..._Types> 
#line 1819 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Invoke_traits< void_t< decltype((std::invoke(std::declval< _Types> ()...)))> , _Types...>  { 
#line 1821 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = decltype((std::invoke(std::declval< _Types> ()...))); 
#line 1822 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Is_invocable = true_type; 
#line 1823 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Is_nothrow_invocable = bool_constant< noexcept(std::invoke(std::declval< _Types> ()...))> ; 
#line 1824 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Rx> using _Is_invocable_r = bool_constant< disjunction_v< is_void< _Rx> , is_convertible< type, _Rx> > > ; 
#line 1826 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Rx> using _Is_nothrow_invocable_r = bool_constant< conjunction_v< _Is_nothrow_invocable, disjunction< is_void< _Rx> , _Is_nothrow_convertible< type, _Rx> > > > ; 
#line 1830 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Fty> 
#line 1834 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct result_of { 
#line 1836 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
static_assert((_Always_false< _Fty> ), "result_of<CallableType> is invalid; use result_of<CallableType(zero or more argument types)> instead.");
#line 1839 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1849 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Callable, class ..._Args> struct result_of< _Callable __cdecl (_Args ...)>  : public _Invoke_traits< void, _Callable, _Args...>  { }; template< class _Callable, class ..._Args> struct result_of< _Callable __vectorcall (_Args ...)>  : public _Invoke_traits< void, _Callable, _Args...>  { }; 
#line 1852 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Ty> using result_of_t = typename result_of< _Ty> ::type; 
#line 1856 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma warning(pop)
#line 1858 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Callable, class ...
#line 1859 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Args> using _Invoke_result_t = typename _Invoke_traits< void, _Callable, _Args...> ::type; 
#line 1862 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Rx, class 
#line 1863 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Callable, class ...
#line 1864 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Args> using _Is_invocable_r_ = typename _Invoke_traits< void, _Callable, _Args...> ::template _Is_invocable_r< _Rx> ; 
#line 1867 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Rx, class 
#line 1868 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Callable, class ...
#line 1869 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Args> 
#line 1870 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_invocable_r : public _Is_invocable_r_< _Rx, _Callable, _Args...>  { 
#line 1873 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1945 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class 
#line 1946 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#line 1947 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Weak_result_type { 
#line 1949 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1951 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Ty> 
#line 1954 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Weak_result_type< _Ty, void_t< typename _Ty::result_type> >  { 
#line 1957 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef typename _Ty::result_type result_type; 
#line 1958 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma warning(pop)
#line 1961 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class 
#line 1962 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#line 1963 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Weak_argument_type : public _Weak_result_type< _Ty>  { 
#line 1966 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1968 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Ty> 
#line 1971 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Weak_argument_type< _Ty, void_t< typename _Ty::argument_type> >  : public _Weak_result_type< _Ty>  { 
#line 1975 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef typename _Ty::argument_type argument_type; 
#line 1976 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma warning(pop)
#line 1979 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class 
#line 1980 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#line 1981 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Weak_binary_args : public _Weak_argument_type< _Ty>  { 
#line 1984 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 1986 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Ty> 
#line 1989 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Weak_binary_args< _Ty, void_t< typename _Ty::first_argument_type, typename _Ty::second_argument_type> >  : public _Weak_argument_type< _Ty>  { 
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef typename _Ty::first_argument_type first_argument_type; 
#line 1995 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef typename _Ty::second_argument_type second_argument_type; 
#line 1996 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma warning(pop)
#line 1999 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 2000 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Weak_types { 
#line 2002 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Is_f_or_pf = _Is_function< remove_pointer_t< _Ty> > ; 
#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Is_pmf = _Is_memfunptr< remove_cv_t< _Ty> > ; 
#line 2004 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using type = conditional_t< _Is_function< remove_pointer_t< _Ty> > ::_Bool_type::value, _Is_f_or_pf, conditional_t< _Is_memfunptr< remove_cv_t< _Ty> > ::_Bool_type::value, _Is_pmf, _Weak_binary_args< _Ty> > > ; 
#line 2007 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2010 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> void _Refwrap_ctor_fun(_Identity_t< _Ty &> ) noexcept; 
#line 2012 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
 void _Refwrap_ctor_fun ( _Identity_t < _Ty && > ) = delete;
#line 2015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Unique_tag_refwrap_has_ctor_from { 
#line 2017 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2019 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class 
#line 2020 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Uty, class 
#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#line 2022 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Refwrap_has_ctor_from : public false_type { 
#line 2025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2027 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty, class 
#line 2028 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Uty> 
#line 2029 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Refwrap_has_ctor_from< _Ty, _Uty, void_t< _Unique_tag_refwrap_has_ctor_from, decltype((_Refwrap_ctor_fun< _Ty> (std::declval< _Uty> ())))> >  : public true_type { 
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2036 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
 class reference_wrapper
  : public _Weak_types < _Ty > :: type
 {
public :
 static_assert ( is_object_v < _Ty > || is_function_v < _Ty >,
  "reference_wrapper<T> requires T to be an object type or a function type." );

 using type = _Ty;

 template < class _Uty,
  enable_if_t < conjunction_v <
   negation < is_same < remove_cv_t < remove_reference_t < _Uty >>, reference_wrapper >>,
   _Refwrap_has_ctor_from < _Ty, _Uty >>, int > = 0 >
  reference_wrapper ( _Uty && _Val )
   noexcept ( noexcept ( _Refwrap_ctor_fun < _Ty > ( :: std :: declval < _Uty > ( ) ) ) )
   {
   _Ty & _Ref = :: std :: forward < _Uty > ( _Val );
   _Ptr = :: std :: addressof ( _Ref );
   }

 operator _Ty & ( ) const noexcept
  {
  return ( * _Ptr );
  }

  _Ty & get ( ) const noexcept
  {
  return ( * _Ptr );
  }

 template < class ... _Types >
  auto operator ( ) ( _Types && ... _Args ) const
  -> decltype ( :: std :: invoke ( get ( ), :: std :: forward < _Types > ( _Args ) ... ) )
  {
  return ( :: std :: invoke ( get ( ), :: std :: forward < _Types > ( _Args ) ... ) );
  }

private :
 _Ty * _Ptr;
 };
#line 2085 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
  inline reference_wrapper < _Ty > ref ( _Ty & _Val ) noexcept
 {
 return ( reference_wrapper < _Ty > ( _Val ) );
 }
#line 2091 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
 void ref ( const _Ty && ) = delete;
#line 2094 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
  inline reference_wrapper < _Ty > ref ( reference_wrapper < _Ty > _Val ) noexcept
 {
 return ( :: std :: ref ( _Val . get ( ) ) );
 }
#line 2100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
  inline reference_wrapper < const _Ty > cref ( const _Ty & _Val ) noexcept
 {
 return ( reference_wrapper < const _Ty > ( _Val ) );
 }
#line 2106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
 void cref ( const _Ty && ) = delete;
#line 2109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
  inline reference_wrapper < const _Ty > cref ( reference_wrapper < _Ty > _Val ) noexcept
 {
 return ( :: std :: cref ( _Val . get ( ) ) );
 }
#line 2116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> struct _Is_swappable; 
#line 2120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> struct _Is_nothrow_swappable; 
#line 2129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty,
 class = void > inline

 void swap ( _Ty &, _Ty & )
  noexcept ( is_nothrow_move_constructible_v < _Ty > && is_nothrow_move_assignable_v < _Ty > );
#line 2136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty,
 size_t _Size,
 class = enable_if_t < _Is_swappable < _Ty > :: value > > inline
 void swap ( _Ty ( & ) [ _Size ], _Ty ( & ) [ _Size ] )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value );
#line 2143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 2144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2, class 
#line 2145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#line 2146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Swappable_with_helper : public false_type { 
#line 2149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 2152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2> 
#line 2153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Swappable_with_helper< _Ty1, _Ty2, void_t< decltype((swap(std::declval< _Ty1> (), std::declval< _Ty2> ())))> >  : public true_type { 
#line 2156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 2160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2> 
#line 2161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_swappable_with : public bool_constant< conjunction_v< _Swappable_with_helper< _Ty1, _Ty2> , _Swappable_with_helper< _Ty2, _Ty1> > >  { 
#line 2167 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 2171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_swappable : public _Is_swappable_with< add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< _Ty> > ::type { 
#line 2176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 2180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2> 
#line 2181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Swap_cannot_throw : public bool_constant< noexcept(swap(std::declval< _Ty1> (), std::declval< _Ty2> ())) && noexcept(swap(std::declval< _Ty2> (), std::declval< _Ty1> ()))>  { 
#line 2187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty1, class 
#line 2191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Ty2> 
#line 2192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_nothrow_swappable_with : public bool_constant< conjunction_v< _Is_swappable_with< _Ty1, _Ty2> , _Swap_cannot_throw< _Ty1, _Ty2> > >  { 
#line 2198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 2202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_nothrow_swappable : public _Is_nothrow_swappable_with< add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< _Ty> > ::type { 
#line 2207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
namespace _Has_ADL_swap_detail { 
#line 2259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
void swap(); 
#line 2261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class , class 
#line 2262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#line 2263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Has_ADL_swap : public false_type { 
#line 2265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 2267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Has_ADL_swap< _Ty, void_t< decltype((swap(std::declval< _Ty &> (), std::declval< _Ty &> ())))> >  : public true_type { 
#line 2269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}
#line 2271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using _Has_ADL_swap_detail::_Has_ADL_swap;
#line 2273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> 
#line 2274 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_trivially_swappable : public bool_constant< conjunction_v< is_trivially_destructible< _Ty> , is_trivially_move_constructible< _Ty> , is_trivially_move_assignable< _Ty> , negation< _Has_ADL_swap_detail::_Has_ADL_swap< _Ty> > > >  { 
#line 2282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Is_trivially_swappable_v = (_Is_trivially_swappable< _Ty> ::value); 
#line 2343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
constexpr size_t _FNV_offset_basis = 14695981039346656037Ui64; 
#line 2344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
constexpr size_t _FNV_prime = 1099511628211Ui64; 
#line 2350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
inline size_t _Fnv1a_append_bytes(size_t _Val, const unsigned char *const 
#line 2351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_First, const size_t _Count) noexcept 
#line 2352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
{ 
#line 2353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
for (size_t _Idx = (0); _Idx < _Count; ++_Idx) 
#line 2354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
{ 
#line 2355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Val ^= (static_cast< size_t>(_First[_Idx])); 
#line 2356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Val *= _FNV_prime; 
#line 2357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}  
#line 2359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
return _Val; 
#line 2360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
} 
#line 2362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Ty >
  inline size_t _Fnv1a_append_range ( const size_t _Val,
  const _Ty * const _First, const _Ty * const _Last ) noexcept
 {
 static_assert ( is_trivial_v < _Ty >, "Only trivial types can be directly hashed." );
 const auto _Firstb = reinterpret_cast < const unsigned char * > ( _First );
 const auto _Lastb = reinterpret_cast < const unsigned char * > ( _Last );
 return ( _Fnv1a_append_bytes ( _Val, _Firstb, static_cast < size_t > ( _Lastb - _Firstb ) ) );
 }
#line 2372 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Kty >
  inline size_t _Fnv1a_append_value ( const size_t _Val, const _Kty & _Keyval ) noexcept
 {
 static_assert ( is_trivial_v < _Kty >, "Only trivial types can be directly hashed." );
 return ( _Fnv1a_append_bytes ( _Val,
  & reinterpret_cast < const unsigned char & > ( _Keyval ), sizeof ( _Kty ) ) );
 }
#line 2381 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Kty >
  inline size_t _Hash_representation ( const _Kty & _Keyval ) noexcept
 {
 return ( _Fnv1a_append_value ( _FNV_offset_basis, _Keyval ) );
 }
#line 2388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Kty >
  inline size_t _Hash_array_representation (
  const _Kty * const _First, const size_t _Count ) noexcept
 {
 static_assert ( is_trivial_v < _Kty >, "Only trivial types can be directly hashed." );
 return ( _Fnv1a_append_bytes ( _FNV_offset_basis,
  reinterpret_cast < const unsigned char * > ( _First ), _Count * sizeof ( _Kty ) ) );
 }
#line 2398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Kty >
 struct hash;
#line 2401 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Kty,
 bool _Enabled >
 struct _Conditionally_enabled_hash
 {
  typedef _Kty argument_type;
  typedef size_t result_type;

  size_t operator ( ) ( const _Kty & _Keyval ) const
  noexcept ( noexcept ( hash < _Kty > :: _Do_hash ( _Keyval ) ) )
  {
  return ( hash < _Kty > :: _Do_hash ( _Keyval ) );
  }
 };
#line 2415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Kty> 
#line 2416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Conditionally_enabled_hash< _Kty, false>  { 
#line 2418 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Conditionally_enabled_hash() = delete;
#line 2419 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Conditionally_enabled_hash(const std::_Conditionally_enabled_hash< _Kty, false>  &) = delete;
#line 2420 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
_Conditionally_enabled_hash(std::_Conditionally_enabled_hash< _Kty, false>  &&) = delete;
#line 2421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
std::_Conditionally_enabled_hash< _Kty, false>  &operator=(const std::_Conditionally_enabled_hash< _Kty, false>  &) = delete;
#line 2422 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
std::_Conditionally_enabled_hash< _Kty, false>  &operator=(std::_Conditionally_enabled_hash< _Kty, false>  &&) = delete;
#line 2423 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 2426 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class _Kty >
 struct hash
  : _Conditionally_enabled_hash < _Kty, ! is_const_v < _Kty > && ! is_volatile_v < _Kty >
   && ( is_enum_v < _Kty > || is_integral_v < _Kty > || is_pointer_v < _Kty > ) >
 {
 static size_t _Do_hash ( const _Kty & _Keyval ) noexcept
  {
  return ( _Hash_representation ( _Keyval ) );
  }
 };
#line 2438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma pack(8)
template<> 
#line 2438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct hash< float>  { 
#line 2440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef float argument_type; 
#line 2441 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef size_t result_type; 
#line 2442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
size_t operator()(const float _Keyval) const noexcept 
#line 2443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
{ 
#line 2444 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
return _Hash_representation((_Keyval == (0.0F)) ? (0.0F) : _Keyval); 
#line 2445 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
} 
#line 2446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma pack()
#line 2449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma pack(8)
template<> 
#line 2449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct hash< double>  { 
#line 2451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef double argument_type; 
#line 2452 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef size_t result_type; 
#line 2453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
size_t operator()(const double _Keyval) const noexcept 
#line 2454 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
{ 
#line 2455 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
return _Hash_representation((_Keyval == (0.0)) ? (0.0) : _Keyval); 
#line 2456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
} 
#line 2457 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma pack()
#line 2460 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma pack(8)
template<> 
#line 2460 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct hash< long double>  { 
#line 2462 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef long double argument_type; 
#line 2463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef size_t result_type; 
#line 2464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
size_t operator()(const long double _Keyval) const noexcept 
#line 2465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
{ 
#line 2466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
return _Hash_representation((_Keyval == (0.0L)) ? (0.0L) : _Keyval); 
#line 2467 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
} 
#line 2468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma pack()
#line 2471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma pack(8)
template<> 
#line 2471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct hash< std::nullptr_t>  { 
#line 2473 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef nullptr_t argument_type; 
#line 2474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
typedef size_t result_type; 
#line 2475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
size_t operator()(nullptr_t) const noexcept 
#line 2476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
{ 
#line 2477 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
void *_Null{((void *)0i64)}; 
#line 2478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
return _Hash_representation(_Null); 
#line 2479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
} 
#line 2480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma pack()
#line 2483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Kty, class 
#line 2484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = void> 
#pragma pack(8)
#line 2485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_nothrow_hashable : public false_type { 
#line 2488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma pack()
template< class _Kty> 
#pragma pack(8)
#line 2491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Is_nothrow_hashable< _Kty, void_t< decltype((hash< _Kty> {}(std::declval< const _Kty &> ())))> >  : public bool_constant< noexcept(hash< _Kty> {}(std::declval< const _Kty &> ()))>  { 
#line 2494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma pack()
#line 2497 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma warning(push)
#pragma warning(disable: 4996)
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 { 
#line 2500 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::add_const;
#line 2501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::add_cv;
#line 2502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::add_pointer;
#line 2503 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::add_volatile;
#line 2504 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::aligned_storage;
#line 2505 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::alignment_of;
#line 2506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::conditional;
#line 2507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::decay;
#line 2508 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::enable_if;
#line 2509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::extent;
#line 2510 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::false_type;
#line 2511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::has_virtual_destructor;
#line 2512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::integral_constant;
#line 2513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_abstract;
#line 2514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_arithmetic;
#line 2515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_array;
#line 2516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_base_of;
#line 2517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_class;
#line 2518 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_compound;
#line 2519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_const;
#line 2520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_convertible;
#line 2521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_empty;
#line 2522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_enum;
#line 2523 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_floating_point;
#line 2524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_function;
#line 2525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_fundamental;
#line 2526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_integral;
#line 2527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_member_function_pointer;
#line 2528 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_member_object_pointer;
#line 2529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_member_pointer;
#line 2530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_object;
#line 2531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_pod;
#line 2532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_pointer;
#line 2533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_polymorphic;
#line 2534 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_reference;
#line 2535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_same;
#line 2536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_scalar;
#line 2537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_signed;
#line 2538 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_union;
#line 2539 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_unsigned;
#line 2540 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_void;
#line 2541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::is_volatile;
#line 2542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::make_signed;
#line 2543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::make_unsigned;
#line 2544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::rank;
#line 2545 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::remove_all_extents;
#line 2546 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::remove_const;
#line 2547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::remove_cv;
#line 2548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::remove_extent;
#line 2549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::remove_pointer;
#line 2550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::remove_reference;
#line 2551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::remove_volatile;
#line 2552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::true_type;
#line 2553 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::cref;
#line 2554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::ref;
#line 2555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::reference_wrapper;
#line 2556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::result_of;
#line 2557 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
using std::hash;
#line 2558 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}
#pragma warning(pop)
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma pack(8)
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Invoker_pmf_object { template < class _Decayed, class _Ty1, class ... _Types2 > static inline auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept ( noexcept ( ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmf ) ( :: std :: forward < _Types2 > ( _Args2 ) ... ) ) ) -> decltype ( ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmf ) ( :: std :: forward < _Types2 > ( _Args2 ) ... ) ) { return ( ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmf ) ( :: std :: forward < _Types2 > ( _Args2 ) ... ) ); }}; 
#pragma pack(8)
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Invoker_pmf_refwrap { template < class _Decayed, class _Ty1, class ... _Types2 > static inline auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept ( noexcept ( ( :: std :: forward < _Ty1 > ( _Arg1 ) . get ( ) .* _Pmf ) ( :: std :: forward < _Types2 > ( _Args2 ) ... ) ) ) -> decltype ( ( :: std :: forward < _Ty1 > ( _Arg1 ) . get ( ) .* _Pmf ) ( :: std :: forward < _Types2 > ( _Args2 ) ... ) ) { return ( ( :: std :: forward < _Ty1 > ( _Arg1 ) . get ( ) .* _Pmf ) ( :: std :: forward < _Types2 > ( _Args2 ) ... ) ); }}; struct _Invoker_pmf_pointer { template < class _Decayed, class _Ty1, class ... _Types2 > static inline auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept ( noexcept ( ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmf ) ( :: std :: forward < _Types2 > ( _Args2 ) ... ) ) ) -> decltype ( ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmf ) ( :: std :: forward < _Types2 > ( _Args2 ) ... ) ) { return ( ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmf ) ( :: std :: forward < _Types2 > ( _Args2 ) ... ) ); }}; struct _Invoker_pmd_object { template < class _Decayed, class _Ty1 > static inline auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 ) noexcept ( noexcept ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmd ) ) -> decltype ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmd ) { return ( :: std :: forward < _Ty1 > ( _Arg1 ) .* _Pmd ); }}; struct _Invoker_pmd_refwrap { template < class _Decayed, class _Ty1 > static inline auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 ) noexcept ( noexcept ( :: std :: forward < _Ty1 > ( _Arg1 ) . get ( ) .* _Pmd ) ) -> decltype ( :: std :: forward < _Ty1 > ( _Arg1 ) . get ( ) .* _Pmd ) { return ( :: std :: forward < _Ty1 > ( _Arg1 ) . get ( ) .* _Pmd ); }}; struct _Invoker_pmd_pointer { template < class _Decayed, class _Ty1 > static inline auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 ) noexcept ( noexcept ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmd ) ) -> decltype ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmd ) { return ( ( * :: std :: forward < _Ty1 > ( _Arg1 ) ) .* _Pmd ); }}; struct _Invoker_functor { template < class _Callable, class ... _Types > static inline auto _Call ( _Callable && _Obj, _Types && ... _Args ) noexcept ( noexcept ( :: std :: forward < _Callable > ( _Obj ) ( :: std :: forward < _Types > ( _Args ) ... ) ) ) -> decltype ( :: std :: forward < _Callable > ( _Obj ) ( :: std :: forward < _Types > ( _Args ) ... ) ) { return ( :: std :: forward < _Callable > ( _Obj ) ( :: std :: forward < _Types > ( _Args ) ... ) ); }}; template< class _Callable, class _Ty1, class _Removed_cvref = remove_cv_t< remove_reference_t< _Callable> > , bool _Is_pmf = is_member_function_pointer_v< _Removed_cvref> , bool _Is_pmd = is_member_object_pointer_v< _Removed_cvref> > struct _Invoker1; template< class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1< _Callable, _Ty1, _Removed_cvref, true, false>  : public conditional_t< is_base_of_v< typename _Is_memfunptr< _Removed_cvref> ::_Class_type, remove_reference_t< _Ty1> > , _Invoker_pmf_object, conditional_t< _Is_specialization_v< remove_cv_t< remove_reference_t< _Ty1> > , reference_wrapper> , _Invoker_pmf_refwrap, _Invoker_pmf_pointer> >  { }; template< class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1< _Callable, _Ty1, _Removed_cvref, false, true>  : public conditional_t< is_base_of_v< typename _Is_member_object_pointer< _Removed_cvref> ::_Class_type, remove_reference_t< _Ty1> > , _Invoker_pmd_object, conditional_t< _Is_specialization_v< remove_cv_t< remove_reference_t< _Ty1> > , reference_wrapper> , _Invoker_pmd_refwrap, _Invoker_pmd_pointer> >  { }; template< class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1< _Callable, _Ty1, _Removed_cvref, false, false>  : public _Invoker_functor { }; template< class _Callable, class ..._Types> struct _Invoker; template< class _Callable> struct _Invoker< _Callable>  : public _Invoker_functor { }; template< class _Callable, class _Ty1, class ..._Types2> struct _Invoker< _Callable, _Ty1, _Types2...>  : public _Invoker1< _Callable, _Ty1>  { }; template < class _Callable, class ... _Types > inline auto invoke ( _Callable && _Obj, _Types && ... _Args ) noexcept ( noexcept ( _Invoker < _Callable, _Types ... > :: _Call ( :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) ) ) -> decltype ( _Invoker < _Callable, _Types ... > :: _Call ( :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) ) { return ( _Invoker < _Callable, _Types ... > :: _Call ( :: std :: forward < _Callable > ( _Obj ), :: std :: forward < _Types > ( _Args ) ... ) ); }
#line 16707578 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template< class _Rx, bool 
#line 16707579 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 = is_void_v< _Rx> > 
#pragma pack(8)
#line 16707580 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Invoker_ret { 
#line 16707582 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma pack()
template< class _Cv_void> 
#pragma pack(8)
#line 16707585 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Invoker_ret< _Cv_void, true>  { 
#line 16707587 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class ... _Valtys >
  static void _Call ( _Valtys && ... _Vals )



  {



  :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... );



  }
#line 15732481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#pragma pack(8)
template< class _Rx> 
#line 15732484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Invoker_ret< _Rx, false>  { 
#line 15732486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class ... _Valtys >
  static _Rx _Call ( _Valtys && ... _Vals )



  {



  return ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) );



  }
#line 15732481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 15732484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template<> struct _Invoker_ret< _Unforced, false>  { 
#line 15732486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
template < class ... _Valtys >
  static auto _Call ( _Valtys && ... _Vals )
  -> decltype ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) )



  {



  return ( :: std :: invoke ( :: std :: forward < _Valtys > ( _Vals ) ... ) );



  }
#line 15732481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}; 
#line 15732483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
}
#line 15732487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#pragma warning(pop)
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
namespace std { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
bool __cdecl uncaught_exception() noexcept; 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
int __cdecl uncaught_exceptions() noexcept; 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
}
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
typedef 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
struct _heapinfo { 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
int *_pentry; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
size_t _size; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
int _useflag; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
} _HEAPINFO; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
void *__cdecl _alloca(size_t _Size); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
intptr_t __cdecl _get_heap_handle(); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
int __cdecl _heapmin(); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
int __cdecl _heapwalk(_HEAPINFO * _EntryInfo); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
int __cdecl _heapchk(); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
int __cdecl _resetstkoflw(); 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
typedef char __static_assert_t[(sizeof(unsigned) <= (16)) != 0]; 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable:6540)
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
__inline void *_MarkAllocaS(void *_Ptr, unsigned _Marker) 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
{ 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
if (_Ptr) 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
{ 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
(*((unsigned *)_Ptr)) = _Marker; 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
_Ptr = (((char *)_Ptr) + 16); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
}  
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
return _Ptr; 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
} 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
__inline size_t _MallocaComputeSize(size_t _Size) 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
{ 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
size_t _MarkedSize = _Size + (16); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
return (_MarkedSize > _Size) ? _MarkedSize : (0); 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
} 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6014)
__inline void __cdecl _freea(void *_Memory) 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
{ 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
unsigned _Marker; 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
if (_Memory) 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
{ 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
_Memory = (((char *)_Memory) - 16); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
_Marker = (*((unsigned *)_Memory)); 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
if (_Marker == (56797)) 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
{ 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
free(_Memory); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
} else { 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
if (_Marker != (52428)) 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
{ 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
(void)0; 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
}  }  
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
}  
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
} 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
}
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\malloc.h"
__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_terminate.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_terminate.h"
typedef void (__cdecl *terminate_handler)(void); 
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_terminate.h"
typedef void (__cdecl *terminate_function)(void); 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_terminate.h"
__declspec(noreturn) void __cdecl abort(); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_terminate.h"
__declspec(noreturn) void __cdecl terminate() throw(); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_terminate.h"
terminate_handler __cdecl set_terminate(terminate_handler _NewTerminateHandler) throw(); 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_terminate.h"
terminate_handler __cdecl _get_terminate(); 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_terminate.h"
}__pragma(pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
typedef void (__cdecl *unexpected_handler)(void); 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
typedef void (__cdecl *unexpected_function)(void); 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
struct _EXCEPTION_POINTERS; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
__declspec(noreturn) void __cdecl unexpected() noexcept(false); 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
unexpected_handler __cdecl set_unexpected(unexpected_handler _NewUnexpectedHandler) noexcept; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
unexpected_handler __cdecl _get_unexpected() noexcept; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
typedef void (__cdecl *_se_translator_function)(unsigned, _EXCEPTION_POINTERS *); 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
_se_translator_function __cdecl _set_se_translator(_se_translator_function _NewSETranslator); 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
class type_info; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
int __cdecl _is_exception_typeof(const type_info & _Type, _EXCEPTION_POINTERS * _ExceptionPtr); 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
bool __cdecl __uncaught_exception(); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
int __cdecl __uncaught_exceptions(); 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
#pragma pack ( push, 8 )
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
struct __std_exception_data { 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
const char *_What; 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
bool _DoFree; 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
}; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
void __cdecl __std_exception_copy(const __std_exception_data * _From, __std_exception_data * _To); 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
void __cdecl __std_exception_destroy(__std_exception_data * _Data); 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
}__pragma(pack ( pop )) 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
namespace std { 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
#pragma warning(push)
#pragma warning(disable: 4577)
class exception { 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
public: exception() noexcept : _Data() 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
explicit exception(const char *const _Message) noexcept : _Data() 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
__std_exception_data _InitData = {_Message, true}; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
__std_exception_copy(&_InitData, &(_Data)); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
exception(const char *const _Message, int) noexcept : _Data() 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
((_Data)._What) = _Message; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
exception(const exception &_Other) noexcept : _Data() 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
exception &operator=(const exception &_Other) noexcept 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
if (this == (&_Other)) 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
return *this; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
}  
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
__std_exception_destroy(&(_Data)); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
return *this; 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
virtual ~exception() noexcept 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
__std_exception_destroy(&(_Data)); 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
virtual const char *what() const 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
return ((_Data)._What) ? (_Data)._What : ("Unknown exception"); 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
private: __std_exception_data _Data; 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
}; 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
class bad_exception : public exception { 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
public: bad_exception() noexcept : exception("bad exception", 1) 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
}; 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
class bad_alloc : public exception { 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
public: bad_alloc() noexcept : exception("bad allocation", 1) 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
friend class bad_array_new_length; 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
private: bad_alloc(const char *const _Message) noexcept : exception(_Message, 1) 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
}; 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
class bad_array_new_length : public bad_alloc { 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
public: bad_array_new_length() noexcept : bad_alloc("bad array new length") 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
{ 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
} 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
}; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
#pragma warning(pop)
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
}
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
#pragma pack ( pop )
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
namespace std { 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
using ::terminate;
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
using ::set_terminate;
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
using ::terminate_handler;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
inline terminate_handler __cdecl get_terminate() noexcept 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return _get_terminate(); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
using ::unexpected;
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
using ::set_unexpected;
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
using ::unexpected_handler;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
inline unexpected_handler __cdecl get_unexpected() noexcept 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return _get_unexpected(); 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
}
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
void __cdecl __ExceptionPtrCreate(void *); 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
void __cdecl __ExceptionPtrDestroy(void *); 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
void __cdecl __ExceptionPtrCopy(void *, const void *); 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
void __cdecl __ExceptionPtrAssign(void *, const void *); 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
bool __cdecl __ExceptionPtrCompare(const void *, const void *); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
bool __cdecl __ExceptionPtrToBool(const void *); 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
void __cdecl __ExceptionPtrSwap(void *, void *); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
void __cdecl __ExceptionPtrCurrentException(void *); 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
[[noreturn]] void __cdecl __ExceptionPtrRethrow(const void *); 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
void __cdecl __ExceptionPtrCopyException(void *, const void *, const void *); 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
namespace std { 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
class exception_ptr { 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
public: exception_ptr() noexcept 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
__ExceptionPtrCreate(this); 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
exception_ptr(nullptr_t) noexcept 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
__ExceptionPtrCreate(this); 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
~exception_ptr() noexcept 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
__ExceptionPtrDestroy(this); 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
exception_ptr(const exception_ptr &_Rhs) noexcept 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
__ExceptionPtrCopy(this, &_Rhs); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
exception_ptr &operator=(const exception_ptr &_Rhs) noexcept 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
__ExceptionPtrAssign(this, &_Rhs); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return *this; 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
exception_ptr &operator=(nullptr_t) noexcept 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
exception_ptr _Ptr; 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
__ExceptionPtrAssign(this, &_Ptr); 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return *this; 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
explicit operator bool() const noexcept 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return __ExceptionPtrToBool(this); 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
[[noreturn]] void _RethrowException() const 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
__ExceptionPtrRethrow(this); 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
static exception_ptr _Current_exception() noexcept 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
exception_ptr _Retval; 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
__ExceptionPtrCurrentException(&_Retval); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return _Retval; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
static exception_ptr _Copy_exception(void *_Except, const void *_Ptr) 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
exception_ptr _Retval; 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
if (!_Ptr) 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return _Retval; 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
}  
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
__ExceptionPtrCopyException(&_Retval, _Except, _Ptr); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return _Retval; 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
private: void *_Data1; 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
void *_Data2; 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
}; 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
inline void swap(exception_ptr &_Lhs, exception_ptr &_Rhs) noexcept 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
__ExceptionPtrSwap(&_Lhs, &_Rhs); 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
inline bool operator==(const exception_ptr &_Lhs, const exception_ptr &_Rhs) noexcept 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return __ExceptionPtrCompare(&_Lhs, &_Rhs); 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
inline bool operator==(nullptr_t, const exception_ptr &_Rhs) noexcept 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return !_Rhs; 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
inline bool operator==(const exception_ptr &_Lhs, nullptr_t) noexcept 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return !_Lhs; 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
inline bool operator!=(const exception_ptr &_Lhs, const exception_ptr &_Rhs) noexcept 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return !((_Lhs == _Rhs)); 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
inline bool operator!=(nullptr_t _Lhs, const exception_ptr &_Rhs) noexcept 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return !((_Lhs == _Rhs)); 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
inline bool operator!=(const exception_ptr &_Lhs, nullptr_t _Rhs) noexcept 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return !((_Lhs == _Rhs)); 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
inline exception_ptr current_exception() noexcept 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return exception_ptr::_Current_exception(); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
[[noreturn]] inline void rethrow_exception(exception_ptr _Ptr) 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
_Ptr._RethrowException(); 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
template< class _Ex> void *__GetExceptionInfo(_Ex); 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
template < class _Ex > exception_ptr make_exception_ptr ( _Ex _Except ) noexcept
 {
 return exception_ptr :: _Copy_exception ( :: std :: addressof ( _Except ), __GetExceptionInfo ( _Except ) );
 }
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
class nested_exception { 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
public: nested_exception() noexcept : _Exc(::std::current_exception()) 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
nested_exception(const nested_exception &) noexcept = default;
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
nested_exception &operator=(const nested_exception &) noexcept = default;
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
virtual ~nested_exception() noexcept 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
[[noreturn]] void rethrow_nested() const 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
if ((_Exc)) { 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
::std::rethrow_exception(_Exc); } else { 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
::std::terminate(); }  
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
exception_ptr nested_ptr() const noexcept 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
{ 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
return _Exc; 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
} 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
private: exception_ptr _Exc; 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
}; 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
template < class _Ty,
 class _Uty >
 struct _With_nested
  : _Uty, nested_exception
 {
 explicit _With_nested ( _Ty && _Arg )
  : _Uty ( :: std :: forward < _Ty > ( _Arg ) ), nested_exception ( )
  {
  }
 };
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
template < class _Ty >
 [ [ noreturn ] ] inline void _Throw_with_nested ( _Ty && _Arg, true_type )
 {
 using _Uty = decay_t < _Ty >;
 using _Glued = _With_nested < _Ty, _Uty >;

 throw _Glued ( :: std :: forward < _Ty > ( _Arg ) );
 }
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
template < class _Ty >
 [ [ noreturn ] ] inline void _Throw_with_nested ( _Ty && _Arg, false_type )
 {
 throw :: std :: forward < _Ty > ( _Arg );
 }
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
template < class _Ty >
 [ [ noreturn ] ] inline void throw_with_nested ( _Ty && _Arg )
 {
 typedef decay_t < _Ty > _Uty;

 bool_constant <
  is_class_v < _Uty >
  && ! is_base_of_v < nested_exception, _Uty >
  && ! is_final_v < _Uty >> _Tag;

 _Throw_with_nested ( :: std :: forward < _Ty > ( _Arg ), _Tag );
 }
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
template < class _Ty > inline
 void _Rethrow_if_nested ( const _Ty * _Ptr, true_type )
 {
 const auto _Nested = dynamic_cast < const nested_exception * > ( _Ptr );

 if ( _Nested )
  _Nested -> rethrow_nested ( );
 }
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
template < class _Ty > inline
 void _Rethrow_if_nested ( const _Ty *, false_type )
 {
 }
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
template < class _Ty > inline
 void rethrow_if_nested ( const _Ty & _Arg )
 {
 bool_constant < is_polymorphic_v < _Ty > && ( ! is_base_of_v < nested_exception, _Ty >
  || is_convertible_v < _Ty *, nested_exception * > ) > _Tag;

 _Rethrow_if_nested ( :: std :: addressof ( _Arg ), _Tag );
 }
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
}
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
#pragma warning(pop)
#pragma pack ( pop )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef signed char int8_t; 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef short int16_t; 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef int int32_t; 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef __int64 int64_t; 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned char uint8_t; 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned short uint16_t; 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned uint32_t; 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned __int64 uint64_t; 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef signed char int_least8_t; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef short int_least16_t; 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef int int_least32_t; 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef __int64 int_least64_t; 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned char uint_least8_t; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned short uint_least16_t; 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned uint_least32_t; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned __int64 uint_least64_t; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef signed char int_fast8_t; 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef int int_fast16_t; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef int int_fast32_t; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef __int64 int_fast64_t; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned char uint_fast8_t; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned uint_fast16_t; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned uint_fast32_t; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned __int64 uint_fast64_t; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef __int64 intmax_t; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"
typedef unsigned __int64 uintmax_t; 
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int8_t;using ::int16_t;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int32_t;using ::int64_t;
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint8_t;using ::uint16_t;
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint32_t;using ::uint64_t;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int_least8_t;using ::int_least16_t;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int_least32_t;using ::int_least64_t;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint_least8_t;using ::uint_least16_t;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint_least32_t;using ::uint_least64_t;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int_fast8_t;using ::int_fast16_t;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int_fast32_t;using ::int_fast64_t;
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint_fast8_t;using ::uint_fast16_t;
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint_fast32_t;using ::uint_fast64_t;
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::intmax_t;using ::intptr_t;
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uintmax_t;using ::uintptr_t;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 { 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int8_t;using ::int16_t;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int32_t;using ::int64_t;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint8_t;using ::uint16_t;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint32_t;using ::uint64_t;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int_least8_t;using ::int_least16_t;
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int_least32_t;using ::int_least64_t;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint_least8_t;using ::uint_least16_t;
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint_least32_t;using ::uint_least64_t;
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int_fast8_t;using ::int_fast16_t;
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::int_fast32_t;using ::int_fast64_t;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint_fast8_t;using ::uint_fast16_t;
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uint_fast32_t;using ::uint_fast64_t;
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::intmax_t;using ::intptr_t;
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
using ::uintmax_t;using ::uintptr_t;
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
}
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
}
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
#pragma warning(pop)
#pragma pack ( pop )
#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
void __cdecl _Feraise(int); 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
typedef 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
union { 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
unsigned short _Word[8]; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
float _Float; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
double _Double; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
long double _Long_double; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
} _Dconst; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
double __cdecl _Cosh(double, double); 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
short __cdecl _Dtest(double *); 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
double __cdecl _Sinh(double, double); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
short __cdecl _Exp(double *, double, short); 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
extern _Dconst _Denorm, _Hugeval, _Inf, 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
_Nan, _Snan; 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
float __cdecl _FCosh(float, float); 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
short __cdecl _FDtest(float *); 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
float __cdecl _FSinh(float, float); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
short __cdecl _FExp(float *, float, short); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
extern _Dconst _FDenorm, _FInf, _FNan, _FSnan; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
long double __cdecl _LCosh(long double, long double); 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
short __cdecl _LDtest(long double *); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
long double __cdecl _LSinh(long double, long double); 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
short __cdecl _LExp(long double *, long double, short); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
extern _Dconst _LDenorm, _LInf, _LNan, _LSnan; 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
}
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
unsigned __cdecl _clearfp(); 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
unsigned __cdecl _controlfp(unsigned _NewValue, unsigned _Mask); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
#pragma warning(pop)
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
void __cdecl _set_controlfp(unsigned _NewValue, unsigned _Mask); 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
errno_t __cdecl _controlfp_s(unsigned * _CurrentState, unsigned _NewValue, unsigned _Mask); 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
unsigned __cdecl _statusfp(); 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
void __cdecl _fpreset(); 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
unsigned __cdecl _control87(unsigned _NewValue, unsigned _Mask); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
int *__cdecl __fpecode(); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
int __cdecl __fpe_flt_rounds(); 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
double __cdecl _copysign(double _Number, double _Sign); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
double __cdecl _chgsign(double _X); 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
double __cdecl _scalb(double _X, long _Y); 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
double __cdecl _logb(double _X); 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
double __cdecl _nextafter(double _X, double _Y); 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
int __cdecl _finite(double _X); 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
int __cdecl _isnan(double _X); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
int __cdecl _fpclass(double _X); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
float __cdecl _scalbf(float _X, long _Y); 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
void __cdecl fpreset(); 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\float.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
errno_t __cdecl _cgetws_s(__wchar_t * _Buffer, size_t _BufferCount, size_t * _SizeRead); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _cgetws_s ( wchar_t ( & _Buffer ) [ _Size ], size_t * _SizeRead ) throw ( ) { return _cgetws_s ( _Buffer, _Size, _SizeRead ); }}
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int __cdecl _cputws(const __wchar_t * _Buffer); 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _getwch(); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _getwche(); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _putwch(__wchar_t _Character); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _ungetwch(wint_t _Character); 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _getwch_nolock(); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _getwche_nolock(); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _putwch_nolock(__wchar_t _Character); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _ungetwch_nolock(wint_t _Character); 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int __cdecl __conio_common_vcwprintf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int __cdecl __conio_common_vcwprintf_s(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int __cdecl __conio_common_vcwprintf_p(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_l(const __wchar_t *const 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf(const __wchar_t *const 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_l(_Format, 0, _ArgList); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s_l(const __wchar_t *const 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf_s(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s(const __wchar_t *const 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p_l(const __wchar_t *const 
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf_p(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p(const __wchar_t *const 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_l(const __wchar_t *const 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_l(_Format, _Locale, _ArgList); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf(const __wchar_t *const 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_l(_Format, 0, _ArgList); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s_l(const __wchar_t *const 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_s_l(_Format, _Locale, _ArgList); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s(const __wchar_t *const 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p_l(const __wchar_t *const 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_p_l(_Format, _Locale, _ArgList); 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p(const __wchar_t *const 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int __cdecl __conio_common_vcwscanf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_l(const __wchar_t *const 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwscanf(*__local_stdio_scanf_options(), _Format, _Locale, _ArgList); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf(const __wchar_t *const 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vcwscanf_l(_Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s_l(const __wchar_t *const 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Format, _Locale, _ArgList); 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s(const __wchar_t *const 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_l(const __wchar_t *const 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vcwscanf_l(_Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf(const __wchar_t *const 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vcwscanf_l(_Format, 0, _ArgList); 
#pragma warning(pop)
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s_l(const __wchar_t *const 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)((__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> ()), ((void)__va_start(&_ArgList, _Locale))); 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwscanf_s_l(_Format, _Locale, _ArgList); 
#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s(const __wchar_t *const 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
{ 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)((__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> ()), ((void)__va_start(&_ArgList, _Format))); 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
} 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wconio.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
const unsigned short *__cdecl __pctype_func(); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
const wctype_t *__cdecl __pwctype_func(); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswalnum(wint_t _C); 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswalpha(wint_t _C); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswascii(wint_t _C); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswblank(wint_t _C); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswcntrl(wint_t _C); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswdigit(wint_t _C); 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswgraph(wint_t _C); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswlower(wint_t _C); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswprint(wint_t _C); 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswpunct(wint_t _C); 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswspace(wint_t _C); 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswupper(wint_t _C); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswxdigit(wint_t _C); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl __iswcsymf(wint_t _C); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl __iswcsym(wint_t _C); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswblank_l(wint_t _C, _locale_t _Locale); 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale); 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale); 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale); 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale); 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale); 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
wint_t __cdecl towupper(wint_t _C); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
wint_t __cdecl towlower(wint_t _C); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswctype(wint_t _C, wctype_t _Type); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale); 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl isleadbyte(int _C); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
int __cdecl _isleadbyte_l(int _C, _locale_t _Locale); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instea" "d. See online help for details.")) int __cdecl is_wctype(wint_t _C, wctype_t _Type); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wctype.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h"
__declspec(allocator) __wchar_t *__cdecl _wgetcwd(__wchar_t * _DstBuf, int _SizeInWords); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h"
__declspec(allocator) __wchar_t *__cdecl _wgetdcwd(int _Drive, __wchar_t * _DstBuf, int _SizeInWords); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h"
int __cdecl _wchdir(const __wchar_t * _Path); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h"
int __cdecl _wmkdir(const __wchar_t * _Path); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h"
int __cdecl _wrmdir(const __wchar_t * _Path); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wdirect.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
#pragma warning(push)
#pragma warning(disable:4820)
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
typedef unsigned long _fsize_t; 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
struct _wfinddata32_t { 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time32_t time_create; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time32_t time_access; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time32_t time_write; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
_fsize_t size; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
}; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
struct _wfinddata32i64_t { 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time32_t time_create; 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time32_t time_access; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time32_t time_write; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__int64 size; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
}; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
struct _wfinddata64i32_t { 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time64_t time_create; 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time64_t time_access; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time64_t time_write; 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
_fsize_t size; 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
}; 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
struct _wfinddata64_t { 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time64_t time_create; 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time64_t time_access; 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__time64_t time_write; 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__int64 size; 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
}; 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int __cdecl _waccess(const __wchar_t * _FileName, int _AccessMode); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
errno_t __cdecl _waccess_s(const __wchar_t * _FileName, int _AccessMode); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int __cdecl _wchmod(const __wchar_t * _FileName, int _Mode); 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int __cdecl _wcreat(const __wchar_t * _FileName, int _PermissionMode); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
intptr_t __cdecl _wfindfirst32(const __wchar_t * _FileName, _wfinddata32_t * _FindData); 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int __cdecl _wfindnext32(intptr_t _FindHandle, _wfinddata32_t * _FindData); 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int __cdecl _wunlink(const __wchar_t * _FileName); 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int __cdecl _wrename(const __wchar_t * _OldFileName, const __wchar_t * _NewFileName); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
errno_t __cdecl _wmktemp_s(__wchar_t * _TemplateName, size_t _SizeInWords); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wmktemp_s ( wchar_t ( & _TemplateName ) [ _Size ] ) throw ( ) { return _wmktemp_s ( _TemplateName, _Size ); }}
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__wchar_t *__cdecl _wmktemp(__wchar_t * _TemplateName); 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
intptr_t __cdecl _wfindfirst32i64(const __wchar_t * _FileName, _wfinddata32i64_t * _FindData); 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
intptr_t __cdecl _wfindfirst64i32(const __wchar_t * _FileName, _wfinddata64i32_t * _FindData); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
intptr_t __cdecl _wfindfirst64(const __wchar_t * _FileName, _wfinddata64_t * _FindData); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int __cdecl _wfindnext32i64(intptr_t _FindHandle, _wfinddata32i64_t * _FindData); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int __cdecl _wfindnext64i32(intptr_t _FindHandle, _wfinddata64i32_t * _FindData); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int __cdecl _wfindnext64(intptr_t _FindHandle, _wfinddata64_t * _FindData); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
errno_t __cdecl _wsopen_s(int * _FileHandle, const __wchar_t * _FileName, int _OpenFlag, int _ShareFlag, int _PermissionFlag); 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
errno_t __cdecl _wsopen_dispatch(const __wchar_t * _FileName, int _OFlag, int _ShFlag, int _PMode, int * _PFileHandle, int _BSecure); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
extern "C++" inline int __cdecl _wopen(const __wchar_t *
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
_FileName, int 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
_OFlag, int 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
_PMode = 0) 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
{ 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int _FileHandle; 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, 64, _PMode, &_FileHandle, 0); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
return (_Result) ? -1 : _FileHandle; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
} 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
extern "C++" inline int __cdecl _wsopen(const __wchar_t *
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
_FileName, int 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
_OFlag, int 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
_ShFlag, int 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
_PMode = 0) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
{ 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
int _FileHandle; 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0); 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
return (_Result) ? -1 : _FileHandle; 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
} 
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
}
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
#pragma warning(pop)
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wio.h"
__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecl(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecle(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexeclp(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexeclpe(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecv(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecve(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecvp(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecvpe(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnl(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnle(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnlp(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnlpe(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnv(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnve(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnvp(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnvpe(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
int __cdecl _wsystem(const __wchar_t * _Command); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\corecrt_wprocess.h"
}__pragma(pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/types.h"
typedef unsigned short _ino_t; 
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/types.h"
typedef _ino_t ino_t; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/types.h"
typedef unsigned _dev_t; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/types.h"
typedef _dev_t dev_t; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/types.h"
typedef long _off_t; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/types.h"
typedef _off_t off_t; 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
struct _stat32 { 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time32_t st_atime; 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time32_t st_mtime; 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time32_t st_ctime; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
}; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
struct _stat32i64 { 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__int64 st_size; 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time32_t st_atime; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time32_t st_mtime; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time32_t st_ctime; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
}; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
struct _stat64i32 { 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time64_t st_atime; 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time64_t st_mtime; 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time64_t st_ctime; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
}; 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
struct _stat64 { 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__int64 st_size; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time64_t st_atime; 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time64_t st_mtime; 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__time64_t st_ctime; 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
}; 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
struct stat { 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
time_t st_atime; 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
time_t st_mtime; 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
time_t st_ctime; 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
}; 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _fstat32(int _FileHandle, struct _stat32 * _Stat); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _fstat32i64(int _FileHandle, struct _stat32i64 * _Stat); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _fstat64i32(int _FileHandle, struct _stat64i32 * _Stat); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _fstat64(int _FileHandle, struct _stat64 * _Stat); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _stat32(const char * _FileName, struct _stat32 * _Stat); 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _stat32i64(const char * _FileName, struct _stat32i64 * _Stat); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _stat64i32(const char * _FileName, struct _stat64i32 * _Stat); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _stat64(const char * _FileName, struct _stat64 * _Stat); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _wstat32(const __wchar_t * _FileName, struct _stat32 * _Stat); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _wstat32i64(const __wchar_t * _FileName, struct _stat32i64 * _Stat); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _wstat64i32(const __wchar_t * _FileName, struct _stat64i32 * _Stat); 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
int __cdecl _wstat64(const __wchar_t * _FileName, struct _stat64 * _Stat); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
static __inline int __cdecl fstat(const int _FileHandle, struct stat *const _Stat) 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
{ 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0]; 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
return _fstat64i32(_FileHandle, (struct _stat64i32 *)_Stat); 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
} 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
static __inline int __cdecl stat(const char *const _FileName, struct stat *const _Stat) 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
{ 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0]; 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
return _stat64i32(_FileName, (struct _stat64i32 *)_Stat); 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
} 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
}
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
#pragma warning(pop)
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\sys/stat.h"
__pragma(pack ( pop )) 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
typedef __wchar_t _Wint_t; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
__wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
wint_t __cdecl btowc(int _Ch); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
size_t __cdecl mbrlen(const char * _Ch, size_t _SizeInBytes, mbstate_t * _State); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
size_t __cdecl mbrtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SizeInBytes, mbstate_t * _State); 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
errno_t __cdecl mbsrtowcs_s(size_t * _Retval, __wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl mbsrtowcs_s ( size_t * _Retval, wchar_t ( & _Dest ) [ _Size ], char const * * _PSource, size_t _Count, mbstate_t * _State ) throw ( ) { return mbsrtowcs_s ( _Retval, _Dest, _Size, _PSource, _Count, _State ); }}
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
size_t __cdecl mbsrtowcs(__wchar_t * _Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State); 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
errno_t __cdecl wcrtomb_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, __wchar_t _Ch, mbstate_t * _State); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcrtomb_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], wchar_t _Source, mbstate_t * _State ) throw ( ) { return wcrtomb_s ( _Retval, _Dest, _Size, _Source, _State ); }}
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
size_t __cdecl wcrtomb(char * _Dest, __wchar_t _Source, mbstate_t * _State); 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
errno_t __cdecl wcsrtombs_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, const __wchar_t ** _Src, size_t _Size, mbstate_t * _State); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsrtombs_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], wchar_t const * * _PSrc, size_t _Count, mbstate_t * _State ) throw ( ) { return wcsrtombs_s ( _Retval, _Dest, _Size, _PSrc, _Count, _State ); }}
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
size_t __cdecl wcsrtombs(char * _Dest, const __wchar_t ** _PSource, size_t _Count, mbstate_t * _State); 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
int __cdecl wctob(wint_t _WCh); 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
errno_t __cdecl wmemcpy_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
errno_t __cdecl wmemmove_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
__inline int __cdecl fwide(FILE *
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_F, int 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_M) 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
{ 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
(void)_F; 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
return _M; 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
} 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
__inline int __cdecl mbsinit(const mbstate_t *
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_P) 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
{ 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
return (_P == (0)) || ((_P->_Wchar) == (0)); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
} 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
__inline const __wchar_t *__cdecl wmemchr(const __wchar_t *
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_C, size_t 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_N) 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
{ 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
for (; (0) < _N; (++_S), (--_N)) { 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
if ((*_S) == _C) { 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
return (const __wchar_t *)_S; }  }  
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
return 0; 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
} 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
__inline int __cdecl wmemcmp(const __wchar_t *
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_S2, size_t 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_N) 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
{ 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
for (; (0) < _N; ((++_S1), (++_S2)), (--_N)) { 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
if ((*_S1) != (*_S2)) { 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
return ((*_S1) < (*_S2)) ? -1 : 1; }  }  
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
return 0; 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
} 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemcpy(__wchar_t *
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_S2, size_t 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_N) 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
{ 
#pragma warning(push)
#pragma warning(disable : 4995 4996 6386)
return (__wchar_t *)memcpy(_S1, _S2, _N * sizeof(__wchar_t)); 
#pragma warning(pop)
} 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemmove(__wchar_t *
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_S2, size_t 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_N) 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
{ 
#pragma warning(push)
#pragma warning(disable : 4996 6386)
return (__wchar_t *)memmove(_S1, _S2, _N * sizeof(__wchar_t)); 
#pragma warning(pop)
} 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemset(__wchar_t *
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_C, size_t 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_N) 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
{ 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
__wchar_t *_Su = _S; 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
for (; (0) < _N; (++_Su), (--_N)) 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
{ 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
(*_Su) = _C; 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
}  
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
return _S; 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
} 
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
extern "C++" inline __wchar_t *__cdecl wmemchr(__wchar_t *
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_C, size_t 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
_N) 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
{ 
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
const __wchar_t *const _SC = _S; 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
return const_cast< __wchar_t *>(wmemchr(_SC, _C, _N)); 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
} 
#line 283 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\wchar.h"
}__pragma(pack ( pop )) 
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
extern "C" { typedef mbstate_t _Mbstatet; }
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
namespace std { 
#pragma warning(push)
#pragma warning(disable: 4995)
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::mbstate_t;using ::tm;using ::wint_t;
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::btowc;using ::fgetwc;using ::fgetws;using ::fputwc;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::fputws;using ::fwide;using ::fwprintf;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::fwscanf;using ::getwc;using ::getwchar;
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::mbrlen;using ::mbrtowc;using ::mbsrtowcs;
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::mbsinit;using ::putwc;using ::putwchar;
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::swprintf;using ::swscanf;using ::ungetwc;
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::vfwprintf;using ::vswprintf;using ::vwprintf;
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wcrtomb;using ::wprintf;using ::wscanf;
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wcsrtombs;using ::wcstol;using ::wcscat;
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wcschr;using ::wcscmp;using ::wcscoll;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wcscpy;using ::wcscspn;using ::wcslen;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wcsncat;using ::wcsncmp;using ::wcsncpy;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wcspbrk;using ::wcsrchr;using ::wcsspn;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wcstod;using ::wcstoul;using ::wcsstr;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wcstok;using ::wcsxfrm;using ::wctob;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wmemchr;using ::wmemcmp;using ::wmemcpy;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wmemmove;using ::wmemset;using ::wcsftime;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::vfwscanf;using ::vswscanf;using ::vwscanf;
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wcstof;using ::wcstold;
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
using ::wcstoll;using ::wcstoull;
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
#pragma warning(pop)
}
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
namespace std { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
enum float_denorm_style { 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
denorm_indeterminate = (-1), 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
denorm_absent = 0, 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
denorm_present
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
enum float_round_style { 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
round_indeterminate = (-1), 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
round_toward_zero = 0, 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
round_to_nearest, 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
round_toward_infinity, 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
round_toward_neg_infinity
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
struct _Num_base { 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float_denorm_style has_denorm = denorm_absent; 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool has_denorm_loss = false; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool has_infinity = false; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool has_quiet_NaN = false; 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool has_signaling_NaN = false; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_bounded = false; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_exact = false; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_iec559 = false; 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_integer = false; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_modulo = false; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_signed = false; 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_specialized = false; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool tinyness_before = false; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool traps = false; 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float_round_style round_style = round_toward_zero; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 0; 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 0; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_digits10 = 0; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_exponent = 0; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_exponent10 = 0; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int min_exponent = 0; 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int min_exponent10 = 0; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int radix = 0; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template < class _Ty >
 class numeric_limits
  : public _Num_base
 {
public :
  static constexpr _Ty ( min ) ( ) noexcept
  {
  return ( _Ty ( ) );
  }

  static constexpr _Ty ( max ) ( ) noexcept
  {
  return ( _Ty ( ) );
  }

  static constexpr _Ty lowest ( ) noexcept
  {
  return ( _Ty ( ) );
  }

  static constexpr _Ty epsilon ( ) noexcept
  {
  return ( _Ty ( ) );
  }

  static constexpr _Ty round_error ( ) noexcept
  {
  return ( _Ty ( ) );
  }

  static constexpr _Ty denorm_min ( ) noexcept
  {
  return ( _Ty ( ) );
  }

  static constexpr _Ty infinity ( ) noexcept
  {
  return ( _Ty ( ) );
  }

  static constexpr _Ty quiet_NaN ( ) noexcept
  {
  return ( _Ty ( ) );
  }

  static constexpr _Ty signaling_NaN ( ) noexcept
  {
  return ( _Ty ( ) );
  }
 };
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template< class _Ty> 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
class numeric_limits< const _Ty>  : public std::numeric_limits< _Ty>  { 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template< class _Ty> 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
class numeric_limits< volatile _Ty>  : public std::numeric_limits< _Ty>  { 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template< class _Ty> 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
class numeric_limits< const volatile _Ty>  : public std::numeric_limits< _Ty>  { 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
struct _Num_int_base : public _Num_base { 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_bounded = true; 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_exact = true; 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_integer = true; 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_specialized = true; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int radix = 2; 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
struct _Num_float_base : public _Num_base { 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float_denorm_style has_denorm = denorm_present; 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool has_infinity = true; 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool has_quiet_NaN = true; 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool has_signaling_NaN = true; 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_bounded = true; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_iec559 = true; 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_signed = true; 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_specialized = true; 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float_round_style round_style = round_to_nearest; 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int radix = 2; 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< char>  : public _Num_int_base { 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr char min() noexcept 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return -128; 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char max() noexcept 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 127; 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char lowest() noexcept 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char epsilon() noexcept 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char round_error() noexcept 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char denorm_min() noexcept 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char infinity() noexcept 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char quiet_NaN() noexcept 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char signaling_NaN() noexcept 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_signed = ((-128) != 0); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_modulo = ((-128) == 0); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = (8 - ((-128) != 0)); 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 2; 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< __wchar_t>  : public _Num_int_base { 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr __wchar_t min() noexcept 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __wchar_t max() noexcept 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 65535; 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __wchar_t lowest() noexcept 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __wchar_t epsilon() noexcept 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __wchar_t round_error() noexcept 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __wchar_t denorm_min() noexcept 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __wchar_t infinity() noexcept 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __wchar_t quiet_NaN() noexcept 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __wchar_t signaling_NaN() noexcept 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_modulo = true; 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 16; 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 4; 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< bool>  : public _Num_int_base { 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr bool min() noexcept 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return false; 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool max() noexcept 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return true; 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool lowest() noexcept 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool epsilon() noexcept 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool round_error() noexcept 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool denorm_min() noexcept 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool infinity() noexcept 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool quiet_NaN() noexcept 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool signaling_NaN() noexcept 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 1; 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< signed char>  : public _Num_int_base { 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr signed char min() noexcept 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return -128; 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr signed char max() noexcept 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 127; 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr signed char lowest() noexcept 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr signed char epsilon() noexcept 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr signed char round_error() noexcept 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr signed char denorm_min() noexcept 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr signed char infinity() noexcept 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr signed char quiet_NaN() noexcept 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr signed char signaling_NaN() noexcept 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_signed = true; 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 7; 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 2; 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< unsigned char>  : public _Num_int_base { 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr unsigned char min() noexcept 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned char max() noexcept 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 255; 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned char lowest() noexcept 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned char epsilon() noexcept 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned char round_error() noexcept 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned char denorm_min() noexcept 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned char infinity() noexcept 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned char quiet_NaN() noexcept 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned char signaling_NaN() noexcept 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_modulo = true; 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 8; 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 2; 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< short>  : public _Num_int_base { 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr short min() noexcept 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return -32768; 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr short max() noexcept 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 32767; 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr short lowest() noexcept 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr short epsilon() noexcept 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr short round_error() noexcept 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr short denorm_min() noexcept 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr short infinity() noexcept 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr short quiet_NaN() noexcept 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr short signaling_NaN() noexcept 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_signed = true; 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 15; 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 4; 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< unsigned short>  : public _Num_int_base { 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr unsigned short min() noexcept 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned short max() noexcept 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 65535; 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned short lowest() noexcept 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned short epsilon() noexcept 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned short round_error() noexcept 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned short denorm_min() noexcept 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned short infinity() noexcept 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned short quiet_NaN() noexcept 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned short signaling_NaN() noexcept 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_modulo = true; 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 16; 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 4; 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< char16_t>  : public _Num_int_base { 
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr char16_t min() noexcept 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char16_t max() noexcept 
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 65535; 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char16_t lowest() noexcept 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char16_t epsilon() noexcept 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char16_t round_error() noexcept 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char16_t denorm_min() noexcept 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char16_t infinity() noexcept 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char16_t quiet_NaN() noexcept 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char16_t signaling_NaN() noexcept 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_modulo = true; 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 16; 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 4; 
#line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< int>  : public _Num_int_base { 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr int min() noexcept 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (-2147483647) - 1; 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max() noexcept 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 2147483647; 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int lowest() noexcept 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int epsilon() noexcept 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int round_error() noexcept 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int denorm_min() noexcept 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int infinity() noexcept 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int quiet_NaN() noexcept 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int signaling_NaN() noexcept 
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_signed = true; 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 31; 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 9; 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< unsigned>  : public _Num_int_base { 
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr unsigned min() noexcept 
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned max() noexcept 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 4294967295U; 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned lowest() noexcept 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned epsilon() noexcept 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned round_error() noexcept 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned denorm_min() noexcept 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned infinity() noexcept 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned quiet_NaN() noexcept 
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned signaling_NaN() noexcept 
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_modulo = true; 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 32; 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 9; 
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< long>  : public _Num_int_base { 
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr long min() noexcept 
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (-2147483647L) - (1); 
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long max() noexcept 
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 2147483647L; 
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long lowest() noexcept 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long epsilon() noexcept 
#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long round_error() noexcept 
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long denorm_min() noexcept 
#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 750 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long infinity() noexcept 
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long quiet_NaN() noexcept 
#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 757 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long signaling_NaN() noexcept 
#line 761 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 765 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static_assert((sizeof(int) == sizeof(long)), "LLP64 assumption");
#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_signed = true; 
#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 31; 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 9; 
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< unsigned long>  : public _Num_int_base { 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr unsigned long min() noexcept 
#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned long max() noexcept 
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 4294967295UL; 
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned long lowest() noexcept 
#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned long epsilon() noexcept 
#line 792 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned long round_error() noexcept 
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned long denorm_min() noexcept 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 804 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 806 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned long infinity() noexcept 
#line 807 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned long quiet_NaN() noexcept 
#line 812 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 814 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned long signaling_NaN() noexcept 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 818 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 821 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static_assert((sizeof(unsigned) == sizeof(unsigned long)), "LLP64 assumption");
#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_modulo = true; 
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 32; 
#line 824 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 9; 
#line 825 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< char32_t>  : public _Num_int_base { 
#line 832 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr char32_t min() noexcept 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 834 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char32_t max() noexcept 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 839 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 4294967295U; 
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char32_t lowest() noexcept 
#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 844 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 845 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char32_t epsilon() noexcept 
#line 848 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 849 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 852 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char32_t round_error() noexcept 
#line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 854 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 855 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char32_t denorm_min() noexcept 
#line 858 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 859 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char32_t infinity() noexcept 
#line 863 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 864 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 867 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char32_t quiet_NaN() noexcept 
#line 868 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 869 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr char32_t signaling_NaN() noexcept 
#line 873 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 874 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 875 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_modulo = true; 
#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 32; 
#line 879 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 9; 
#line 880 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 883 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< __int64>  : public _Num_int_base { 
#line 887 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr __int64 min() noexcept 
#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 889 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (-9223372036854775807i64) - (1); 
#line 890 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __int64 max() noexcept 
#line 893 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 894 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 9223372036854775807i64; 
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 897 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __int64 lowest() noexcept 
#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 899 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 900 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 902 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __int64 epsilon() noexcept 
#line 903 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 904 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 905 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 907 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __int64 round_error() noexcept 
#line 908 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 910 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 912 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __int64 denorm_min() noexcept 
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 914 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 917 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __int64 infinity() noexcept 
#line 918 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 919 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 922 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __int64 quiet_NaN() noexcept 
#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 924 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 925 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr __int64 signaling_NaN() noexcept 
#line 928 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 929 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 930 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_signed = true; 
#line 933 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 63; 
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 18; 
#line 935 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 938 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< unsigned __int64>  : public _Num_int_base { 
#line 942 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr unsigned __int64 min() noexcept 
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 944 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 945 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 947 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned __int64 max() noexcept 
#line 948 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 18446744073709551615Ui64; 
#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 952 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned __int64 lowest() noexcept 
#line 953 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return min(); 
#line 955 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 957 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned __int64 epsilon() noexcept 
#line 958 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned __int64 round_error() noexcept 
#line 963 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 964 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 965 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 967 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned __int64 denorm_min() noexcept 
#line 968 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 969 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 970 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 972 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned __int64 infinity() noexcept 
#line 973 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 975 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned __int64 quiet_NaN() noexcept 
#line 978 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 979 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr unsigned __int64 signaling_NaN() noexcept 
#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 984 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return 0; 
#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 987 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr bool is_modulo = true; 
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 64; 
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 19; 
#line 990 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< float>  : public _Num_float_base { 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr float min() noexcept 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 999 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (1.175494351e-38F); 
#line 1000 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1002 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float max() noexcept 
#line 1003 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (3.402823466e+38F); 
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float lowest() noexcept 
#line 1008 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1009 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return -max(); 
#line 1010 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float epsilon() noexcept 
#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (1.192092896e-07F); 
#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float round_error() noexcept 
#line 1018 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1019 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (0.5F); 
#line 1020 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1022 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float denorm_min() noexcept 
#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (1.401298464e-45F); 
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float infinity() noexcept 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1029 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return __builtin_huge_valf(); 
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1032 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float quiet_NaN() noexcept 
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return __builtin_nanf("0"); 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr float signaling_NaN() noexcept 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return __builtin_nansf("1"); 
#line 1040 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1042 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 24; 
#line 1043 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 6; 
#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_digits10 = 9; 
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_exponent = 128; 
#line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_exponent10 = 38; 
#line 1047 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int min_exponent = (-125); 
#line 1048 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int min_exponent10 = (-37); 
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< double>  : public _Num_float_base { 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr double min() noexcept 
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (2.225073858507201383e-308); 
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr double max() noexcept 
#line 1062 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1063 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (1.797693134862315708e+308); 
#line 1064 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr double lowest() noexcept 
#line 1067 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return -max(); 
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1071 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr double epsilon() noexcept 
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1073 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (2.220446049250313081e-16); 
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1076 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr double round_error() noexcept 
#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (0.5); 
#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr double denorm_min() noexcept 
#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1083 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (4.940656458412465442e-324); 
#line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr double infinity() noexcept 
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return __builtin_huge_val(); 
#line 1089 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr double quiet_NaN() noexcept 
#line 1092 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1093 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return __builtin_nan("0"); 
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr double signaling_NaN() noexcept 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return __builtin_nans("1"); 
#line 1099 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 53; 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 15; 
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_digits10 = 17; 
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_exponent = 1024; 
#line 1105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_exponent10 = 308; 
#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int min_exponent = (-1021); 
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int min_exponent10 = (-307); 
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
template<> class numeric_limits< long double>  : public _Num_float_base { 
#line 1115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
public: static constexpr long double min() noexcept 
#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (2.225073858507201383e-308); 
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long double max() noexcept 
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (1.797693134862315708e+308); 
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long double lowest() noexcept 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return -max(); 
#line 1128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long double epsilon() noexcept 
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (2.220446049250313081e-16); 
#line 1133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long double round_error() noexcept 
#line 1136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (0.5L); 
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long double denorm_min() noexcept 
#line 1141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return (4.940656458412465442e-324); 
#line 1143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long double infinity() noexcept 
#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return __builtin_huge_val(); 
#line 1148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1150 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long double quiet_NaN() noexcept 
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return __builtin_nan("0"); 
#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr long double signaling_NaN() noexcept 
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
{ 
#line 1157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
return __builtin_nans("1"); 
#line 1158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
} 
#line 1160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits = 53; 
#line 1161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int digits10 = 15; 
#line 1162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_digits10 = 17; 
#line 1163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_exponent = 1024; 
#line 1164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int max_exponent10 = 308; 
#line 1165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int min_exponent = (-1021); 
#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
static constexpr int min_exponent10 = (-307); 
#line 1167 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}; 
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
}
#line 1171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
#pragma warning(pop)
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"
namespace std { 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"
typedef void (__cdecl *new_handler)(void); 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"
new_handler __cdecl set_new_handler(new_handler) noexcept; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"
new_handler __cdecl get_new_handler() noexcept; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"
}
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
namespace std { 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using streamoff = __int64; 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using streamsize = __int64; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template < class _Statetype >
 class fpos
 {
public :
  fpos ( streamoff _Off = 0 )
  : _Myoff ( _Off ), _Fpos ( 0 ), _Mystate ( )
  {
  }

 fpos ( _Statetype _State, fpos_t _Fileposition )
  : _Myoff ( _Fileposition ), _Fpos ( 0 ), _Mystate ( _State )
  {
  }

  _Statetype state ( ) const
  {
  return ( _Mystate );
  }

 void state ( _Statetype _State )
  {
  _Mystate = _State;
  }

 operator streamoff ( ) const
  {


  return ( _Myoff + _Fpos );
  }


 [ [ deprecated ( "warning STL4019: The member std::fpos::seekpos() is non-Standard, and is preserved only for compatibility with workarounds for o" "ld versions of Visual C++. It will be removed in a future release, and in this release always returns 0. Please use standards-co" "nforming mechanisms to manipulate fpos, such as conversions to and from streamoff, or an integral type, instead. If you are rece" "iving this message while compiling Boost.IOStreams, a fix has been submitted upstream to make Boost use standards-conforming mec" "hanisms, as it does for other compilers. You can define _SILENCE_FPOS_SEEKPOS_DEPRECATION_WARNING to acknowledge that you have r" "eceived this warning, or define _REMOVE_FPOS_SEEKPOS to remove std::fpos::seekpos entirely." ) ] ] fpos_t seekpos ( ) const noexcept
  {
  return { };
  }


  streamoff operator - ( const fpos & _Right ) const
  {
  return ( static_cast < streamoff > ( * this ) - static_cast < streamoff > ( _Right ) );
  }

 fpos & operator += ( streamoff _Off )
  {
  _Myoff += _Off;
  return ( * this );
  }

 fpos & operator -= ( streamoff _Off )
  {
  _Myoff -= _Off;
  return ( * this );
  }

  fpos operator + ( streamoff _Off ) const
  {
  fpos _Tmp = * this;
  _Tmp += _Off;
  return ( _Tmp );
  }

  fpos operator - ( streamoff _Off ) const
  {
  fpos _Tmp = * this;
  _Tmp -= _Off;
  return ( _Tmp );
  }

  bool operator == ( const fpos & _Right ) const
  {
  return ( static_cast < streamoff > ( * this ) == static_cast < streamoff > ( _Right ) );
  }

 template < class _Int,
  enable_if_t < is_integral_v < _Int >, int > = 0 >
   friend bool operator == ( const fpos & _Left, const _Int _Right )
  {
  return ( static_cast < streamoff > ( _Left ) == _Right );
  }

 template < class _Int,
  enable_if_t < is_integral_v < _Int >, int > = 0 >
   friend bool operator == ( const _Int _Left, const fpos & _Right )
  {
  return ( _Left == static_cast < streamoff > ( _Right ) );
  }

  bool operator != ( const fpos & _Right ) const
  {
  return ( static_cast < streamoff > ( * this ) != static_cast < streamoff > ( _Right ) );
  }

 template < class _Int,
  enable_if_t < is_integral_v < _Int >, int > = 0 >
   friend bool operator != ( const fpos & _Left, const _Int _Right )
  {
  return ( static_cast < streamoff > ( _Left ) != _Right );
  }

 template < class _Int,
  enable_if_t < is_integral_v < _Int >, int > = 0 >
   friend bool operator != ( const _Int _Left, const fpos & _Right )
  {
  return ( _Left != static_cast < streamoff > ( _Right ) );
  }

private :
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using streampos = fpos< _Mbstatet> ; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wstreampos = streampos; 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template < class _Elem,
 class _Int_type >
 struct _Char_traits
 {
 using char_type = _Elem;
 using int_type = _Int_type;
 using pos_type = streampos;
 using off_type = streamoff;
 using state_type = _Mbstatet;

  static inline int compare ( const _Elem * _First1,
    const _Elem * _First2, size_t _Count ) noexcept
  {
  for (; 0 < _Count; -- _Count, ++ _First1, ++ _First2 )
   {
   if ( * _First1 != * _First2 )
    {
    return ( * _First1 < * _First2 ? - 1 : + 1 );
    }
   }

  return ( 0 );
  }

  static inline size_t length ( const _Elem * _First ) noexcept
  {
  size_t _Count = 0;
  while ( * _First != _Elem ( ) )
   {
   ++ _Count;
   ++ _First;
   }

  return ( _Count );
  }

 static _Elem * copy ( _Elem * const _First1,
    const _Elem * _First2, size_t _Count ) noexcept
  {
  return ( static_cast < _Elem * > ( :: memcpy ( _First1, _First2, _Count * sizeof ( _Elem ) ) ) );
  }

   static _Elem * _Copy_s (
    _Elem * const _First1, const size_t _Dest_size,
    const _Elem * const _First2, const size_t _Count ) noexcept
  {
  do { if ( _Count <= _Dest_size ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
  return ( copy ( _First1, _First2, _Count ) );
  }

  static inline const _Elem * find ( const _Elem * _First,
  size_t _Count, const _Elem & _Ch ) noexcept
  {
  for (; 0 < _Count; -- _Count, ++ _First )
   {
   if ( * _First == _Ch )
    {
    return ( _First );
    }
   }

  return ( nullptr );
  }

 static _Elem * move ( _Elem * const _First1,
    const _Elem * _First2, size_t _Count ) noexcept
  {
  return ( static_cast < _Elem * > ( :: memmove ( _First1, _First2, _Count * sizeof ( _Elem ) ) ) );
  }

 static _Elem * assign ( _Elem * const _First,
  size_t _Count, const _Elem _Ch ) noexcept
  {
  _Elem * _Next = _First;
  for (; 0 < _Count; -- _Count, ++ _Next )
   {
   * _Next = _Ch;
   }

  return ( _First );
  }

 static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept
  {
  _Left = _Right;
  }

  static constexpr bool eq ( const _Elem & _Left, const _Elem & _Right ) noexcept
  {
  return ( _Left == _Right );
  }

  static constexpr bool lt ( const _Elem & _Left, const _Elem & _Right ) noexcept
  {
  return ( _Left < _Right );
  }

  static constexpr _Elem to_char_type ( const int_type & _Meta ) noexcept
  {
  return ( static_cast < _Elem > ( _Meta ) );
  }

  static constexpr int_type to_int_type ( const _Elem & _Ch ) noexcept
  {
  return ( static_cast < int_type > ( _Ch ) );
  }

  static constexpr bool eq_int_type ( const int_type & _Left, const int_type & _Right ) noexcept
  {
  return ( _Left == _Right );
  }

  static constexpr int_type not_eof ( const int_type & _Meta ) noexcept
  {
  return ( _Meta != eof ( ) ? _Meta : ! eof ( ) );
  }

  static constexpr int_type eof ( ) noexcept
  {
  return ( static_cast < int_type > ( ( - 1 ) ) );
  }
 };
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template < class _Elem >
 struct _WChar_traits
 {
 using char_type = _Elem;
 using int_type = unsigned short;
 using pos_type = streampos;
 using off_type = streamoff;
 using state_type = _Mbstatet;

  static inline int compare ( const _Elem * const _First1,
     const _Elem * const _First2, const size_t _Count ) noexcept
  {










  return ( :: wmemcmp ( reinterpret_cast < const wchar_t * > ( _First1 ),
   reinterpret_cast < const wchar_t * > ( _First2 ), _Count ) );

  }

  static inline size_t length ( const _Elem * _First ) noexcept
  {










  return ( :: wcslen ( reinterpret_cast < const wchar_t * > ( _First ) ) );

  }

 static _Elem * copy ( _Elem * const _First1,
     const _Elem * const _First2, const size_t _Count ) noexcept
  {
  return ( reinterpret_cast < _Elem * > ( :: wmemcpy ( reinterpret_cast < wchar_t * > ( _First1 ),
   reinterpret_cast < const wchar_t * > ( _First2 ), _Count ) ) );
  }

   static _Elem * _Copy_s (
     _Elem * const _First1, const size_t _Size_in_words,
     const _Elem * const _First2, const size_t _Count ) noexcept
  {
  do { if ( _Count <= _Size_in_words ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
  return ( copy ( _First1, _First2, _Count ) );
  }

  static inline const _Elem * find ( const _Elem * _First,
   const size_t _Count, const _Elem & _Ch ) noexcept
  {










  return ( reinterpret_cast < const _Elem * > ( :: wmemchr (
   reinterpret_cast < const wchar_t * > ( _First ), _Ch, _Count ) ) );

  }

 static _Elem * move ( _Elem * const _First1,
     const _Elem * const _First2, const size_t _Count ) noexcept
  {
  return ( reinterpret_cast < _Elem * > ( :: wmemmove ( reinterpret_cast < wchar_t * > ( _First1 ),
   reinterpret_cast < const wchar_t * > ( _First2 ), _Count ) ) );
  }

 static _Elem * assign ( _Elem * const _First, size_t _Count, _Elem _Ch )
   noexcept
  {
  return ( reinterpret_cast < _Elem * > ( :: wmemset ( reinterpret_cast < wchar_t * > ( _First ), _Ch, _Count ) ) );
  }

 static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept
  {
  _Left = _Right;
  }

  static constexpr bool eq ( const _Elem & _Left, const _Elem & _Right ) noexcept
  {
  return ( _Left == _Right );
  }

  static constexpr bool lt ( const _Elem & _Left, const _Elem & _Right ) noexcept
  {
  return ( _Left < _Right );
  }

  static constexpr _Elem to_char_type ( const int_type & _Meta ) noexcept
  {
  return ( _Meta );
  }

  static constexpr int_type to_int_type ( const _Elem & _Ch ) noexcept
  {
  return ( _Ch );
  }

  static constexpr bool eq_int_type ( const int_type & _Left, const int_type & _Right ) noexcept
  {
  return ( _Left == _Right );
  }

  static constexpr int_type not_eof ( const int_type & _Meta ) noexcept
  {
  return ( _Meta != eof ( ) ? _Meta : static_cast < int_type > ( ! eof ( ) ) );
  }

  static constexpr int_type eof ( ) noexcept
  {
  return ( ( ( wint_t ) ( 65535 ) ) );
  }
 };
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template< class _Elem> 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
struct char_traits : public _Char_traits< _Elem, long>  { 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
}; 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template<> struct char_traits< char16_t>  : public _WChar_traits< char16_t>  { 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
}; 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using u16streampos = streampos; 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template<> struct char_traits< char32_t>  : public _Char_traits< char32_t, unsigned>  { 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
}; 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using u32streampos = streampos; 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template<> struct char_traits< __wchar_t>  : public _WChar_traits< __wchar_t>  { 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
}; 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template<> struct char_traits< unsigned short>  : public _WChar_traits< unsigned short>  { 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
}; 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template<> struct char_traits< char>  { 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using char_type = char; 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using int_type = int; 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using pos_type = streampos; 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using off_type = streamoff; 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using state_type = _Mbstatet; 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static int compare(const char *const _First1, const char *const 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_First2, const size_t _Count) noexcept 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return ::memcmp(_First1, _First2, _Count); 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static size_t length(const char *const _First) noexcept 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return ::strlen(_First); 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static char *copy(char *const _First1, const char *const 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_First2, const size_t _Count) noexcept 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return static_cast< char *>(::memcpy(_First1, _First2, _Count)); 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static char *_Copy_s(char *const 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_First1, const size_t _Size_in_bytes, const char *const 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_First2, const size_t _Count) noexcept 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
do { if (_Count <= _Size_in_bytes) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); }  ; } while (false); 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return copy(_First1, _First2, _Count); 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static const char *find(const char *const _First, const size_t 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Count, const char &_Ch) noexcept 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return static_cast< const char *>(::memchr(_First, _Ch, _Count)); 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static char *move(char *const _First1, const char *const 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_First2, const size_t _Count) noexcept 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return static_cast< char *>(::memmove(_First1, _First2, _Count)); 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static char *assign(char *const _First, const size_t 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Count, const char _Ch) noexcept 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return static_cast< char *>(::memset(_First, _Ch, _Count)); 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static void assign(char &_Left, const char &_Right) noexcept 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Left = _Right; 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static constexpr bool eq(const char &_Left, const char &_Right) noexcept 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return _Left == _Right; 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static constexpr bool lt(const char &_Left, const char &_Right) noexcept 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return (static_cast< unsigned char>(_Left)) < (static_cast< unsigned char>(_Right)); 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static constexpr char to_char_type(const int_type &_Meta) noexcept 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return static_cast< char>(_Meta); 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static constexpr int_type to_int_type(const char &_Ch) noexcept 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return static_cast< unsigned char>(_Ch); 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static constexpr bool eq_int_type(const int_type &_Left, const int_type &_Right) noexcept 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return _Left == _Right; 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static constexpr int_type not_eof(const int_type &_Meta) noexcept 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return (_Meta != eof()) ? _Meta : (!(eof())); 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
static constexpr int_type eof() noexcept 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
{ 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
return -1; 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
} 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
}; 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template < class _Ty >
 class allocator;
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
class ios_base; 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ios;
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class istreambuf_iterator;
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class ostreambuf_iterator;
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_streambuf;
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
#pragma vtordisp(push, 2)
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_istream;
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_ostream;
#pragma vtordisp(pop)
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template < class _Elem,
 class _Traits = char_traits < _Elem > >
 class basic_iostream;
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template< class _Elem, class 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Traits = char_traits< _Elem> , class 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Alloc = allocator< _Elem> > class basic_stringbuf; 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template< class _Elem, class 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Traits = char_traits< _Elem> , class 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Alloc = allocator< _Elem> > class basic_istringstream; 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template< class _Elem, class 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Traits = char_traits< _Elem> , class 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Alloc = allocator< _Elem> > class basic_ostringstream; 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template< class _Elem, class 
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Traits = char_traits< _Elem> , class 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Alloc = allocator< _Elem> > class basic_stringstream; 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template< class _Elem, class 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Traits = char_traits< _Elem> > class basic_filebuf; 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template< class _Elem, class 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Traits = char_traits< _Elem> > class basic_ifstream; 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template< class _Elem, class 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Traits = char_traits< _Elem> > class basic_ofstream; 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
template< class _Elem, class 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
_Traits = char_traits< _Elem> > class basic_fstream; 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using ios = basic_ios< char, char_traits< char> > ; 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using streambuf = basic_streambuf< char, char_traits< char> > ; 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using istream = basic_istream< char, char_traits< char> > ; 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using ostream = basic_ostream< char, char_traits< char> > ; 
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using iostream = basic_iostream< char, char_traits< char> > ; 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using stringbuf = basic_stringbuf< char, char_traits< char> , allocator< char> > ; 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using istringstream = basic_istringstream< char, char_traits< char> , allocator< char> > ; 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using ostringstream = basic_ostringstream< char, char_traits< char> , allocator< char> > ; 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using stringstream = basic_stringstream< char, char_traits< char> , allocator< char> > ; 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using filebuf = basic_filebuf< char, char_traits< char> > ; 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using ifstream = basic_ifstream< char, char_traits< char> > ; 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using ofstream = basic_ofstream< char, char_traits< char> > ; 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using fstream = basic_fstream< char, char_traits< char> > ; 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wios = basic_ios< __wchar_t, char_traits< __wchar_t> > ; 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wstreambuf = basic_streambuf< __wchar_t, char_traits< __wchar_t> > ; 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wistream = basic_istream< __wchar_t, char_traits< __wchar_t> > ; 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wostream = basic_ostream< __wchar_t, char_traits< __wchar_t> > ; 
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wiostream = basic_iostream< __wchar_t, char_traits< __wchar_t> > ; 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wstringbuf = basic_stringbuf< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wistringstream = basic_istringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wostringstream = basic_ostringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wstringstream = basic_stringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wfilebuf = basic_filebuf< __wchar_t, char_traits< __wchar_t> > ; 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wifstream = basic_ifstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wofstream = basic_ofstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
using wfstream = basic_fstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
}
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
#pragma warning(pop)
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
namespace std { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty >

 constexpr const _Ty & _Min_value ( const _Ty & _Left, const _Ty & _Right )
  noexcept ( noexcept ( _Right < _Left ) )
 {
 return ( _Right < _Left ? _Right : _Left );
 }
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty >

 constexpr const _Ty & _Max_value ( const _Ty & _Left, const _Ty & _Right )
  noexcept ( noexcept ( _Left < _Right ) )
 {
 return ( _Left < _Right ? _Right : _Left );
 }
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _FwdIt1,
 class _FwdIt2 > inline
 void iter_swap ( _FwdIt1 _Left, _FwdIt2 _Right )
 {
 swap ( * _Left, * _Right );
 }
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty,
 size_t _Size,
 class > inline
 void swap ( _Ty ( & _Left ) [ _Size ], _Ty ( & _Right ) [ _Size ] )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value )
 {
 if ( & _Left != & _Right )
  {
  _Ty * _First1 = _Left;
  _Ty * _Last1 = _First1 + _Size;
  _Ty * _First2 = _Right;
  for (; _First1 != _Last1; ++ _First1, ++ _First2 )
   :: std :: iter_swap ( _First1, _First2 );
  }
 }
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty,
 class > inline
 void swap ( _Ty & _Left, _Ty & _Right )
  noexcept ( is_nothrow_move_constructible_v < _Ty > && is_nothrow_move_assignable_v < _Ty > )

 {
 _Ty _Tmp = :: std :: move ( _Left );
 _Left = :: std :: move ( _Right );
 _Right = :: std :: move ( _Tmp );
 }
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty > inline
 void _Swap_adl ( _Ty & _Left, _Ty & _Right )
  noexcept ( _Is_nothrow_swappable < _Ty > :: value )
 {
 swap ( _Left, _Right );
 }
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct piecewise_construct_t { 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
explicit piecewise_construct_t() = default;
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
constexpr piecewise_construct_t piecewise_construct{}; 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class ...> class tuple; 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
 struct pair
 {
 using first_type = _Ty1;
 using second_type = _Ty2;

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  enable_if_t < conjunction_v <
   is_default_constructible < _Uty1 >,
   is_default_constructible < _Uty2 >,
   _Is_implicitly_default_constructible < _Uty1 >,
   _Is_implicitly_default_constructible < _Uty2 >
  >, int > = 0 >
  constexpr pair ( )
   noexcept ( is_nothrow_default_constructible_v < _Uty1 > && is_nothrow_default_constructible_v < _Uty2 > )

  : first ( ), second ( )
  {
  }

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  enable_if_t < conjunction_v <
   is_default_constructible < _Uty1 >,
   is_default_constructible < _Uty2 >,
   negation < conjunction <
    _Is_implicitly_default_constructible < _Uty1 >,
    _Is_implicitly_default_constructible < _Uty2 >> >
  >, int > = 0 >
  constexpr explicit pair ( )
   noexcept ( is_nothrow_default_constructible_v < _Uty1 > && is_nothrow_default_constructible_v < _Uty2 > )

  : first ( ), second ( )
  {
  }

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  enable_if_t < conjunction_v <
   is_copy_constructible < _Uty1 >,
   is_copy_constructible < _Uty2 >,
   is_convertible < const _Uty1 &, _Uty1 >,
   is_convertible < const _Uty2 &, _Uty2 >
  >, int > = 0 >
  constexpr pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 )
   noexcept ( is_nothrow_copy_constructible_v < _Uty1 > && is_nothrow_copy_constructible_v < _Uty2 > )

  : first ( _Val1 ), second ( _Val2 )
  {
  }

 template < class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  enable_if_t < conjunction_v <
   is_copy_constructible < _Uty1 >,
   is_copy_constructible < _Uty2 >,
   negation < conjunction <
    is_convertible < const _Uty1 &, _Uty1 >,
    is_convertible < const _Uty2 &, _Uty2 >> >
  >, int > = 0 >
  constexpr explicit pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 )
   noexcept ( is_nothrow_copy_constructible_v < _Uty1 > && is_nothrow_copy_constructible_v < _Uty2 > )

  : first ( _Val1 ), second ( _Val2 )
  {
  }

 template < class _Other1,
  class _Other2,
  enable_if_t < conjunction_v <
   is_constructible < _Ty1, _Other1 >,
   is_constructible < _Ty2, _Other2 >,
   is_convertible < _Other1, _Ty1 >,
   is_convertible < _Other2, _Ty2 >
  >, int > = 0 >
  constexpr pair ( _Other1 && _Val1, _Other2 && _Val2 )
   noexcept ( is_nothrow_constructible_v < _Ty1, _Other1 > && is_nothrow_constructible_v < _Ty2, _Other2 > )

  : first ( :: std :: forward < _Other1 > ( _Val1 ) ),
    second ( :: std :: forward < _Other2 > ( _Val2 ) )
  {
  }

 template < class _Other1,
  class _Other2,
  enable_if_t < conjunction_v <
   is_constructible < _Ty1, _Other1 >,
   is_constructible < _Ty2, _Other2 >,
   negation < conjunction <
    is_convertible < _Other1, _Ty1 >,
    is_convertible < _Other2, _Ty2 >> >
  >, int > = 0 >
  constexpr explicit pair ( _Other1 && _Val1, _Other2 && _Val2 )
   noexcept ( is_nothrow_constructible_v < _Ty1, _Other1 > && is_nothrow_constructible_v < _Ty2, _Other2 > )

  : first ( :: std :: forward < _Other1 > ( _Val1 ) ),
    second ( :: std :: forward < _Other2 > ( _Val2 ) )
  {
  }

 pair ( const pair & ) = default;
 pair ( pair && ) = default;

 template < class _Other1,
  class _Other2,
  enable_if_t < conjunction_v <
   is_constructible < _Ty1, const _Other1 & >,
   is_constructible < _Ty2, const _Other2 & >,
   is_convertible < const _Other1 &, _Ty1 >,
   is_convertible < const _Other2 &, _Ty2 >
  >, int > = 0 >
  constexpr pair ( const pair < _Other1, _Other2 > & _Right )
   noexcept ( is_nothrow_constructible_v < _Ty1, const _Other1 & > && is_nothrow_constructible_v < _Ty2, const _Other2 & > )

  : first ( _Right . first ), second ( _Right . second )
  {
  }

 template < class _Other1,
  class _Other2,
  enable_if_t < conjunction_v <
   is_constructible < _Ty1, const _Other1 & >,
   is_constructible < _Ty2, const _Other2 & >,
   negation < conjunction <
    is_convertible < const _Other1 &, _Ty1 >,
    is_convertible < const _Other2 &, _Ty2 >> >
  >, int > = 0 >
  constexpr explicit pair ( const pair < _Other1, _Other2 > & _Right )
   noexcept ( is_nothrow_constructible_v < _Ty1, const _Other1 & > && is_nothrow_constructible_v < _Ty2, const _Other2 & > )

  : first ( _Right . first ), second ( _Right . second )
  {
  }

 template < class _Other1,
  class _Other2,
  enable_if_t < conjunction_v <
   is_constructible < _Ty1, _Other1 >,
   is_constructible < _Ty2, _Other2 >,
   is_convertible < _Other1, _Ty1 >,
   is_convertible < _Other2, _Ty2 >
  >, int > = 0 >
  constexpr pair ( pair < _Other1, _Other2 > && _Right )
   noexcept ( is_nothrow_constructible_v < _Ty1, _Other1 > && is_nothrow_constructible_v < _Ty2, _Other2 > )

  : first ( :: std :: forward < _Other1 > ( _Right . first ) ),
   second ( :: std :: forward < _Other2 > ( _Right . second ) )
  {
  }

 template < class _Other1,
  class _Other2,
  enable_if_t < conjunction_v <
   is_constructible < _Ty1, _Other1 >,
   is_constructible < _Ty2, _Other2 >,
   negation < conjunction <
    is_convertible < _Other1, _Ty1 >,
    is_convertible < _Other2, _Ty2 >> >
  >, int > = 0 >
  constexpr explicit pair ( pair < _Other1, _Other2 > && _Right )
   noexcept ( is_nothrow_constructible_v < _Ty1, _Other1 > && is_nothrow_constructible_v < _Ty2, _Other2 > )

  : first ( :: std :: forward < _Other1 > ( _Right . first ) ),
   second ( :: std :: forward < _Other2 > ( _Right . second ) )
  {
  }

 template < class _Tuple1,
  class _Tuple2,
  size_t ... _Indexes1,
  size_t ... _Indexes2 > inline
  pair ( _Tuple1 & _Val1,
   _Tuple2 & _Val2,
   index_sequence < _Indexes1 ... >,
   index_sequence < _Indexes2 ... > );

 template < class ... _Types1,
  class ... _Types2 > inline
  pair ( piecewise_construct_t,
   tuple < _Types1 ... > _Val1,
   tuple < _Types2 ... > _Val2 );

 pair & operator = ( const volatile pair & ) = delete;

 template < class _Other1 = _Ty1,
  class _Other2 = _Ty2,
  enable_if_t < conjunction_v <
   is_assignable < _Ty1 &, const _Other1 & >,
   is_assignable < _Ty2 &, const _Other2 & >
  >, int > = 0 >
  pair & operator = ( const pair < _Other1, _Other2 > & _Right )
   noexcept ( is_nothrow_assignable_v < _Ty1 &, const _Other1 & > && is_nothrow_assignable_v < _Ty2 &, const _Other2 & > )

  {
  first = _Right . first;
  second = _Right . second;
  return ( * this );
  }

 template < class _Other1 = _Ty1,
  class _Other2 = _Ty2,
  enable_if_t < conjunction_v <
   is_assignable < _Ty1 &, _Other1 >,
   is_assignable < _Ty2 &, _Other2 >
  >, int > = 0 >
  pair & operator = ( pair < _Other1, _Other2 > && _Right )
   noexcept ( is_nothrow_assignable_v < _Ty1 &, _Other1 > && is_nothrow_assignable_v < _Ty2 &, _Other2 > )

  {
  first = :: std :: forward < _Other1 > ( _Right . first );
  second = :: std :: forward < _Other2 > ( _Right . second );
  return ( * this );
  }

 void swap ( pair & _Right )
  noexcept ( _Is_nothrow_swappable < _Ty1 > :: value && _Is_nothrow_swappable < _Ty2 > :: value )

  {
  if ( this != :: std :: addressof ( _Right ) )
   {
   _Swap_adl ( first, _Right . first );
   _Swap_adl ( second, _Right . second );
   }
  }

 _Ty1 first;
 _Ty2 second;
 };
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2,
 class = enable_if_t < _Is_swappable < _Ty1 > :: value && _Is_swappable < _Ty2 > :: value > > inline
 void swap ( pair < _Ty1, _Ty2 > & _Left, pair < _Ty1, _Ty2 > & _Right )
  noexcept ( noexcept ( _Left . swap ( _Right ) ) )
 {
 _Left . swap ( _Right );
 }
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr bool operator == ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Left . first == _Right . first && _Left . second == _Right . second );
 }
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr bool operator != ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr bool operator < ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Left . first < _Right . first ||
  ( ! ( _Right . first < _Left . first ) && _Left . second < _Right . second ) );
 }
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr bool operator > ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr bool operator <= ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr bool operator >= ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Ty1, _Ty2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Ty> 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct _Unrefwrap_helper { 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using type = _Ty; 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Ty> 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct _Unrefwrap_helper< reference_wrapper< _Ty> >  { 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using type = _Ty &; 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Ty> using _Unrefwrap_t = typename _Unrefwrap_helper< decay_t< _Ty> > ::type; 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr pair < _Unrefwrap_t < _Ty1 >, _Unrefwrap_t < _Ty2 > >
  make_pair ( _Ty1 && _Val1, _Ty2 && _Val2 )
 {
 using _Mypair = pair < _Unrefwrap_t < _Ty1 >, _Unrefwrap_t < _Ty2 >>;
 return ( _Mypair ( :: std :: forward < _Ty1 > ( _Val1 ), :: std :: forward < _Ty2 > ( _Val2 ) ) );
 }
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
namespace rel_ops { 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty >
  inline bool operator != ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty >
  inline bool operator > ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( _Right < _Left );
 }
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty >
  inline bool operator <= ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty >
  inline bool operator >= ( const _Ty & _Left, const _Ty & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
namespace std { 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Tuple> struct tuple_size; 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Tuple, class 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
 = void> 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct _Tuple_size_sfinae { 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Tuple> 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct _Tuple_size_sfinae< _Tuple, void_t< decltype(tuple_size< _Tuple> ::value)> >  : public integral_constant< unsigned __int64, tuple_size< _Tuple> ::value>  { 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Tuple> 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_size< const _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Tuple> 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_size< volatile _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Tuple> 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_size< const volatile _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Ty> constexpr size_t 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
tuple_size_v = (tuple_size< _Ty> ::value); 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< size_t _Index, class 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Tuple> struct tuple_element; 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< size_t _Index, class 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Tuple> 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_element< _Index, const _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using type = std::add_const_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< size_t _Index, class 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Tuple> 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_element< _Index, volatile _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using type = std::add_volatile_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< size_t _Index, class 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Tuple> 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_element< _Index, const volatile _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using type = std::add_cv_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< size_t _Index, class 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Tuple> using tuple_element_t = typename tuple_element< _Index, _Tuple> ::type; 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Ty, size_t 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Size> class array; 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Ty, size_t 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Size> 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_size< array< _Ty, _Size> >  : public integral_constant< unsigned __int64, _Size>  { 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< size_t _Idx, class 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Ty, size_t 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Size> 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_element< _Idx, array< _Ty, _Size> >  { 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
static_assert((_Idx < _Size), "array index out of bounds");
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using type = _Ty; 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class ..._Types> 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_size< tuple< _Types...> >  : public integral_constant< unsigned __int64, sizeof...(_Types)>  { 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< size_t _Index> 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_element< _Index, tuple< > >  { 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
static_assert((_Always_false< integral_constant< size_t, _Index> > ), "tuple index out of bounds");
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _This, class ...
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Rest> 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_element< 0, tuple< _This, _Rest...> >  { 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using type = _This; 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using _Ttype = tuple< _This, _Rest...> ; 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< size_t _Index, class 
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_This, class ...
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Rest> 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_element< _Index, tuple< _This, _Rest...> >  : public std::tuple_element< _Index - (1), tuple< _Rest...> >  { 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< class _Ty1, class 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Ty2> 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_size< pair< _Ty1, _Ty2> >  : public integral_constant< unsigned __int64, 2Ui64>  { 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template< size_t _Idx, class 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Ty1, class 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
_Ty2> 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
struct tuple_element< _Idx, pair< _Ty1, _Ty2> >  { 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
static_assert((_Idx < (2)), "pair index out of bounds");
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using type = conditional_t< _Idx == (0), _Ty1, _Ty2> ; 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}; 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ret,
 class _Pair >
 constexpr _Ret _Pair_get ( _Pair & _Pr,
  integral_constant < size_t, 0 > ) noexcept
 {
 return ( _Pr . first );
 }
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ret,
 class _Pair >
 constexpr _Ret _Pair_get ( _Pair & _Pr,
  integral_constant < size_t, 1 > ) noexcept
 {
 return ( _Pr . second );
 }
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < size_t _Idx,
 class _Ty1,
 class _Ty2 >
  constexpr tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > &
  get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 using _Rtype = tuple_element_t < _Idx, pair < _Ty1, _Ty2 >> &;
 return ( _Pair_get < _Rtype > ( _Pr, integral_constant < size_t, _Idx > ( ) ) );
 }
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr _Ty1 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( _Pr ) );
 }
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty2,
 class _Ty1 >
  constexpr _Ty2 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( _Pr ) );
 }
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < size_t _Idx,
 class _Ty1,
 class _Ty2 >
  constexpr const tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > &
  get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 using _Ctype = const tuple_element_t < _Idx, pair < _Ty1, _Ty2 >> &;
 return ( _Pair_get < _Ctype > ( _Pr, integral_constant < size_t, _Idx > ( ) ) );
 }
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr const _Ty1 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( _Pr ) );
 }
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty2,
 class _Ty1 >
  constexpr const _Ty2 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( _Pr ) );
 }
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < size_t _Idx,
 class _Ty1,
 class _Ty2 >
  constexpr tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > &&
  get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 using _RRtype = tuple_element_t < _Idx, pair < _Ty1, _Ty2 >> &&;
 return ( :: std :: forward < _RRtype > ( :: std :: get < _Idx > ( _Pr ) ) );
 }
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr _Ty1 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( :: std :: move ( _Pr ) ) );
 }
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty2,
 class _Ty1 >
  constexpr _Ty2 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( :: std :: move ( _Pr ) ) );
 }
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < size_t _Idx,
 class _Ty1,
 class _Ty2 >
  constexpr const tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > &&
  get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 using _RRtype = const tuple_element_t < _Idx, pair < _Ty1, _Ty2 >> &&;
 return ( :: std :: forward < _RRtype > ( :: std :: get < _Idx > ( _Pr ) ) );
 }
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty1,
 class _Ty2 >
  constexpr const _Ty1 && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 return ( :: std :: get < 0 > ( :: std :: move ( _Pr ) ) );
 }
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty2,
 class _Ty1 >
  constexpr const _Ty2 && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept
 {
 return ( :: std :: get < 1 > ( :: std :: move ( _Pr ) ) );
 }
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty,
 class _Other = _Ty > inline
 _Ty exchange ( _Ty & _Val, _Other && _New_val )
 {
 _Ty _Old_val = :: std :: move ( _Val );
 _Val = :: std :: forward < _Other > ( _New_val );
 return ( _Old_val );
 }
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty >
  constexpr add_const_t < _Ty > & as_const ( _Ty & _Val ) noexcept
 {
 return ( _Val );
 }
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
template < class _Ty >
 void as_const ( const _Ty && ) = delete;
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 { 
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using std::get;
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using std::tuple_element;
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
using std::tuple_size;
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
}
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
#pragma warning(pop)
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
extern "C" {
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_1(void * _First, void * _Last) noexcept; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_2(void * _First, void * _Last) noexcept; 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_4(void * _First, void * _Last) noexcept; 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_8(void * _First, void * _Last) noexcept; 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
namespace std { 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Container_proxy; 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Container_base12; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Iterator_base12; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Container_base0 { 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
void _Orphan_all() noexcept 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
void _Swap_all(_Container_base0 &) noexcept 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Iterator_base0 { 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
void _Adopt(const void *) noexcept 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
const _Container_base0 *_Getcont() const noexcept 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
return nullptr; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
static constexpr bool _Unwrap_when_unverified = true; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Container_proxy { 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Container_proxy() noexcept : _Mycont((nullptr)), _Myfirstiter((nullptr)) 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
const _Container_base12 *_Mycont; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Iterator_base12 *_Myfirstiter; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Container_base12 { 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Container_base12() : _Myproxy((nullptr)) 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Container_base12(const _Container_base12 &) noexcept : _Myproxy((nullptr)) 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Container_base12 &operator=(const _Container_base12 &) noexcept 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
return *this; 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Iterator_base12 **_Getpfirst() const noexcept 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
return ((_Myproxy) == (nullptr)) ? nullptr : (&((_Myproxy)->_Myfirstiter)); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
inline void _Orphan_all() noexcept; 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
inline void _Swap_all(_Container_base12 &) noexcept; 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Container_proxy *_Myproxy; 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Iterator_base12 { 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Iterator_base12() noexcept : _Myproxy((nullptr)), _Mynextiter((nullptr)) 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Iterator_base12(const _Iterator_base12 &_Right) noexcept : _Myproxy((nullptr)), _Mynextiter((nullptr)) 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
((*this) = _Right); 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Iterator_base12 &operator=(const _Iterator_base12 &_Right) noexcept 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
if ((_Myproxy) != (_Right._Myproxy)) 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
if ((_Right._Myproxy) == (nullptr)) 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} else 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
this->_Adopt((_Right._Myproxy)->_Mycont); 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}  
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}  
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
return *this; 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
~_Iterator_base12() noexcept 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
void _Adopt(const _Container_base12 *_Parent) noexcept 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
if (_Parent == (nullptr)) 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} else 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Container_proxy *_Parent_proxy = _Parent->_Myproxy; 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
(_Myproxy) = _Parent_proxy; 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}  
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
void _Clrcont() noexcept 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
(_Myproxy) = (nullptr); 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
const _Container_base12 *_Getcont() const noexcept 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
return ((_Myproxy) == (nullptr)) ? nullptr : ((_Myproxy)->_Mycont); 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Iterator_base12 **_Getpnext() noexcept 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
return &(_Mynextiter); 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
void _Orphan_me() noexcept 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
static constexpr bool _Unwrap_when_unverified = (0 == 0); 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Container_proxy *_Myproxy; 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Iterator_base12 *_Mynextiter; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
inline void _Container_base12::_Orphan_all() noexcept 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
inline void _Container_base12::_Swap_all(_Container_base12 &_Right) noexcept 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Container_proxy *_Temp = _Myproxy; 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
(_Myproxy) = (_Right._Myproxy); 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
(_Right._Myproxy) = _Temp; 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
if ((_Myproxy) != (nullptr)) { 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
((_Myproxy)->_Mycont) = ((_Container_base12 *)this); }  
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
if ((_Right._Myproxy) != (nullptr)) { 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
((_Right._Myproxy)->_Mycont) = ((_Container_base12 *)(&_Right)); }  
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using _Container_base = _Container_base0; 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using _Iterator_base = _Iterator_base0; 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Zero_then_variadic_args_t { 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _One_then_variadic_args_t { 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty1,
 class _Ty2,
 bool = is_empty_v < _Ty1 > && ! is_final_v < _Ty1 > >
 class _Compressed_pair
  : private _Ty1
 {
private :
 _Ty2 _Myval2;

 using _Mybase = _Ty1;

public :
 template < class ... _Other2 >
  constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t,
   _Other2 && ... _Val2 )
  : _Ty1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }

 template < class _Other1,
  class ... _Other2 >
  _Compressed_pair ( _One_then_variadic_args_t,
   _Other1 && _Val1, _Other2 && ... _Val2 )
  : _Ty1 ( :: std :: forward < _Other1 > ( _Val1 ) ),
   _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }

 _Ty1 & _Get_first ( ) noexcept
  {
  return ( * this );
  }

 const _Ty1 & _Get_first ( ) const noexcept
  {
  return ( * this );
  }

 _Ty2 & _Get_second ( ) noexcept
  {
  return ( _Myval2 );
  }

 const _Ty2 & _Get_second ( ) const noexcept
  {
  return ( _Myval2 );
  }
 };
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty1,
 class _Ty2 >
 class _Compressed_pair < _Ty1, _Ty2, false >
 {
private :
 _Ty1 _Myval1;
 _Ty2 _Myval2;

public :
 template < class ... _Other2 >
  constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t,
   _Other2 && ... _Val2 )
  : _Myval1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }

 template < class _Other1,
  class ... _Other2 >
  _Compressed_pair ( _One_then_variadic_args_t,
   _Other1 && _Val1, _Other2 && ... _Val2 )
  : _Myval1 ( :: std :: forward < _Other1 > ( _Val1 ) ),
   _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... )
  {
  }

 _Ty1 & _Get_first ( ) noexcept
  {
  return ( _Myval1 );
  }

 const _Ty1 & _Get_first ( ) const noexcept
  {
  return ( _Myval1 );
  }

 _Ty2 & _Get_second ( ) noexcept
  {
  return ( _Myval2 );
  }

 const _Ty2 & _Get_second ( ) const noexcept
  {
  return ( _Myval2 );
  }
 };
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Fx> 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Ref_fn { 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class ... _Args >
  constexpr decltype ( auto ) operator ( ) ( _Args && ... _Vals )
  {
  return ( _Fn ( :: std :: forward < _Args > ( _Vals ) ... ) );
  }
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Fx &_Fn; 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Fn> constexpr bool 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Pass_functor_by_value_v = (sizeof(_Fn) <= sizeof(void *)) && conjunction_v< is_trivially_copy_constructible< _Fn> , is_trivially_destructible< _Fn> > ; 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Fn,
 enable_if_t < _Pass_functor_by_value_v < _Fn >, int > = 0 >
 constexpr _Fn _Pass_fn ( _Fn _Val )
 {
 return ( _Val );
 }
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Fn,
 enable_if_t < ! _Pass_functor_by_value_v < _Fn >, int > = 0 >
 constexpr _Ref_fn < _Fn > _Pass_fn ( _Fn & _Val )
 {
 return { _Val };
 }
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct input_iterator_tag { 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct output_iterator_tag { 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct forward_iterator_tag : public input_iterator_tag { 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct bidirectional_iterator_tag : public forward_iterator_tag { 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct random_access_iterator_tag : public bidirectional_iterator_tag { 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _General_ptr_iterator_tag { 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Trivially_copyable_ptr_iterator_tag : public _General_ptr_iterator_tag { 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Really_trivial_ptr_iterator_tag : public _Trivially_copyable_ptr_iterator_tag { 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Unused_parameter { 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
constexpr _Unused_parameter() noexcept = default;
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty >
  constexpr _Unused_parameter ( _Ty && ) noexcept { }
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using _Any_tag = _Unused_parameter; 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty> using _Algorithm_int_t = conditional_t< is_integral_v< _Ty> , _Ty, __int64> ; 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class , class 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
 = void> 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Iterator_traits_base { 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Iterator_traits_base< _Iter, void_t< typename _Iter::iterator_category, typename _Iter::value_type, typename _Iter::difference_type, typename _Iter::pointer, typename _Iter::reference> >  { 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using iterator_category = typename _Iter::iterator_category; 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using value_type = typename _Iter::value_type; 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using difference_type = typename _Iter::difference_type; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using pointer = typename _Iter::pointer; 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using reference = typename _Iter::reference; 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty, bool 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
 = is_object_v< _Ty> > 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Iterator_traits_pointer_base { 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using iterator_category = random_access_iterator_tag; 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using value_type = remove_cv_t< _Ty> ; 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using difference_type = ptrdiff_t; 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using pointer = _Ty *; 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using reference = _Ty &; 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty> 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Iterator_traits_pointer_base< _Ty, false>  { 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct iterator_traits : public _Iterator_traits_base< _Iter>  { 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty> 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct iterator_traits< _Ty *>  : public _Iterator_traits_pointer_base< _Ty>  { 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> using _Iter_value_t = typename iterator_traits< _Iter> ::value_type; 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> using _Iter_diff_t = typename iterator_traits< _Iter> ::difference_type; 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class ..._Iters> using _Common_diff_t = common_type_t< _Iter_diff_t< _Iters> ...> ; 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> using _Iter_cat_t = typename iterator_traits< _Iter> ::iterator_category; 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty, class 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
 = void> constexpr bool 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Is_iterator_v = false; 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty> constexpr bool 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Is_iterator_v< _Ty, void_t< _Iter_cat_t< _Ty> > >  = true; 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty> 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Is_iterator : public bool_constant< _Is_iterator_v< _Ty, void> >  { 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> constexpr bool 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Is_input_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , input_iterator_tag> ; 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> constexpr bool 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Is_fwd_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , forward_iterator_tag> ; 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> constexpr bool 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Is_bidi_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , bidirectional_iterator_tag> ; 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> constexpr bool 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Is_random_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , random_access_iterator_tag> ; 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class , class 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
 = void> 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Is_checked_helper { 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter, class 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Sentinel = _Iter, class 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
 = void> 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Range_verifiable : public false_type { 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter, class 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Sentinel> 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Range_verifiable< _Iter, _Sentinel, void_t< decltype((_Verify_range(std::declval< const _Iter &> (), std::declval< const _Sentinel &> ())))> >  : public true_type { 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter, class 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Sentinel = _Iter> constexpr bool 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Range_verifiable_v = (_Range_verifiable< _Iter, _Sentinel> ::value); 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 class _Sentinel >
 constexpr void _Adl_verify_range1 ( const _Iter & _First, const _Sentinel & _Last, true_type )
 {
 _Verify_range ( _First, _Last );
 }
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 class _Sentinel >
 constexpr void _Adl_verify_range1 ( const _Iter &, const _Sentinel &, false_type )
 {
 }
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 class _Sentinel >
 constexpr void _Adl_verify_range ( const _Iter & _First, const _Sentinel & _Last )
 {
 _Adl_verify_range1 ( _First, _Last, bool_constant < _Range_verifiable_v < _Iter, _Sentinel >> { } );
 }
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter, class 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
 = void> 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Unwrappable : public false_type { 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Unwrappable< _Iter, void_t< decltype(((std::declval< _Iter &> ()._Seek_to((std::declval< const _Iter &> ()._Unwrapped())))))> >  : public true_type { 
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> constexpr bool 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Unwrappable_v = (_Unwrappable< _Iter> ::value); 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 enable_if_t < _Unwrappable_v < _Iter >, int > = 0 >
  constexpr auto _Get_unwrapped ( const _Iter & _It )
 {
 return ( _It . _Unwrapped ( ) );
 }
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 enable_if_t < ! _Unwrappable_v < _Iter >, int > = 0 >
  constexpr const _Iter & _Get_unwrapped ( const _Iter & _It )
 {
 return ( _It );
 }
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 enable_if_t < ! _Unwrappable_v < _Iter >, int > = 0 >
  constexpr const _Iter && _Get_unwrapped ( const _Iter && _It )
 {
 return ( static_cast < const _Iter && > ( _It ) );
 }
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty >
  constexpr _Ty * _Get_unwrapped ( _Ty * const _Ptr )
 {
 return ( _Ptr );
 }
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> using _Unwrapped_t = remove_cv_t< remove_reference_t< decltype((_Get_unwrapped(std::declval< const _Iter &> ())))> > ; 
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter, class 
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
 = bool> 
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Do_unwrap_when_unverified : public false_type { 
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Do_unwrap_when_unverified< _Iter, decltype((static_cast< bool>(_Iter::_Unwrap_when_unverified)))>  : public bool_constant< static_cast< bool>(_Iter::_Unwrap_when_unverified)>  { 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> constexpr bool 
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Do_unwrap_when_unverified_v = (_Do_unwrap_when_unverified< _Iter> ::value); 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> constexpr bool 
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Unwrappable_for_unverified_v = _Unwrappable_v< _Iter>  && _Do_unwrap_when_unverified_v< _Iter> ; 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 enable_if_t < _Unwrappable_for_unverified_v < _Iter >, int > = 0 >
  constexpr auto _Get_unwrapped_unverified ( const _Iter & _It )
 {
 return ( _It . _Unwrapped ( ) );
 }
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 enable_if_t < ! _Unwrappable_for_unverified_v < _Iter >, int > = 0 >
  constexpr const _Iter & _Get_unwrapped_unverified ( const _Iter & _It )
 {
 return ( _It );
 }
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 enable_if_t < ! _Unwrappable_for_unverified_v < _Iter >, int > = 0 >
  constexpr const _Iter && _Get_unwrapped_unverified ( const _Iter && _It )
 {
 return ( static_cast < const _Iter && > ( _It ) );
 }
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty >
  constexpr _Ty * _Get_unwrapped_unverified ( _Ty * const _Ptr )
 {
 return ( _Ptr );
 }
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> using _Unwrapped_unverified_t = remove_cv_t< remove_reference_t< decltype((_Get_unwrapped_unverified(std::declval< const _Iter &> ())))> > ; 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Distance_unknown { 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
constexpr _Distance_unknown operator-() const noexcept 
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
return {}; 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Diff> constexpr _Diff 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Max_possible_v = (static_cast< _Diff>((static_cast< make_unsigned_t< _Diff> >(-1)) >> 1)); 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Diff> constexpr _Diff 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Min_possible_v = ((-_Max_possible_v< _Diff> ) - 1); 
#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter, class 
#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
 = void> 
#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Offset_verifiable : public false_type { 
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Offset_verifiable< _Iter, void_t< decltype(((std::declval< const _Iter &> ()._Verify_offset(_Iter_diff_t< _Iter> {}))))> >  : public true_type { 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 750 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> constexpr bool 
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Offset_verifiable_v = (_Offset_verifiable< _Iter> ::value); 
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> constexpr bool 
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Unwrappable_for_offset_v = _Unwrappable_v< _Iter>  && _Offset_verifiable_v< _Iter> ; 
#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 class _Diff,
 enable_if_t < _Unwrappable_for_offset_v < _Iter > && is_integral_v < _Diff >, int > = 0 >
  constexpr auto _Get_unwrapped_n ( const _Iter & _It, const _Diff _Off )
 {
 using _IDiff = _Iter_diff_t < _Iter >;
 using _CDiff = common_type_t < _Diff, _IDiff >;
 const auto _COff = static_cast < _CDiff > ( _Off );

 ;

 ( void ) _COff;

 _It . _Verify_offset ( static_cast < _IDiff > ( _Off ) );
 return ( _It . _Unwrapped ( ) );
 }
#line 774 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 class _Diff,
 enable_if_t < _Unwrappable_for_unverified_v < _Iter >
  && ( ( ! _Unwrappable_for_offset_v < _Iter > && is_integral_v < _Diff > )
   || is_same_v < _Diff, _Distance_unknown > ), int > = 0 >
  constexpr auto _Get_unwrapped_n ( const _Iter & _It, _Diff )
 {
 return ( _It . _Unwrapped ( ) );
 }
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 class _Diff,
 enable_if_t < ! _Unwrappable_for_unverified_v < _Iter >
  && ( ( ! _Unwrappable_for_offset_v < _Iter > && is_integral_v < _Diff > )
   || is_same_v < _Diff, _Distance_unknown > ), int > = 0 >
  constexpr const _Iter & _Get_unwrapped_n ( const _Iter & _It, _Diff )
 {
 return ( _It );
 }
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 class _Diff,
 enable_if_t < ! _Unwrappable_for_unverified_v < _Iter >
  && ( ( ! _Unwrappable_for_offset_v < _Iter > && is_integral_v < _Diff > )
   || is_same_v < _Diff, _Distance_unknown > ), int > = 0 >
  constexpr const _Iter && _Get_unwrapped_n ( const _Iter && _It, _Diff )
 {
 return ( static_cast < const _Iter && > ( _It ) );
 }
#line 804 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 class _Diff,
 enable_if_t < is_same_v < _Diff, _Distance_unknown > || is_integral_v < _Diff >, int > = 0 >
  constexpr _Ty * _Get_unwrapped_n ( _Ty * const _Src, _Diff )
 {
 return ( _Src );
 }
#line 812 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter> using _Unwrapped_n_t = remove_cv_t< remove_reference_t< decltype((_Get_unwrapped_n(std::declval< const _Iter &> (), _Iter_diff_t< _Iter> {})))> > ; 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter, class 
#line 818 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_UIter, class 
#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
 = void> 
#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Wrapped_seekable : public false_type { 
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 825 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter, class 
#line 826 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_UIter> 
#line 827 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Wrapped_seekable< _Iter, _UIter, void_t< decltype(((std::declval< _Iter &> ()._Seek_to(std::declval< const _UIter &> ()))))> >  : public true_type { 
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Iter, class 
#line 834 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_UIter> constexpr bool 
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Wrapped_seekable_v = (_Wrapped_seekable< _Iter, _UIter> ::value); 
#line 852 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 class _UIter,
 enable_if_t < _Wrapped_seekable_v < _Iter, _UIter >, int > = 0 >
 constexpr void _Seek_wrapped ( _Iter & _It, const _UIter & _UIt )
 {
 _It . _Seek_to ( _UIt );
 }
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter,
 class _UIter,
 enable_if_t < ! _Wrapped_seekable_v < _Iter, _UIter >, int > = 0 >
 constexpr void _Seek_wrapped ( _Iter & _It, const _UIter & _UIt )
 {
 _It = _UIt;
 }
#line 869 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty >
 constexpr void _Seek_wrapped ( _Ty * & _It, _Ty * const _UIt )
 {
 _It = _UIt;
 }
#line 906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< size_t _Value> 
#line 907 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Priority_tag : public _Priority_tag< _Value - (1)>  { 
#line 910 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template<> struct _Priority_tag< 0Ui64>  { 
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 957 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Checked,
 class _Iter > inline
 _Distance_unknown _Idl_distance1 ( const _Iter &, const _Iter &, input_iterator_tag )
 {
 return { };
 }
#line 964 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Checked,
 class _Iter > inline
 _Iter_diff_t < _Checked > _Idl_distance1 ( const _Iter & _First, const _Iter & _Last, random_access_iterator_tag )
 {
 return ( static_cast < _Iter_diff_t < _Checked >> ( _Last - _First ) );
 }
#line 971 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Checked,
 class _Iter > inline
 auto _Idl_distance ( const _Iter & _First, const _Iter & _Last )
 {
 return ( _Idl_distance1 < _Checked > ( _First, _Last, _Iter_cat_t < _Iter > ( ) ) );
 }
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty1, class 
#line 981 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Ty2> 
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Is_same_size : public bool_constant< sizeof(_Ty1) == sizeof(_Ty2)>  { 
#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem, bool 
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Is_enum = is_enum_v< _Elem> > 
#line 990 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Unwrap_enum { 
#line 992 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using type = underlying_type_t< _Elem> ; 
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 995 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem> 
#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Unwrap_enum< _Elem, false>  { 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using type = _Elem; 
#line 999 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem> using _Unwrap_enum_t = typename _Unwrap_enum< _Elem> ::type; 
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty1, class 
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Ty2> 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Both_or_neither_bool : public bool_constant< is_same_v< bool, _Ty1>  == is_same_v< bool, _Ty2> >  { 
#line 1010 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Source, class 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Dest> 
#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Ptr_cat_helper { 
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using _USource = _Unwrap_enum_t< _Source> ; 
#line 1018 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using _UDest = _Unwrap_enum_t< _Dest> ; 
#line 1019 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using type = conditional_t< conjunction_v< _Is_same_size< _USource, _UDest> , is_integral< _USource> , is_integral< _UDest> , _Both_or_neither_bool< _USource, _UDest> > , _Really_trivial_ptr_iterator_tag, _General_ptr_iterator_tag> ; 
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem> 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Ptr_cat_helper< _Elem, _Elem>  { 
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using type = conditional_t< is_trivially_copyable_v< _Elem> , conditional_t< is_trivial_v< _Elem> , _Really_trivial_ptr_iterator_tag, _Trivially_copyable_ptr_iterator_tag> , _General_ptr_iterator_tag> ; 
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Anything> 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Ptr_cat_helper< _Anything *, const _Anything *>  { 
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using type = _Really_trivial_ptr_iterator_tag; 
#line 1042 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Anything> 
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Ptr_cat_helper< _Anything *, volatile _Anything *>  { 
#line 1047 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using type = _Really_trivial_ptr_iterator_tag; 
#line 1048 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Anything> 
#line 1051 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Ptr_cat_helper< _Anything *, const volatile _Anything *>  { 
#line 1053 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using type = _Really_trivial_ptr_iterator_tag; 
#line 1054 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Source,
 class _Dest > inline
 _General_ptr_iterator_tag _Ptr_copy_cat ( const _Source &, const _Dest & )
 {
 return { };
 }
#line 1063 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Source,
 class _Dest > inline
 conditional_t < is_trivially_assignable_v < _Dest &, _Source & >,
  typename _Ptr_cat_helper < remove_cv_t < _Source >, remove_cv_t < _Dest > > :: type,
  _General_ptr_iterator_tag >
  _Ptr_copy_cat ( _Source * const &, _Dest * const & )
 {
 return { };
 }
#line 1073 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Source,
 class _Dest > inline
 _General_ptr_iterator_tag _Ptr_move_cat ( const _Source &, const _Dest & )
 {
 return { };
 }
#line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Source,
 class _Dest > inline
 conditional_t < is_trivially_assignable_v < _Dest &, _Source >,
  typename _Ptr_cat_helper < remove_cv_t < _Source >, remove_cv_t < _Dest > > :: type,
  _General_ptr_iterator_tag >
  _Ptr_move_cat ( _Source * const &, _Dest * const & )
 {
 return { };
 }
#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Diff >
 inline void _Advance1 ( _InIt & _Where, _Diff _Off, input_iterator_tag )
 {
 ;
 for (; 0 < _Off; -- _Off )
  {
  ++ _Where;
  }
 }
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt,
 class _Diff >
 inline void _Advance1 ( _BidIt & _Where, _Diff _Off, bidirectional_iterator_tag )
 {
 for (; 0 < _Off; -- _Off )
  {
  ++ _Where;
  }


#pragma warning(suppress: 6294)

 for (; _Off < 0; ++ _Off )
  {
  -- _Where;
  }
 }
#line 1204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _RanIt,
 class _Diff >
 inline void _Advance1 ( _RanIt & _Where, _Diff _Off, random_access_iterator_tag )
 {
 _Where += _Off;
 }
#line 1211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Diff >
 inline void advance ( _InIt & _Where, _Diff _Off )
 {

 _Advance1 ( _Where, _Off, _Iter_cat_t < remove_const_t < _InIt >> ( ) );
 }
#line 1220 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt >
 inline _Iter_diff_t < _InIt > _Distance1 ( _InIt _First, _InIt _Last, input_iterator_tag )
 {
 _Iter_diff_t < _InIt > _Off = 0;
 for (; _First != _Last; ++ _First )
  {
  ++ _Off;
  }

 return ( _Off );
 }
#line 1232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _RanIt >
 inline _Iter_diff_t < _RanIt > _Distance1 ( _RanIt _First, _RanIt _Last, random_access_iterator_tag )
 {
 return ( _Last - _First );
 }
#line 1238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt >
  inline _Iter_diff_t < _InIt > distance ( _InIt _First, _InIt _Last )
 {
 return ( _Distance1 ( _First, _Last, _Iter_cat_t < _InIt > ( ) ) );
 }
#line 1245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt >
 constexpr _InIt _Next_iter ( _InIt _First )
 {
 return ( ++ _First );
 }
#line 1252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt >
  inline _InIt next ( _InIt _First, _Iter_diff_t < _InIt > _Off = 1 )
 {
 static_assert ( _Is_input_iter_v < _InIt >, "next requires input iterator" );

 :: std :: advance ( _First, _Off );
 return ( _First );
 }
#line 1262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt >
 constexpr _BidIt _Prev_iter ( _BidIt _First )
 {
 return ( -- _First );
 }
#line 1269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt >
  inline _BidIt prev ( _BidIt _First, _Iter_diff_t < _BidIt > _Off = 1 )
 {
 static_assert ( _Is_bidi_iter_v < _BidIt >, "prev requires bidirectional iterator" );

 :: std :: advance ( _First, - _Off );
 return ( _First );
 }
#line 1279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty >
 struct pointer_traits;
#line 1282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iterator >
 constexpr _Iterator _Operator_arrow ( _Iterator _Target, true_type )
 {
 return ( _Target );
 }
#line 1288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iterator >
 constexpr decltype ( auto ) _Operator_arrow ( _Iterator && _Target, false_type )
 {
 return ( :: std :: forward < _Iterator > ( _Target ) . operator -> ( ) );
 }
#line 1294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt >
 class reverse_iterator
 {
public :
 using iterator_category = typename iterator_traits < _BidIt > :: iterator_category;
 using value_type = typename iterator_traits < _BidIt > :: value_type;
 using difference_type = typename iterator_traits < _BidIt > :: difference_type;
 using pointer = typename iterator_traits < _BidIt > :: pointer;
 using reference = typename iterator_traits < _BidIt > :: reference;

 using iterator_type = _BidIt;

 inline reverse_iterator ( )
  : current ( )
  {
  }

 inline explicit reverse_iterator ( _BidIt _Right )
  : current ( _Right )
  {
  }

 template < class _Other >
  inline reverse_iterator ( const reverse_iterator < _Other > & _Right )
  : current ( _Right . base ( ) )
  {
  }

 template < class _Other >
  inline reverse_iterator & operator = ( const reverse_iterator < _Other > & _Right )
  {
  current = _Right . base ( );
  return ( * this );
  }

  inline _BidIt base ( ) const
  {
  return ( current );
  }

  inline reference operator * ( ) const
  {
  _BidIt _Tmp = current;
  return ( * -- _Tmp );
  }

  inline pointer operator -> ( ) const
  {
  _BidIt _Tmp = current;
  -- _Tmp;
  return ( _Operator_arrow ( _Tmp, is_pointer < _BidIt > ( ) ) );
  }

 inline reverse_iterator & operator ++ ( )
  {
  -- current;
  return ( * this );
  }

 inline reverse_iterator operator ++ ( int )
  {
  reverse_iterator _Tmp = * this;
  -- current;
  return ( _Tmp );
  }

 inline reverse_iterator & operator -- ( )
  {
  ++ current;
  return ( * this );
  }

 inline reverse_iterator operator -- ( int )
  {
  reverse_iterator _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }



 inline reverse_iterator & operator += ( const difference_type _Off )
  {
  current -= _Off;
  return ( * this );
  }

  inline reverse_iterator operator + ( const difference_type _Off ) const
  {
  return ( reverse_iterator ( current - _Off ) );
  }

 inline reverse_iterator & operator -= ( const difference_type _Off )
  {
  current += _Off;
  return ( * this );
  }

  inline reverse_iterator operator - ( const difference_type _Off ) const
  {
  return ( reverse_iterator ( current + _Off ) );
  }

  inline reference operator [ ] ( const difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

 template < class _BidIt2 = _BidIt,
  enable_if_t < _Offset_verifiable_v < _BidIt2 >, int > = 0 >
  constexpr void _Verify_offset ( const difference_type _Off ) const
  {
  do { if ( _Off != _Min_possible_v < difference_type > ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
  current . _Verify_offset ( - _Off );
  }

 template < class _BidIt2 = _BidIt,
  enable_if_t < _Unwrappable_v < _BidIt2 >, int > = 0 >
   constexpr reverse_iterator < _Unwrapped_t < _BidIt2 >> _Unwrapped ( ) const
  {
  return ( static_cast < reverse_iterator < _Unwrapped_t < _BidIt2 >> > ( current . _Unwrapped ( ) ) );
  }

 static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v < _BidIt >;

 template < class _Src,
  enable_if_t < _Wrapped_seekable_v < _BidIt, _Src >, int > = 0 >
  constexpr void _Seek_to ( const reverse_iterator < _Src > & _It )
  {
  current . _Seek_to ( _It . base ( ) );
  }
protected :
 _BidIt current;
 };
#line 1429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt,
 class _BidIt2,
 enable_if_t < _Range_verifiable_v < _BidIt, _BidIt2 >, int > = 0 >
 constexpr void _Verify_range ( const reverse_iterator < _BidIt > & _First, const reverse_iterator < _BidIt2 > & _Last )
 {

 _Verify_range ( _Last . base ( ), _First . base ( ) );
 }
#line 1438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt >
  inline reverse_iterator < _BidIt > operator + (
  typename reverse_iterator < _BidIt > :: difference_type _Off,
  const reverse_iterator < _BidIt > & _Right )
 {
 return ( _Right + _Off );
 }
#line 1446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 >
  inline auto operator - ( const reverse_iterator < _BidIt1 > & _Left,
  const reverse_iterator < _BidIt2 > & _Right )
   -> decltype ( _Right . base ( ) - _Left . base ( ) )
 {
 return ( _Right . base ( ) - _Left . base ( ) );
 }
#line 1455 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 >
  inline bool operator == ( const reverse_iterator < _BidIt1 > & _Left,
  const reverse_iterator < _BidIt2 > & _Right )
 {
 return ( _Left . base ( ) == _Right . base ( ) );
 }
#line 1463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 >
  inline bool operator != ( const reverse_iterator < _BidIt1 > & _Left,
  const reverse_iterator < _BidIt2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 1471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 >
  inline bool operator < ( const reverse_iterator < _BidIt1 > & _Left,
  const reverse_iterator < _BidIt2 > & _Right )
 {
 return ( _Right . base ( ) < _Left . base ( ) );
 }
#line 1479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 >
  inline bool operator > ( const reverse_iterator < _BidIt1 > & _Left,
  const reverse_iterator < _BidIt2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 1487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 >
  inline bool operator <= ( const reverse_iterator < _BidIt1 > & _Left,
  const reverse_iterator < _BidIt2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 1495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 >
  inline bool operator >= ( const reverse_iterator < _BidIt1 > & _Left,
  const reverse_iterator < _BidIt2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 1504 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt >
  inline reverse_iterator < _BidIt > make_reverse_iterator ( _BidIt _Iter )
 {
 return ( reverse_iterator < _BidIt > ( _Iter ) );
 }
#line 1511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline auto begin ( _Container & _Cont ) -> decltype ( _Cont . begin ( ) )
 {
 return ( _Cont . begin ( ) );
 }
#line 1517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline auto begin ( const _Container & _Cont ) -> decltype ( _Cont . begin ( ) )
 {
 return ( _Cont . begin ( ) );
 }
#line 1523 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline auto end ( _Container & _Cont ) -> decltype ( _Cont . end ( ) )
 {
 return ( _Cont . end ( ) );
 }
#line 1529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline auto end ( const _Container & _Cont ) -> decltype ( _Cont . end ( ) )
 {
 return ( _Cont . end ( ) );
 }
#line 1535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
  constexpr _Ty * begin ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array );
 }
#line 1542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
  constexpr _Ty * end ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array + _Size );
 }
#line 1550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  constexpr auto cbegin ( const _Container & _Cont )
  noexcept ( noexcept ( :: std :: begin ( _Cont ) ) )
  -> decltype ( :: std :: begin ( _Cont ) )
 {
 return ( :: std :: begin ( _Cont ) );
 }
#line 1558 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  constexpr auto cend ( const _Container & _Cont )
  noexcept ( noexcept ( :: std :: end ( _Cont ) ) )
  -> decltype ( :: std :: end ( _Cont ) )
 {
 return ( :: std :: end ( _Cont ) );
 }
#line 1567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline auto rbegin ( _Container & _Cont ) -> decltype ( _Cont . rbegin ( ) )
 {
 return ( _Cont . rbegin ( ) );
 }
#line 1573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline auto rbegin ( const _Container & _Cont ) -> decltype ( _Cont . rbegin ( ) )
 {
 return ( _Cont . rbegin ( ) );
 }
#line 1579 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline auto rend ( _Container & _Cont ) -> decltype ( _Cont . rend ( ) )
 {
 return ( _Cont . rend ( ) );
 }
#line 1585 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline auto rend ( const _Container & _Cont ) -> decltype ( _Cont . rend ( ) )
 {
 return ( _Cont . rend ( ) );
 }
#line 1591 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
  inline reverse_iterator < _Ty * > rbegin ( _Ty ( & _Array ) [ _Size ] )
 {
 return ( reverse_iterator < _Ty * > ( _Array + _Size ) );
 }
#line 1598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
  inline reverse_iterator < _Ty * > rend ( _Ty ( & _Array ) [ _Size ] )
 {
 return ( reverse_iterator < _Ty * > ( _Array ) );
 }
#line 1605 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Elem >
  inline reverse_iterator < const _Elem * >
  rbegin ( initializer_list < _Elem > _Ilist )
 {
 return ( reverse_iterator < const _Elem * > ( _Ilist . end ( ) ) );
 }
#line 1612 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Elem >
  inline reverse_iterator < const _Elem * >
  rend ( initializer_list < _Elem > _Ilist )
 {
 return ( reverse_iterator < const _Elem * > ( _Ilist . begin ( ) ) );
 }
#line 1620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline auto crbegin ( const _Container & _Cont )
  -> decltype ( :: std :: rbegin ( _Cont ) )
 {
 return ( :: std :: rbegin ( _Cont ) );
 }
#line 1627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline auto crend ( const _Container & _Cont )
  -> decltype ( :: std :: rend ( _Cont ) )
 {
 return ( :: std :: rend ( _Cont ) );
 }
#line 1635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  constexpr auto size ( const _Container & _Cont )
  -> decltype ( _Cont . size ( ) )
 {
 return ( _Cont . size ( ) );
 }
#line 1642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
  constexpr size_t size ( const _Ty ( & ) [ _Size ] ) noexcept
 {
 return ( _Size );
 }
#line 1649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  constexpr auto empty ( const _Container & _Cont )
  -> decltype ( _Cont . empty ( ) )
 {
 return ( _Cont . empty ( ) );
 }
#line 1656 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
  constexpr bool empty ( const _Ty ( & ) [ _Size ] ) noexcept
 {
 return ( false );
 }
#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Elem >
  constexpr bool empty (
  initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . size ( ) == 0 );
 }
#line 1670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  constexpr auto data ( _Container & _Cont )
  -> decltype ( _Cont . data ( ) )
 {
 return ( _Cont . data ( ) );
 }
#line 1677 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  constexpr auto data ( const _Container & _Cont )
  -> decltype ( _Cont . data ( ) )
 {
 return ( _Cont . data ( ) );
 }
#line 1684 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
  constexpr _Ty * data ( _Ty ( & _Array ) [ _Size ] ) noexcept
 {
 return ( _Array );
 }
#line 1691 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Elem >
  constexpr const _Elem * data (
  initializer_list < _Elem > _Ilist ) noexcept
 {
 return ( _Ilist . begin ( ) );
 }
#line 1712 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
 class _Array_const_iterator



 {
public :
 using iterator_category = random_access_iterator_tag;

 using value_type = _Ty;
 using difference_type = ptrdiff_t;
 using pointer = const _Ty *;
 using reference = const _Ty &;
 enum { _EEN_SIZE = _Size };

 inline _Array_const_iterator ( )
  : _Ptr ( )
  {
  }

 inline explicit _Array_const_iterator ( pointer _Parg, size_t _Off = 0 )
  : _Ptr ( _Parg + _Off )
  {
  }

  inline reference operator * ( ) const
  {
  return ( * _Ptr );
  }

  inline pointer operator -> ( ) const
  {
  return ( _Ptr );
  }

 inline _Array_const_iterator & operator ++ ( )
  {
  ++ _Ptr;
  return ( * this );
  }

 inline _Array_const_iterator operator ++ ( int )
  {
  _Array_const_iterator _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 inline _Array_const_iterator & operator -- ( )
  {
  -- _Ptr;
  return ( * this );
  }

 inline _Array_const_iterator operator -- ( int )
  {
  _Array_const_iterator _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 inline _Array_const_iterator & operator += ( const ptrdiff_t _Off )
  {
  _Ptr += _Off;
  return ( * this );
  }

  inline _Array_const_iterator operator + ( const ptrdiff_t _Off ) const
  {
  _Array_const_iterator _Tmp = * this;
  return ( _Tmp += _Off );
  }

 inline _Array_const_iterator & operator -= ( const ptrdiff_t _Off )
  {
  return ( * this += - _Off );
  }

  inline _Array_const_iterator operator - ( const ptrdiff_t _Off ) const
  {
  _Array_const_iterator _Tmp = * this;
  return ( _Tmp -= _Off );
  }

  inline ptrdiff_t operator - ( const _Array_const_iterator & _Right ) const
  {
  return ( _Ptr - _Right . _Ptr );
  }

  inline reference operator [ ] ( const ptrdiff_t _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

  inline bool operator == ( const _Array_const_iterator & _Right ) const
  {
  return ( _Ptr == _Right . _Ptr );
  }

  inline bool operator != ( const _Array_const_iterator & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

  inline bool operator < ( const _Array_const_iterator & _Right ) const
  {
  return ( _Ptr < _Right . _Ptr );
  }

  inline bool operator > ( const _Array_const_iterator & _Right ) const
  {
  return ( _Right < * this );
  }

  inline bool operator <= ( const _Array_const_iterator & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

  inline bool operator >= ( const _Array_const_iterator & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }

  constexpr pointer _Unwrapped ( ) const
  {
  return ( _Ptr );
  }

 static constexpr bool _Unwrap_when_unverified = true;

 constexpr void _Seek_to ( pointer _It )
  {
  _Ptr = _It;
  }

private :
 pointer _Ptr;









































































































































































 };
#line 2033 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
  inline _Array_const_iterator < _Ty, _Size > operator + (
  ptrdiff_t _Off,
  _Array_const_iterator < _Ty, _Size > _Next )
 {
 return ( _Next += _Off );
 }
#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
 class _Array_iterator
  : public _Array_const_iterator < _Ty, _Size >
 {
public :
 using _Mybase = _Array_const_iterator < _Ty, _Size >;
 using iterator_category = random_access_iterator_tag;

 using value_type = _Ty;
 using difference_type = ptrdiff_t;
 using pointer = _Ty *;
 using reference = _Ty &;

 inline _Array_iterator ( )
  {
  }

 inline explicit _Array_iterator ( pointer _Parg, size_t _Off = 0 )
  : _Mybase ( _Parg, _Off )
  {
  }

 enum { _EEN_SIZE = _Size };

  inline reference operator * ( ) const
  {
  return ( const_cast < reference > ( _Mybase :: operator * ( ) ) );
  }

  inline pointer operator -> ( ) const
  {
  return ( const_cast < pointer > ( _Mybase :: operator -> ( ) ) );
  }

 inline _Array_iterator & operator ++ ( )
  {
  ++ * static_cast < _Mybase * > ( this );
  return ( * this );
  }

 inline _Array_iterator operator ++ ( int )
  {
  _Array_iterator _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 inline _Array_iterator & operator -- ( )
  {
  -- * static_cast < _Mybase * > ( this );
  return ( * this );
  }

 inline _Array_iterator operator -- ( int )
  {
  _Array_iterator _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 inline _Array_iterator & operator += ( const ptrdiff_t _Off )
  {
  * static_cast < _Mybase * > ( this ) += _Off;
  return ( * this );
  }

  inline _Array_iterator operator + ( const ptrdiff_t _Off ) const
  {
  _Array_iterator _Tmp = * this;
  return ( _Tmp += _Off );
  }

 inline _Array_iterator & operator -= ( const ptrdiff_t _Off )
  {
  return ( * this += - _Off );
  }

  inline _Array_iterator operator - ( const ptrdiff_t _Off ) const
  {
  _Array_iterator _Tmp = * this;
  return ( _Tmp -= _Off );
  }

  inline ptrdiff_t operator - ( const _Mybase & _Right ) const
  {
  return ( * static_cast < const _Mybase * > ( this ) - _Right );
  }

  inline reference operator [ ] ( const ptrdiff_t _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

  constexpr pointer _Unwrapped ( ) const
  {
  return ( const_cast < pointer > ( _Mybase :: _Unwrapped ( ) ) );
  }
 };
#line 2143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty,
 size_t _Size >
  inline _Array_iterator < _Ty, _Size > operator + (
  ptrdiff_t _Off,
  _Array_iterator < _Ty, _Size > _Next )
 {
 return ( _Next += _Off );
 }
#line 2153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter >
 class move_iterator
 {
public :
 using iterator_category = typename iterator_traits < _Iter > :: iterator_category;
 using value_type = typename iterator_traits < _Iter > :: value_type;
 using difference_type = typename iterator_traits < _Iter > :: difference_type;
 using pointer = _Iter;
 using _Ref0 = typename iterator_traits < _Iter > :: reference;
 using reference = conditional_t < is_reference_v < _Ref0 >, remove_reference_t < _Ref0 > &&, _Ref0 >;
 using iterator_type = _Iter;

 inline move_iterator ( )
  : current ( )
  {
  }

 inline explicit move_iterator ( iterator_type _Right )
  : current ( _Right )
  {
  }

 template < class _Iter2 >
  inline move_iterator ( const move_iterator < _Iter2 > & _Right )
  : current ( _Right . base ( ) )
  {
  }

 template < class _Iter2 >
  inline move_iterator & operator = ( const move_iterator < _Iter2 > & _Right )
  {
  current = _Right . base ( );
  return ( * this );
  }

  inline _Iter base ( ) const
  {
  return ( current );
  }

  inline reference operator * ( ) const
  {
  return ( static_cast < reference > ( * current ) );
  }

  inline pointer operator -> ( ) const
  {
  return ( current );
  }

 inline move_iterator & operator ++ ( )
  {
  ++ current;
  return ( * this );
  }

 inline move_iterator operator ++ ( int )
  {
  move_iterator _Tmp = * this;
  ++ current;
  return ( _Tmp );
  }

 inline move_iterator & operator -- ( )
  {
  -- current;
  return ( * this );
  }

 inline move_iterator operator -- ( int )
  {
  move_iterator _Tmp = * this;
  -- current;
  return ( _Tmp );
  }



 inline move_iterator & operator += ( const difference_type _Off )
  {
  current += _Off;
  return ( * this );
  }

  inline move_iterator operator + ( const difference_type _Off ) const
  {
  return ( move_iterator ( current + _Off ) );
  }

 inline move_iterator & operator -= ( const difference_type _Off )
  {
  current -= _Off;
  return ( * this );
  }

  inline move_iterator operator - ( const difference_type _Off ) const
  {
  return ( move_iterator ( current - _Off ) );
  }

  inline reference operator [ ] ( const difference_type _Off ) const
  {
  return ( :: std :: move ( current [ _Off ] ) );
  }

 template < class _Iter2,
  enable_if_t < _Range_verifiable_v < _Iter, _Iter2 >, int > = 0 >
  friend constexpr void _Verify_range ( const move_iterator & _First, const move_iterator < _Iter2 > & _Last )
  {
  _Verify_range ( _First . base ( ), _Last . base ( ) );
  }

 template < class _Iter2 = iterator_type,
  enable_if_t < _Offset_verifiable_v < _Iter2 >, int > = 0 >
  constexpr void _Verify_offset ( const difference_type _Off ) const
  {
  current . _Verify_offset ( _Off );
  }

 template < class _Iter2 = iterator_type,
  enable_if_t < _Unwrappable_v < _Iter2 >, int > = 0 >
   constexpr move_iterator < _Unwrapped_t < _Iter2 >> _Unwrapped ( ) const
  {
  return ( static_cast < move_iterator < _Unwrapped_t < _Iter2 >> > ( current . _Unwrapped ( ) ) );
  }

 static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v < iterator_type >;

 template < class _Src,
  enable_if_t < _Wrapped_seekable_v < iterator_type, _Src >, int > = 0 >
  constexpr void _Seek_to ( const move_iterator < _Src > & _It )
  {
  current . _Seek_to ( _It . base ( ) );
  }
protected :
 iterator_type current;
 };
#line 2291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter >
  inline move_iterator < _Iter > operator + (
  typename move_iterator < _Iter > :: difference_type _Off,
  const move_iterator < _Iter > & _Right )
 {
 return ( _Right + _Off );
 }
#line 2299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter1,
 class _Iter2 >
  inline auto operator - (
  const move_iterator < _Iter1 > & _Left,
  const move_iterator < _Iter2 > & _Right )
   -> decltype ( _Left . base ( ) - _Right . base ( ) )
 {
 return ( _Left . base ( ) - _Right . base ( ) );
 }
#line 2309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter1,
 class _Iter2 >
  inline bool operator == (
  const move_iterator < _Iter1 > & _Left,
  const move_iterator < _Iter2 > & _Right )
 {
 return ( _Left . base ( ) == _Right . base ( ) );
 }
#line 2318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter1,
 class _Iter2 >
  inline bool operator != (
  const move_iterator < _Iter1 > & _Left,
  const move_iterator < _Iter2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter1,
 class _Iter2 >
  inline bool operator < (
  const move_iterator < _Iter1 > & _Left,
  const move_iterator < _Iter2 > & _Right )
 {
 return ( _Left . base ( ) < _Right . base ( ) );
 }
#line 2336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter1,
 class _Iter2 >
  inline bool operator > (
  const move_iterator < _Iter1 > & _Left,
  const move_iterator < _Iter2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 2345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter1,
 class _Iter2 >
  inline bool operator <= (
  const move_iterator < _Iter1 > & _Left,
  const move_iterator < _Iter2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter1,
 class _Iter2 >
  inline bool operator >= (
  const move_iterator < _Iter1 > & _Left,
  const move_iterator < _Iter2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter >
  inline move_iterator < _Iter > make_move_iterator ( _Iter _It )
 {
 return ( move_iterator < _Iter > ( _It ) );
 }
#line 2371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Traits >
 struct _Char_traits_eq
 {
 using _Elem = typename _Traits :: char_type;

 bool operator ( ) ( _Elem _Left, _Elem _Right ) const
  {
  return ( _Traits :: eq ( _Left, _Right ) );
  }
 };
#line 2383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Traits >
 struct _Char_traits_lt
 {
 using _Elem = typename _Traits :: char_type;

 bool operator ( ) ( _Elem _Left, _Elem _Right ) const
  {
  return ( _Traits :: lt ( _Left, _Right ) );
  }
 };
#line 2395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_memmove ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 const char * const _First_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _First ) );
 const char * const _Last_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _Last ) );
 char * const _Dest_ch = const_cast < char * > ( reinterpret_cast < volatile char * > ( _Dest ) );
 const auto _Count = static_cast < size_t > ( _Last_ch - _First_ch );
 :: memmove ( _Dest_ch, _First_ch, _Count );
 return ( reinterpret_cast < _OutIt > ( _Dest_ch + _Count ) );
 }
#line 2407 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {
 for (; _First != _Last; ++ _Dest, ( void ) ++ _First )
  {
  * _Dest = * _First;
  }

 return ( _Dest );
 }
#line 2420 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 2428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Copy_unchecked ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {

 return ( _Copy_unchecked1 ( _First, _Last, _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2437 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt copy ( _InIt _First, _InIt _Last, _OutIt _Dest )
 {
 _Adl_verify_range ( _First, _Last );
 const auto _UFirst = _Get_unwrapped ( _First );
 const auto _ULast = _Get_unwrapped ( _Last );
 const auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
 _Seek_wrapped ( _Dest, _Copy_unchecked ( _UFirst, _ULast, _UDest ) );
 return ( _Dest );
 }
#line 2489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked4 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {

 for (;; )
  {
  * _Dest = * _First;
  ++ _Dest;
  -- _Count;
  if ( _Count == 0 )
   {

   return ( _Dest );
   }

  ++ _First;
  }
 }
#line 2511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked4 ( _InIt _First, _Diff _Count,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {

 return ( _Copy_memmove ( _First, _First + _Count, _Dest ) );
 }
#line 2521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt _Copy_n_unchecked3 ( _InIt _First, _Diff _Count,
  _OutIt _Dest )
 {

 return ( _Copy_n_unchecked4 ( _First, _Count,
  _Dest, _Ptr_copy_cat ( _First, _Dest ) ) );
 }
#line 2532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Diff,
 class _OutIt > inline
 _OutIt copy_n ( _InIt _First, _Diff _Count_raw, _OutIt _Dest )
 {
 const _Algorithm_int_t < _Diff > _Count = _Count_raw;
 if ( 0 < _Count )
  {
  _Seek_wrapped ( _Dest,
   _Copy_n_unchecked3 ( _Get_unwrapped_n ( _First, _Count ), _Count, _Get_unwrapped_n ( _Dest, _Count ) ) );
  }

 return ( _Dest );
 }
#line 2656 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_memmove ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 const char * const _First_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _First ) );
 const char * const _Last_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _Last ) );
 char * const _Dest_ch = const_cast < char * > ( reinterpret_cast < volatile char * > ( _Dest ) );
 const auto _Count = static_cast < size_t > ( _Last_ch - _First_ch );
 return ( static_cast < _BidIt2 > (
  :: memmove ( _Dest_ch - _Count, _First_ch, _Count ) ) );
 }
#line 2668 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag )
 {
 while ( _First != _Last )
  * -- _Dest = * -- _Last;
 return ( _Dest );
 }
#line 2678 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Copy_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_backward_memmove ( _First, _Last, _Dest ) );
 }
#line 2686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 copy_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 _Adl_verify_range ( _First, _Last );
 const auto _UFirst = _Get_unwrapped ( _First );
 const auto _ULast = _Get_unwrapped ( _Last );
 const auto _UDest = _Get_unwrapped_n ( _Dest, - _Idl_distance < _BidIt1 > ( _UFirst, _ULast ) );
 _Seek_wrapped ( _Dest,
  _Copy_backward_unchecked ( _UFirst, _ULast, _UDest, _Ptr_copy_cat ( _UFirst, _UDest ) ) );
 return ( _Dest );
 }
#line 2712 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag )
 {
 for (; _First != _Last; ++ _Dest, ( void ) ++ _First )
  * _Dest = :: std :: move ( * _First );
 return ( _Dest );
 }
#line 2722 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked1 ( _InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 2730 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _OutIt > inline
 _OutIt _Move_unchecked ( _InIt _First, _InIt _Last,
  _OutIt _Dest )
 {

 return ( _Move_unchecked1 ( _First, _Last,
  _Dest, _Ptr_move_cat ( _First, _Dest ) ) );
 }
#line 2740 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _InIt, class 
#line 2741 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_OutIt> inline _OutIt 
#line 2742 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
move(_InIt _First, _InIt _Last, _OutIt 
#line 2743 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Dest) 
#line 2744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
{ 
#line 2745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Adl_verify_range(_First, _Last); 
#line 2746 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
const auto _UFirst = _Get_unwrapped(_First); 
#line 2747 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
const auto _ULast = _Get_unwrapped(_Last); 
#line 2748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance< _InIt> (_UFirst, _ULast)); 
#line 2749 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Seek_wrapped(_Dest, _Move_unchecked(_UFirst, _ULast, _UDest)); 
#line 2751 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
return _Dest; 
#line 2752 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
} 
#line 2793 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag )
 {
 while ( _First != _Last )
  * -- _Dest = :: std :: move ( * -- _Last );
 return ( _Dest );
 }
#line 2803 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked1 ( _BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag )
 {
 return ( _Copy_backward_memmove ( _First, _Last, _Dest ) );
 }
#line 2811 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 _Move_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {

 return ( _Move_backward_unchecked1 ( _First, _Last,
  _Dest, _Ptr_move_cat ( _First, _Dest ) ) );
 }
#line 2820 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt1,
 class _BidIt2 > inline
 _BidIt2 move_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest )
 {
 _Adl_verify_range ( _First, _Last );
 const auto _UFirst = _Get_unwrapped ( _First );
 const auto _ULast = _Get_unwrapped ( _Last );
 const auto _UDest = _Get_unwrapped_n ( _Dest, - _Idl_distance < _BidIt1 > ( _UFirst, _ULast ) );
 _Seek_wrapped ( _Dest, _Move_backward_unchecked ( _UFirst, _ULast, _UDest ) );
 return ( _Dest );
 }
#line 2845 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty> 
#line 2846 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Is_character : public false_type { 
#line 2849 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 2852 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template<> struct _Is_character< char>  : public true_type { 
#line 2855 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 2858 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template<> struct _Is_character< signed char>  : public true_type { 
#line 2861 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 2864 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template<> struct _Is_character< unsigned char>  : public true_type { 
#line 2867 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 2869 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _FwdIt, class 
#line 2870 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Ty> 
#line 2871 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Fill_memset_is_safe_helper { 
#line 2873 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using _Value_type = _Iter_value_t< _FwdIt> ; 
#line 2875 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using _Raw_ty = _Unwrap_enum_t< _Ty> ; 
#line 2876 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using _Raw_value_type = _Unwrap_enum_t< _Value_type> ; 
#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using type = bool_constant< conjunction_v< is_pointer< _FwdIt> , disjunction< conjunction< _Is_character< _Raw_ty> , _Is_character< _Raw_value_type> > , conjunction< is_same< bool, _Raw_ty> , is_same< bool, _Raw_value_type> > > , is_convertible< _Ty, _Value_type> > > ; 
#line 2888 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 typename _Fill_memset_is_safe_helper < _FwdIt, _Ty > :: type
 _Fill_memset_is_safe ( const _FwdIt &, const _Ty & )
 {
 return { };
 }
#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked1 ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, false_type )
 {
 for (; _First != _Last; ++ _First )
  * _First = _Val;
 }
#line 2906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked1 ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, true_type )
 {
 :: memset ( _First, static_cast < unsigned char > ( _Val ), static_cast < size_t > ( _Last - _First ) );
 }
#line 2913 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void _Fill_unchecked ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 _Fill_unchecked1 ( _First, _Last, _Val, _Fill_memset_is_safe ( _First, _Val ) );
 }
#line 2920 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt,
 class _Ty > inline
 void fill ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val )
 {
 _Adl_verify_range ( _First, _Last );
 _Fill_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Val );
 }
#line 2943 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked2 ( _OutIt _Dest, _Diff _Count, const _Ty & _Val, false_type )
 {
 for (; 0 < _Count; -- _Count, ( void ) ++ _Dest )
  * _Dest = _Val;
 return ( _Dest );
 }
#line 2953 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt _Fill_n_unchecked2 ( _OutIt _Dest, _Diff _Count, const _Ty & _Val, true_type )
 {
 :: memset ( _Dest, static_cast < unsigned char > ( _Val ), static_cast < size_t > ( _Count ) );
 return ( _Dest + _Count );
 }
#line 2962 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _OutIt,
 class _Diff,
 class _Ty > inline
 _OutIt fill_n ( _OutIt _Dest, _Diff _Count_raw, const _Ty & _Val )
 {
 const _Algorithm_int_t < _Diff > _Count = _Count_raw;
 if ( 0 < _Count )
  {
  const auto _UDest = _Get_unwrapped_n ( _Dest, _Count );
  _Seek_wrapped ( _Dest,
   _Fill_n_unchecked2 ( _UDest, _Count, _Val, _Fill_memset_is_safe ( _UDest, _Val ) ) );
  }

 return ( _Dest );
 }
#line 2993 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem1, class 
#line 2994 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Elem2> 
#line 2995 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Value_equality_is_bitwise_equality : public bool_constant< (static_cast< _Elem1>(-1)) == (static_cast< _Elem2>(-1))>  { 
#line 3001 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 3003 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem1, class 
#line 3004 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Elem2, class 
#line 3005 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Pr> 
#line 3006 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Equal_memcmp_is_safe_helper : public false_type { 
#line 3010 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 3012 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem1, class 
#line 3013 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Elem2> 
#line 3014 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem1, _Elem2, equal_to<> >  : public bool_constant< conjunction_v< _Is_same_size< _Elem1, _Elem2> , _Is_nonbool_integral< _Elem1> , _Is_nonbool_integral< _Elem2> , negation< is_volatile< _Elem1> > , negation< is_volatile< _Elem2> > , _Value_equality_is_bitwise_equality< _Elem1, _Elem2> > >  { 
#line 3026 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 3028 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem1, class 
#line 3029 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Elem2> 
#line 3030 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem1 *, _Elem2 *, equal_to<> >  : public is_same< remove_cv_t< _Elem1> , remove_cv_t< _Elem2> > ::type { 
#line 3033 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 3043 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem> 
#line 3044 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem, _Elem, _Char_traits_eq< char_traits< _Elem> > >  : public std::_Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to<> > ::type { 
#line 3047 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 3049 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem> 
#line 3050 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to< _Elem> >  : public std::_Equal_memcmp_is_safe_helper< _Elem, _Elem, equal_to<> > ::type { 
#line 3054 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 3056 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Iter1,
 class _Iter2,
 class _Pr > inline
 false_type _Equal_memcmp_is_safe ( const _Iter1 &, const _Iter2 &, const _Pr & )
 {
 return { };
 }
#line 3064 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Obj1,
 class _Obj2,
 class _Pr > inline
 typename _Equal_memcmp_is_safe_helper <
  remove_const_t < _Obj1 >,
  remove_const_t < _Obj2 >,
  _Pr > :: type
  _Equal_memcmp_is_safe ( _Obj1 * const &, _Obj2 * const &, const _Pr & )
 {
 return { };
 }
#line 3076 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked1 ( _InIt1 _First1, const _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred, false_type )
 {
 for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 )
  {
  if ( ! _Pred ( * _First1, * _First2 ) )
   {
   return ( false );
   }
  }

 return ( true );
 }
#line 3093 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked1 ( const _InIt1 _First1, const _InIt1 _Last1,
  const _InIt2 _First2, _Pr, true_type )
 {
 const auto _First1_ch = reinterpret_cast < const char * > ( _First1 );
 const auto _First2_ch = reinterpret_cast < const char * > ( _First2 );
 const auto _Count = static_cast < size_t > ( reinterpret_cast < const char * > ( _Last1 ) - _First1_ch );
 return ( :: memcmp ( _First1_ch, _First2_ch, _Count ) == 0 );
 }
#line 3105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( const _InIt1 _First1, const _InIt1 _Last1,
  const _InIt2 _First2, _Pr _Pred )
 {
 return ( _Equal_unchecked1 ( _First1, _Last1, _First2, _Pred,
  _Equal_memcmp_is_safe ( _First1, _First2, _Pred ) ) );
 }
#line 3115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr >
  inline bool equal ( const _InIt1 _First1, const _InIt1 _Last1,
  const _InIt2 _First2, _Pr _Pred )
 {
 _Adl_verify_range ( _First1, _Last1 );
 const auto _UFirst1 = _Get_unwrapped ( _First1 );
 const auto _ULast1 = _Get_unwrapped ( _Last1 );
 const auto _UFirst2 = _Get_unwrapped_n ( _First2, _Idl_distance < _InIt1 > ( _UFirst1, _ULast1 ) );
 return ( _Equal_unchecked ( _UFirst1, _ULast1, _UFirst2, _Pass_fn ( _Pred ) ) );
 }
#line 3162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2 >
  inline bool equal ( const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2 )
 {
 return ( :: std :: equal ( _First1, _Last1, _First2, equal_to < > ( ) ) );
 }
#line 3204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( _InIt1 _First1, const _InIt1 _Last1,
  _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred,
  input_iterator_tag, input_iterator_tag )
 {

 for (;; )
  {
  if ( _First1 == _Last1 )
   {
   return ( _First2 == _Last2 );
   }

  if ( _First2 == _Last2 )
   {
   return ( false );
   }

  if ( ! _Pred ( * _First1, * _First2 ) )
   {
   return ( false );
   }

  ++ _First1;
  ++ _First2;
  }
 }
#line 3234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Equal_unchecked ( const _InIt1 _First1, const _InIt1 _Last1,
  const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred,
  random_access_iterator_tag, random_access_iterator_tag )
 {

 if ( _Last1 - _First1 != _Last2 - _First2 )
  {
  return ( false );
  }

 return ( _Equal_unchecked ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr >
  inline bool equal ( const _InIt1 _First1, const _InIt1 _Last1,
  const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred )
 {
 _Adl_verify_range ( _First1, _Last1 );
 _Adl_verify_range ( _First2, _Last2 );
 return ( _Equal_unchecked ( _Get_unwrapped ( _First1 ), _Get_unwrapped ( _Last1 ),
  _Get_unwrapped ( _First2 ), _Get_unwrapped ( _Last2 ), _Pass_fn ( _Pred ),
   _Iter_cat_t < _InIt1 > ( ), _Iter_cat_t < _InIt2 > ( ) ) );
 }
#line 3273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2 >
  inline bool equal ( const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2 )
 {
 return ( :: std :: equal ( _First1, _Last1, _First2, _Last2, equal_to < > ( ) ) );
 }
#line 3293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem1, class 
#line 3294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Elem2, class 
#line 3295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_FTy> 
#line 3296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Lex_compare_check_element_types_helper : public bool_constant< conjunction_v< _Is_character< _Elem1> , _Is_character< _Elem2> , _Is_character< _FTy> , is_unsigned< _FTy> > >  { 
#line 3304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 3306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Elem1, class 
#line 3307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Elem2> 
#line 3308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Lex_compare_check_element_types_helper< _Elem1, _Elem2, void>  : public bool_constant< conjunction_v< _Is_character< _Elem1> , _Is_character< _Elem2> , is_unsigned< _Elem1> , is_unsigned< _Elem2> > >  { 
#line 3316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 3332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Memcmp_pr> 
#line 3333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Lex_compare_optimize { 
#line 3335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 3337 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Memcmp_pr, class 
#line 3338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Obj1, class 
#line 3339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Obj2, class 
#line 3340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_FTy> using _Lex_compare_check_element_types = _Lex_compare_optimize< conditional_t< _Lex_compare_check_element_types_helper< remove_const_t< _Obj1> , remove_const_t< _Obj2> , _FTy> ::value, _Memcmp_pr, void> > ; 
#line 3345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 _Lex_compare_optimize < void > _Lex_compare_memcmp_classify ( const _InIt1 &, const _InIt2 &, const _Pr & )
 {
 return { };
 }
#line 3353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Obj1,
 class _Obj2,
 class _FTy > inline
 _Lex_compare_check_element_types < less < int >, _Obj1, _Obj2, _FTy >
  _Lex_compare_memcmp_classify ( _Obj1 * const &, _Obj2 * const &, const less < _FTy > & )
 {
 return { };
 }
#line 3362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Obj1,
 class _Obj2,
 class _FTy > inline
 _Lex_compare_check_element_types < greater < int >, _Obj1, _Obj2, _FTy >
  _Lex_compare_memcmp_classify ( _Obj1 * const &, _Obj2 * const &, const greater < _FTy > & )
 {
 return { };
 }
#line 3371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr > inline
 bool _Lex_compare_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred, _Lex_compare_optimize < void > )
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  {
  if ( _Pred ( * _First1, * _First2 ) )
   return ( true );
  else if ( _Pred ( * _First2, * _First1 ) )
   return ( false );
  }

 return ( _First1 == _Last1 && _First2 != _Last2 );
 }
#line 3388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr,
 class _Memcmp_pr > inline
 bool _Lex_compare_unchecked ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr, _Lex_compare_optimize < _Memcmp_pr > )
 {
 const auto _Num1 = static_cast < size_t > ( _Last1 - _First1 );
 const auto _Num2 = static_cast < size_t > ( _Last2 - _First2 );
 const int _Ans = :: memcmp ( _First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2 );
 return ( _Memcmp_pr { } ( _Ans, 0 ) || ( _Ans == 0 && _Num1 < _Num2 ) );
 }
#line 3401 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2,
 class _Pr >
  inline bool lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred )
 {
 _Adl_verify_range ( _First1, _Last1 );
 _Adl_verify_range ( _First2, _Last2 );
 const auto _UFirst1 = _Get_unwrapped ( _First1 );
 const auto _ULast1 = _Get_unwrapped ( _Last1 );
 const auto _UFirst2 = _Get_unwrapped ( _First2 );
 const auto _ULast2 = _Get_unwrapped ( _Last2 );
 return ( _Lex_compare_unchecked ( _UFirst1, _ULast1, _UFirst2, _ULast2, _Pass_fn ( _Pred ),
  _Lex_compare_memcmp_classify ( _UFirst1, _UFirst2, _Pred ) ) );
 }
#line 3417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt1,
 class _InIt2 >
  inline bool lexicographical_compare ( _InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2 )
 {
 return ( :: std :: lexicographical_compare ( _First1, _Last1,
  _First2, _Last2, less < > ( ) ) );
 }
#line 3456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, true_type, _Any_tag )
 {
 return ( ( - 128 ) <= _Val && _Val <= 127 );
 }
#line 3462 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, false_type, true_type )
 {
 return ( _Val <= 127 || static_cast < _Ty > ( ( - 128 ) ) <= _Val );
 }
#line 3468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, true_type, false_type, false_type )
 {
 return ( _Val <= 127 );
 }
#line 3474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, false_type, true_type, _Any_tag )
 {
 return ( 0 <= _Val && _Val <= 255 );
 }
#line 3480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Ty > inline
 bool _Within_limits ( const _Ty & _Val, false_type, false_type, _Any_tag )
 {
 return ( _Val <= 255 );
 }
#line 3486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 bool _Within_limits ( _InIt, const _Ty & _Val )
 {
 using _Elem = remove_pointer_t < _InIt >;
 return ( _Within_limits ( _Val, is_signed < _Elem > { }, is_signed < _Ty > { },
  bool_constant < - 1 == static_cast < _Ty > ( - 1 ) > { } ) );
 }
#line 3495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt > inline
 bool _Within_limits ( _InIt, const bool & )
 {
 return ( true );
 }
#line 3501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked1 ( _InIt _First, const _InIt _Last, const _Ty & _Val, true_type )
 {
 if ( ! _Within_limits ( _First, _Val ) )
  {
  return ( _Last );
  }

 _First = static_cast < _InIt > ( :: memchr (
  _First, static_cast < unsigned char > ( _Val ), static_cast < size_t > ( _Last - _First ) ) );
 return ( _First ? _First : _Last );
 }
#line 3515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked1 ( _InIt _First, const _InIt _Last, const _Ty & _Val, false_type )
 {
 for (; _First != _Last; ++ _First )
  if ( * _First == _Val )
   break;
 return ( _First );
 }
#line 3525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Ty > inline
 _InIt _Find_unchecked ( const _InIt _First, const _InIt _Last, const _Ty & _Val )
 {

 using _Memchr_opt = bool_constant < is_integral_v < _Ty > && _Is_any_of_v < _InIt,
  char *, signed char *, unsigned char *, const char *, const signed char *, const unsigned char * >>;

 return ( _Find_unchecked1 ( _First, _Last, _Val, _Memchr_opt { } ) );
 }
#line 3536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Ty >
  inline _InIt find ( _InIt _First, const _InIt _Last, const _Ty & _Val )
 {
 _Adl_verify_range ( _First, _Last );
 _Seek_wrapped ( _First,
  _Find_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Val ) );
 return ( _First );
 }
#line 3555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Ty,
 class _Pr > inline
 _InIt _Find_pr ( _InIt _First, _InIt _Last, const _Ty & _Val, _Pr _Pred )
 {
 for (; _First != _Last; ++ _First )
  {
  if ( _Pred ( * _First, _Val ) )
   {
   break;
   }
  }

 return ( _First );
 }
#line 3572 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Ty >
  inline _Iter_diff_t < _InIt > count ( const _InIt _First, const _InIt _Last, const _Ty & _Val )
 {
 _Adl_verify_range ( _First, _Last );
 auto _UFirst = _Get_unwrapped ( _First );
 const auto _ULast = _Get_unwrapped ( _Last );
 _Iter_diff_t < _InIt > _Count = 0;

 for (; _UFirst != _ULast; ++ _UFirst )
  {
  if ( * _UFirst == _Val )
   {
   ++ _Count;
   }
  }

 return ( _Count );
 }
#line 3602 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _InIt,
 class _Ty,
 class _Pr > inline
 _Iter_diff_t < _InIt > _Count_pr ( _InIt _First, _InIt _Last, const _Ty & _Val, _Pr _Pred )
 {
 _Iter_diff_t < _InIt > _Count = 0;

 for (; _First != _Last; ++ _First )
  {
  if ( _Pred ( * _First, _Val ) )
   {
   ++ _Count;
   }
  }

 return ( _Count );
 }
#line 3621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 void _Trim_matching_suffixes ( _FwdIt1 &, _FwdIt2 &, _Pr,
  forward_iterator_tag, forward_iterator_tag )
 {
 }
#line 3629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 void _Trim_matching_suffixes ( _FwdIt1 & _Last1, _FwdIt2 & _Last2, _Pr _Pred,
  bidirectional_iterator_tag, bidirectional_iterator_tag )
 {

 do
  {
  -- _Last1;
  -- _Last2;
  }
 while ( _Pred ( * _Last1, * _Last2 ) );
 ++ _Last1;
 ++ _Last2;
 }
#line 3647 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Check_match_counts ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred )
 {
 _Trim_matching_suffixes ( _Last1, _Last2, _Pred,
  _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) );
 for ( _FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++ _Next1 )
  {
  if ( _Next1 == _Find_pr ( _First1, _Next1, * _Next1, _Pred ) )
   {
   _Iter_diff_t < _FwdIt2 > _Count2 = _Count_pr ( _First2, _Last2, * _Next1, _Pred );
   if ( _Count2 == 0 )
    {
    return ( false );
    }

   _FwdIt1 _Skip1 = _Next_iter ( _Next1 );
   _Iter_diff_t < _FwdIt1 > _Count1 = _Count_pr ( _Skip1, _Last1, * _Next1, _Pred ) + 1;
   if ( _Count2 != _Count1 )
    {
    return ( false );
    }
   }
  }

 return ( true );
 }
#line 3678 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _Pr _Pred )
 {
 for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 )
  {
  if ( ! _Pred ( * _First1, * _First2 ) )
   {


   auto _Last2 = :: std :: next ( _First2, static_cast < _Iter_diff_t < _FwdIt2 >> ( :: std :: distance ( _First1, _Last1 ) ) );
   return ( _Check_match_counts ( _First1, _Last1, _First2, _Last2, _Pred ) );
   }
  }

 return ( true );
 }
#line 3697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr >
  inline bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred )
 {
 _Adl_verify_range ( _First1, _Last1 );
 const auto _UFirst1 = _Get_unwrapped ( _First1 );
 const auto _ULast1 = _Get_unwrapped ( _Last1 );
 const auto _UFirst2 = _Get_unwrapped_n ( _First2, _Idl_distance < _FwdIt1 > ( _UFirst1, _ULast1 ) );
 return ( _Is_permutation_unchecked ( _UFirst1, _ULast1, _UFirst2, _Pass_fn ( _Pred ) ) );
 }
#line 3724 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2 > inline
 bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2 )
 {
 return ( :: std :: is_permutation ( _First1, _Last1,
  _First2, equal_to < > ( ) ) );
 }
#line 3744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
  forward_iterator_tag, forward_iterator_tag )
 {

 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ( void ) ++ _First2 )
  {
  if ( ! _Pred ( * _First1, * _First2 ) )
   {
   if ( :: std :: distance ( _First1, _Last1 ) == :: std :: distance ( _First2, _Last2 ) )
    {
    return ( _Check_match_counts ( _First1, _Last1, _First2, _Last2, _Pred ) );
    }
   else
    {
    return ( false );
    }
   }
  }

 return ( _First1 == _Last1 && _First2 == _Last2 );
 }
#line 3770 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr > inline
 bool _Is_permutation_unchecked ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
  random_access_iterator_tag, random_access_iterator_tag )
 {

 if ( _Last1 - _First1 != _Last2 - _First2 )
  {
  return ( false );
  }

 return ( _Is_permutation_unchecked ( _First1, _Last1, _First2, _Pred ) );
 }
#line 3786 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2,
 class _Pr >
  inline bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred )
 {

 _Adl_verify_range ( _First1, _Last1 );
 _Adl_verify_range ( _First2, _Last2 );
 return ( _Is_permutation_unchecked ( _Get_unwrapped ( _First1 ), _Get_unwrapped ( _Last1 ),
  _Get_unwrapped ( _First2 ), _Get_unwrapped ( _Last2 ), _Pass_fn ( _Pred ),
  _Iter_cat_t < _FwdIt1 > ( ), _Iter_cat_t < _FwdIt2 > ( ) ) );
 }
#line 3801 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt1,
 class _FwdIt2 >
  inline bool is_permutation ( _FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2 )
 {
 return ( :: std :: is_permutation ( _First1, _Last1, _First2, _Last2, equal_to < > ( ) ) );
 }
#line 3810 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt > inline
 void _Reverse_unchecked1 ( _BidIt _First, _BidIt _Last, integral_constant < size_t, 0 > )
 {
 for (; _First != _Last && _First != -- _Last; ++ _First )
  {
  :: std :: iter_swap ( _First, _Last );
  }
 }
#line 3820 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt > inline
 void _Reverse_unchecked1 ( const _BidIt _First, const _BidIt _Last, integral_constant < size_t, 1 > )
 {
 __std_reverse_trivially_swappable_1 ( _First, _Last );
 }
#line 3826 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt > inline
 void _Reverse_unchecked1 ( const _BidIt _First, const _BidIt _Last, integral_constant < size_t, 2 > )
 {
 __std_reverse_trivially_swappable_2 ( _First, _Last );
 }
#line 3832 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt > inline
 void _Reverse_unchecked1 ( const _BidIt _First, const _BidIt _Last, integral_constant < size_t, 4 > )
 {
 __std_reverse_trivially_swappable_4 ( _First, _Last );
 }
#line 3838 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt > inline
 void _Reverse_unchecked1 ( const _BidIt _First, const _BidIt _Last, integral_constant < size_t, 8 > )
 {
 __std_reverse_trivially_swappable_8 ( _First, _Last );
 }
#line 3845 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt > inline
 void _Reverse_unchecked ( const _BidIt _First, const _BidIt _Last )
 {

 using _Elem = remove_pointer_t < _BidIt >;
 constexpr size_t _Opt = is_pointer_v < _BidIt >
  && _Is_trivially_swappable_v < _Elem >
  && ! is_volatile_v < _Elem >
  && ( sizeof ( _Elem ) == 1
   || sizeof ( _Elem ) == 2
   || sizeof ( _Elem ) == 4
   || sizeof ( _Elem ) == 8 ) ? sizeof ( _Elem ) : 0;



 _Reverse_unchecked1 ( _First, _Last, integral_constant < size_t, _Opt > { } );
 }
#line 3863 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt > inline
 void reverse ( const _BidIt _First, const _BidIt _Last )
 {
 _Adl_verify_range ( _First, _Last );
 _Reverse_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ) );
 }
#line 3882 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt > inline
 _FwdIt _Rotate_unchecked1 ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag )
 {
 for ( _FwdIt _Next = _Mid, _Res = _Last;; )
  {
  :: std :: iter_swap ( _First, _Next );
  if ( ++ _First == _Mid )
   {
   if ( ++ _Next == _Last )
    return ( _Res == _Last ? _Mid : _Res );
   else
    _Mid = _Next;
   }
  else if ( ++ _Next == _Last )
   {
   if ( _Res == _Last )
    _Res = _First;
   _Next = _Mid;
   }
  }
 }
#line 3905 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt > inline
 pair < _BidIt, _BidIt > _Reverse_until_sentinel_unchecked (
  _BidIt _First, _BidIt _Sentinel, _BidIt _Last )
 {
 while ( _First != _Sentinel && _Last != _Sentinel )
  {
  :: std :: iter_swap ( _First, -- _Last );
  ++ _First;
  }

 return ( :: std :: make_pair ( _First, _Last ) );
 }
#line 3918 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _BidIt > inline
 _BidIt _Rotate_unchecked1 ( _BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag )
 {
 _Reverse_unchecked ( _First, _Mid );
 _Reverse_unchecked ( _Mid, _Last );
 pair < _BidIt, _BidIt > _Tmp = _Reverse_until_sentinel_unchecked ( _First, _Mid, _Last );
 _Reverse_unchecked ( _Tmp . first, _Tmp . second );
 return ( _Mid != _Tmp . first ? _Tmp . first : _Tmp . second );
 }
#line 3929 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _RanIt > inline
 _RanIt _Rotate_unchecked1 ( _RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag )
 {
 _Reverse_unchecked ( _First, _Mid );
 _Reverse_unchecked ( _Mid, _Last );
 _Reverse_unchecked ( _First, _Last );
 return ( _First + ( _Last - _Mid ) );
 }
#line 3939 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt > inline
 _FwdIt _Rotate_unchecked ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last )
 {
 if ( _First == _Mid )
  return ( _Last );
 if ( _Mid == _Last )
  return ( _First );
 return ( _Rotate_unchecked1 ( _First, _Mid, _Last, _Iter_cat_t < _FwdIt > ( ) ) );
 }
#line 3949 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt > inline
 _FwdIt rotate ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last )
 {


 _Adl_verify_range ( _First, _Mid );
 _Adl_verify_range ( _Mid, _Last );
 _Seek_wrapped ( _First,
  _Rotate_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Mid ),
  _Get_unwrapped ( _Last ) ) );
 return ( _First );
 }
#line 3974 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _FwdIt,
 class _Ty,
 class _Pr >
  inline _FwdIt lower_bound ( _FwdIt _First, const _FwdIt _Last,
  const _Ty & _Val, _Pr _Pred )
 {
 _Adl_verify_range ( _First, _Last );
 auto _UFirst = _Get_unwrapped ( _First );
 _Iter_diff_t < _FwdIt > _Count = :: std :: distance ( _UFirst, _Get_unwrapped ( _Last ) );

 while ( 0 < _Count )
  {
  const _Iter_diff_t < _FwdIt > _Count2 = _Count >> 1;
  const auto _UMid = :: std :: next ( _UFirst, _Count2 );
  if ( _Pred ( * _UMid, _Val ) )
   {
   _UFirst = _Next_iter ( _UMid );
   _Count -= _Count2 + 1;
   }
  else
   {
   _Count = _Count2;
   }
  }

 _Seek_wrapped ( _First, _UFirst );
 return ( _First );
 }
#line 4004 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Diff,
 class _Urng >
 class _Rng_from_urng
 {
public :
 using _Ty0 = make_unsigned_t < _Diff >;
 using _Ty1 = typename _Urng :: result_type;

 using _Udiff = conditional_t < sizeof ( _Ty1 ) < sizeof ( _Ty0 ), _Ty0, _Ty1 >;

 explicit _Rng_from_urng ( _Urng & _Func )
  : _Ref ( _Func ), _Bits ( 8 * sizeof ( _Udiff ) ), _Bmask ( _Udiff ( - 1 ) )
  {
  for (; ( _Urng :: max ) ( ) - ( _Urng :: min ) ( ) < _Bmask; _Bmask >>= 1 )
   -- _Bits;
  }

 _Diff operator ( ) ( _Diff _Index )
  {
  for (;; )
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while ( _Mask < _Udiff ( _Index - 1 ) )
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits ( );
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if ( _Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff ( _Index - 1 ) )
    return ( static_cast < _Diff > ( _Ret % _Index ) );
   }
  }

 _Udiff _Get_all_bits ( )
  {
  _Udiff _Ret = 0;

  for ( size_t _Num = 0; _Num < 8 * sizeof ( _Udiff );
   _Num += _Bits )
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits ( );
   }

  return ( _Ret );
  }

 _Rng_from_urng ( const _Rng_from_urng & ) = delete;
 _Rng_from_urng & operator = ( const _Rng_from_urng & ) = delete;

private :
 _Udiff _Get_bits ( )
  {
  for (;; )
   {
   _Udiff _Val = _Ref ( ) - ( _Urng :: min ) ( );

   if ( _Val <= _Bmask )
    return ( _Val );
   }
  }

 _Urng & _Ref;
 size_t _Bits;
 _Udiff _Bmask;
 };
#line 4081 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Elem >
 class _Yarn
 {
public :
  _Yarn ( )
  : _Myptr ( nullptr ), _Nul ( 0 )
  {
  }

  _Yarn ( const _Yarn & _Right )
  : _Myptr ( nullptr ), _Nul ( 0 )
  {
  * this = _Right;
  }

  _Yarn ( const _Elem * _Right )
  : _Myptr ( nullptr ), _Nul ( 0 )
  {
  * this = _Right;
  }

 _Yarn & operator = ( const _Yarn & _Right )
  {
  return ( * this = _Right . _Myptr );
  }

 _Yarn & operator = ( const _Elem * _Right )
  {
  if ( _Myptr != _Right )
   {
   _Tidy ( );

   if ( _Right != nullptr )
    {
    const _Elem * _Ptr = _Right;
    while ( * _Ptr != ( _Elem ) 0 )
     {
     ++ _Ptr;
     }

    const auto _Count = ( ++ _Ptr - _Right ) * sizeof ( _Elem );






    _Myptr = ( _Elem * ) :: malloc ( _Count );


    if ( _Myptr != nullptr )
     {
     :: memcpy ( _Myptr, _Right, _Count );
     }
    }
   }

  return ( * this );
  }

  ~ _Yarn ( ) noexcept
  {
  _Tidy ( );
  }

 bool empty ( ) const
  {
  return ( _Myptr == nullptr );
  }

   const _Elem * c_str ( ) const
  {
  return ( _Myptr != nullptr ? _Myptr : & _Nul );
  }

 bool _Empty ( ) const
  {
  return ( _Myptr == nullptr );
  }

   const _Elem * _C_str ( ) const
  {
  return ( _Myptr != nullptr ? _Myptr : & _Nul );
  }

private :
 void _Tidy ( )
  {
  if ( _Myptr != nullptr )





   :: free ( _Myptr );


  _Myptr = nullptr;
  }

 _Elem * _Myptr;
 _Elem _Nul;
 };
#line 4187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
 class back_insert_iterator
 {
public :
 using iterator_category = output_iterator_tag;
 using value_type = void;
 using difference_type = void;
 using pointer = void;
 using reference = void;

 using container_type = _Container;

 explicit back_insert_iterator ( _Container & _Cont )
  : container ( :: std :: addressof ( _Cont ) )
  {
  }

 back_insert_iterator & operator = ( const typename _Container :: value_type & _Val )
  {
  container -> push_back ( _Val );
  return ( * this );
  }

 back_insert_iterator & operator = ( typename _Container :: value_type && _Val )
  {
  container -> push_back ( :: std :: move ( _Val ) );
  return ( * this );
  }

  back_insert_iterator & operator * ( )
  {
  return ( * this );
  }

 back_insert_iterator & operator ++ ( )
  {
  return ( * this );
  }

 back_insert_iterator operator ++ ( int )
  {
  return ( * this );
  }

protected :
 _Container * container;
 };
#line 4236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template < class _Container >
  inline back_insert_iterator < _Container > back_inserter ( _Container & _Cont )
 {
 return ( back_insert_iterator < _Container > ( _Cont ) );
 }
#line 4244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty, class 
#line 4245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Alloc, class 
#line 4246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
 = void> 
#line 4247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Has_allocator_type : public false_type { 
#line 4250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 4252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty, class 
#line 4253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Alloc> 
#line 4254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct _Has_allocator_type< _Ty, _Alloc, void_t< typename _Ty::allocator_type> >  : public is_convertible< _Alloc, typename _Ty::allocator_type> ::type { 
#line 4257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 4260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct allocator_arg_t { 
#line 4262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
explicit allocator_arg_t() = default;
#line 4263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 4265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
constexpr allocator_arg_t allocator_arg{}; 
#line 4267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
[[noreturn]] void __cdecl _Xbad_alloc(); 
#line 4268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
[[noreturn]] void __cdecl _Xinvalid_argument(const char *); 
#line 4269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
[[noreturn]] void __cdecl _Xlength_error(const char *); 
#line 4270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
[[noreturn]] void __cdecl _Xout_of_range(const char *); 
#line 4271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
[[noreturn]] void __cdecl _Xoverflow_error(const char *); 
#line 4272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
[[noreturn]] void __cdecl _Xruntime_error(const char *); 
#line 4275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty, class 
#line 4276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Alloc> 
#line 4277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct uses_allocator : public _Has_allocator_type< _Ty, _Alloc> ::type { 
#line 4280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 4282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Ty, class 
#line 4283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Alloc> constexpr bool 
#line 4284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
uses_allocator_v = (uses_allocator< _Ty, _Alloc> ::value); 
#line 4287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
template< class _Category, class 
#line 4288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Ty, class 
#line 4289 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Diff = ptrdiff_t, class 
#line 4290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Pointer = _Ty *, class 
#line 4291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
_Reference = _Ty &> 
#line 4292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
struct iterator { 
#line 4294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using iterator_category = _Category; 
#line 4295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using value_type = _Ty; 
#line 4296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using difference_type = _Diff; 
#line 4297 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using pointer = _Pointer; 
#line 4298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
using reference = _Reference; 
#line 4299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}; 
#line 4300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
}
#line 4303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
namespace std { 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < size_t _Ty_size > inline
 size_t _Get_size_of_n ( const size_t _Count )
 {
 constexpr size_t _Max_possible = static_cast < size_t > ( - 1 ) / _Ty_size;
 size_t _Result = _Count * _Ty_size;
 if ( _Max_possible < _Count )
  {

  _Result = static_cast < size_t > ( - 1 );
  }

 return ( _Result );
 }
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template<> inline size_t _Get_size_of_n< 1Ui64> (const size_t _Count) 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
{ 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
return _Count; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
} 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> constexpr size_t 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_New_alignof = _Max_value(__alignof(_Ty), static_cast< size_t>(16Ui64)); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Default_allocate_traits { 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
__declspec(allocator) static void *_Allocate(const size_t _Bytes) 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
{ 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
return ::operator new(_Bytes); 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
} 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
constexpr bool _Is_pow_2(const size_t _Value) noexcept 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
{ 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
return (_Value != (0)) && ((_Value & (_Value - (1))) == (0)); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
} 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
constexpr size_t _Big_allocation_threshold = (4096); 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
constexpr size_t _Big_allocation_alignment = (32); 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
static_assert((((2) * sizeof(void *)) <= _Big_allocation_alignment), "Big allocation alignment should at least match vector register alignment");
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
static_assert(_Is_pow_2(_Big_allocation_alignment), "Big allocation alignment must be a power of two");
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
constexpr size_t _Non_user_size = ((sizeof(void *) + _Big_allocation_alignment) - (1)); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
constexpr size_t _Big_allocation_sentinel = 18085043209519168250Ui64; 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Traits > inline
 __declspec ( allocator ) void * _Allocate_manually_vector_aligned ( const size_t _Bytes )
 {
 size_t _Block_size = _Non_user_size + _Bytes;
 if ( _Block_size <= _Bytes )
  {

  _Block_size = static_cast < size_t > ( - 1 );
  }

 const uintptr_t _Ptr_container = reinterpret_cast < uintptr_t > ( _Traits :: _Allocate ( _Block_size ) );
 do { if ( _Ptr_container != 0 ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
 void * const _Ptr = reinterpret_cast < void * > ( ( _Ptr_container + _Non_user_size )
  & ~ ( _Big_allocation_alignment - 1 ) );
 static_cast < uintptr_t * > ( _Ptr ) [ - 1 ] = _Ptr_container;




 return ( _Ptr );
 }
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
inline void _Adjust_manually_vector_aligned(void *&_Ptr, size_t &_Bytes) 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
{ 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Bytes += _Non_user_size; 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
const uintptr_t *const _Ptr_user = reinterpret_cast< uintptr_t *>(_Ptr); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
const uintptr_t _Ptr_container = _Ptr_user[-1]; 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
; 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
constexpr uintptr_t _Min_back_shift = sizeof(void *); 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
const uintptr_t _Back_shift = (reinterpret_cast< uintptr_t>(_Ptr)) - _Ptr_container; 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
do { if ((_Back_shift >= _Min_back_shift) && (_Back_shift <= _Non_user_size)) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); }  ; } while (false); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Ptr = (reinterpret_cast< void *>(_Ptr_container)); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
} 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < size_t _Align,
 class _Traits = _Default_allocate_traits,
 enable_if_t < ( ! 0 || _Align <= 16Ui64 ), int > = 0 > inline
 __declspec ( allocator ) void * _Allocate ( const size_t _Bytes )
 {

 if ( _Bytes >= _Big_allocation_threshold )
  {
  return ( _Allocate_manually_vector_aligned < _Traits > ( _Bytes ) );
  }


 if ( _Bytes != 0 )
  {
  return ( _Traits :: _Allocate ( _Bytes ) );
  }

 return ( nullptr );
 }
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < size_t _Align,
 enable_if_t < ( ! 0 || _Align <= 16Ui64 ), int > = 0 > inline
 void _Deallocate ( void * _Ptr, size_t _Bytes )
 {

 if ( _Bytes >= _Big_allocation_threshold )
  {
  _Adjust_manually_vector_aligned ( _Ptr, _Bytes );
  }


 :: operator delete ( _Ptr, _Bytes );
 }
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Ty,
 class ... _Types > inline
 void _Construct_in_place ( _Ty & _Obj, _Types && ... _Args )
  noexcept ( is_nothrow_constructible_v < _Ty, _Types ... > )
 {
 :: new ( const_cast < void * > ( static_cast < const volatile void * > ( :: std :: addressof ( _Obj ) ) ) )
  _Ty ( :: std :: forward < _Types > ( _Args ) ... );
 }
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Ty,
 class ... _Types > inline
 _Ty * _Global_new ( _Types && ... _Args )
 {
 void * const _Result = _Allocate < _New_alignof < _Ty >> ( sizeof ( _Ty ) );
 try {
 :: new ( _Result ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );
 } catch ( ... ) {
 _Deallocate < _New_alignof < _Ty >> ( _Result, sizeof ( _Ty ) );
 throw;
 }
 return ( static_cast < _Ty * > ( _Result ) );
 }
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> struct _Get_first_parameter; 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< template< class , class ...>  class _Ty, class 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_First, class ...
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Rest> 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_first_parameter< _Ty< _First, _Rest...> >  { 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = _First; 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Newfirst, class 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Ty> struct _Replace_first_parameter; 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Newfirst, 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class , class ...>  class _Ty, class 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_First, class ...
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Rest> 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Replace_first_parameter< _Newfirst, _Ty< _First, _Rest...> >  { 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = _Ty< _Newfirst, _Rest...> ; 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_element_type { 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Get_first_parameter< _Ty> ::type; 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_element_type< _Ty, void_t< typename _Ty::element_type> >  { 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::element_type; 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_ptr_difference_type { 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = ptrdiff_t; 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_ptr_difference_type< _Ty, void_t< typename _Ty::difference_type> >  { 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::difference_type; 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Other, class 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_rebind_alias { 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Replace_first_parameter< _Other, _Ty> ::type; 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Other> 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_rebind_alias< _Ty, _Other, void_t< typename _Ty::template rebind< _Other> > >  { 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::template rebind< _Other> ; 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Ty >
 struct pointer_traits
 {
 using element_type = typename _Get_element_type < _Ty > :: type;
 using pointer = _Ty;
 using difference_type = typename _Get_ptr_difference_type < _Ty > :: type;

 template < class _Other >
  using rebind = typename _Get_rebind_alias < _Ty, _Other > :: type;

 using _Reftype = conditional_t < is_void_v < element_type >,
  char &,
  add_lvalue_reference_t < element_type >>;

  static pointer pointer_to ( _Reftype _Val )
  {
  return ( _Ty :: pointer_to ( _Val ) );
  }
 };
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Ty >
 struct pointer_traits < _Ty * >
 {
 using element_type = _Ty;
 using pointer = _Ty *;
 using difference_type = ptrdiff_t;

 template < class _Other >
  using rebind = _Other *;

 using _Reftype = conditional_t < is_void_v < _Ty >,
  char &,
  add_lvalue_reference_t < _Ty >>;

  static pointer pointer_to ( _Reftype _Val )
  {
  return ( :: std :: addressof ( _Val ) );
  }
 };
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ptr, class 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Ty> using _Rebind_pointer_t = typename pointer_traits< _Ptr> ::template rebind< _Ty> ; 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Pointer,
 enable_if_t < ! is_pointer_v < _Pointer >, int > = 0 > inline
 _Pointer _Refancy ( typename pointer_traits < _Pointer > :: element_type * _Ptr )
 {
 return ( pointer_traits < _Pointer > :: pointer_to ( * _Ptr ) );
 }
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Pointer,
 enable_if_t < is_pointer_v < _Pointer >, int > = 0 > inline
 _Pointer _Refancy ( _Pointer _Ptr )
 {
 return ( _Ptr );
 }
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Ty > inline
 void _Destroy_in_place ( _Ty & _Obj ) noexcept
 {
 _Obj . ~ _Ty ( );
 }
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Ptrty > inline
 auto _Const_cast ( _Ptrty _Ptr )
 {
 using _Elem = typename pointer_traits < _Ptrty > :: element_type;
 using _Modifiable = remove_const_t < _Elem >;
 using _Dest = typename pointer_traits < _Ptrty > :: template rebind < _Modifiable >;

 return ( pointer_traits < _Dest > :: pointer_to ( const_cast < _Modifiable & > ( * _Ptr ) ) );
 }
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Ty > inline
 auto _Const_cast ( _Ty * _Ptr )
 {
 return ( const_cast < remove_const_t < _Ty > * > ( _Ptr ) );
 }
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_pointer_type { 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::value_type *; 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Ty> 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_pointer_type< _Ty, void_t< typename _Ty::pointer> >  { 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::pointer; 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#pragma warning(pop)
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_const_pointer_type { 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using _Valty = typename _Ty::value_type; 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename pointer_traits< _Ptrty> ::template rebind< const _Valty> ; 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Ty> 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_const_pointer_type< _Ty, void_t< typename _Ty::const_pointer> >  { 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::const_pointer; 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#pragma warning(pop)
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_void_pointer_type { 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename pointer_traits< _Ptrty> ::template rebind< void> ; 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_void_pointer_type< _Ty, void_t< typename _Ty::void_pointer> >  { 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::void_pointer; 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_const_void_pointer_type { 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename pointer_traits< _Ptrty> ::template rebind< const void> ; 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_const_void_pointer_type< _Ty, void_t< typename _Ty::const_void_pointer> >  { 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::const_void_pointer; 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_difference_type { 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename pointer_traits< _Ptrty> ::difference_type; 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Ty> 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_difference_type< _Ty, void_t< typename _Ty::difference_type> >  { 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::difference_type; 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#pragma warning(pop)
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_size_type { 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = make_unsigned_t< typename _Get_difference_type< _Ty> ::type> ; 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Ty> 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_size_type< _Ty, void_t< typename _Ty::size_type> >  { 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::size_type; 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#pragma warning(pop)
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_propagate_on_container_copy { 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = false_type; 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_propagate_on_container_copy< _Ty, void_t< typename _Ty::propagate_on_container_copy_assignment> >  { 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::propagate_on_container_copy_assignment; 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_propagate_on_container_move { 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = false_type; 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_propagate_on_container_move< _Ty, void_t< typename _Ty::propagate_on_container_move_assignment> >  { 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::propagate_on_container_move_assignment; 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_propagate_on_container_swap { 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = false_type; 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> 
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_propagate_on_container_swap< _Ty, void_t< typename _Ty::propagate_on_container_swap> >  { 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::propagate_on_container_swap; 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_is_always_equal { 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename is_empty< _Ty> ::type; 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_is_always_equal< _Ty, void_t< typename _Ty::is_always_equal> >  { 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::is_always_equal; 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty, class 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Other, class 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_rebind_type { 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Replace_first_parameter< _Other, _Ty> ::type; 
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Ty, class 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Other> 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Get_rebind_type< _Ty, _Other, void_t< typename _Ty::template rebind< _Other> ::other> >  { 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using type = typename _Ty::template rebind< _Other> ::other; 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#pragma warning(pop)
#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> class allocator; 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc, class 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Is_default_allocator : public false_type { 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Ty> 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Is_default_allocator< allocator< _Ty> , typename allocator< _Ty> ::_Not_user_specialized>  : public true_type { 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Void, class ...
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Types> 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Has_no_alloc_construct : public true_type { 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Alloc, class 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Ptr, class ...
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Args> 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Has_no_alloc_construct< void_t< decltype(((std::declval< _Alloc &> ().construct(std::declval< _Ptr> (), std::declval< _Args> ()...))))> , _Alloc, _Ptr, _Args...>  : public false_type { 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#pragma warning(pop)
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc, class 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Ptr, class ...
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Args> using _Uses_default_construct = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_construct< void, _Alloc, _Ptr, _Args...> > ; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc, class 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Ptr, class ...
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Args> using _Uses_default_construct_t = typename disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_construct< void, _Alloc, _Ptr, _Args...> > ::type; 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc, class 
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Ptr, class 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Has_no_alloc_destroy : public true_type { 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Alloc, class 
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Ptr> 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Has_no_alloc_destroy< _Alloc, _Ptr, void_t< decltype(((std::declval< _Alloc &> ().destroy(std::declval< _Ptr> ()))))> >  : public false_type { 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#pragma warning(pop)
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc, class 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Ptr> using _Uses_default_destroy = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ; 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc, class 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Ptr> using _Uses_default_destroy_t = typename disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ::type; 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc, class 
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Size_type, class 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Const_void_pointer, class 
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Has_allocate_hint : public false_type { 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Alloc, class 
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Size_type, class 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Const_void_pointer> 
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Has_allocate_hint< _Alloc, _Size_type, _Const_void_pointer, void_t< decltype(((std::declval< _Alloc &> ().allocate(std::declval< const _Size_type &> (), std::declval< const _Const_void_pointer &> ()))))> >  : public true_type { 
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#pragma warning(pop)
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc, class 
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Has_max_size : public false_type { 
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(push)
#pragma warning(disable: 4996)
template< class _Alloc> 
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Has_max_size< _Alloc, void_t< decltype(((std::declval< const _Alloc &> ().max_size())))> >  : public true_type { 
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#pragma warning(pop)
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc, class 
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
 = void> 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Has_select_on_container_copy_construction : public false_type { 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc> 
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Has_select_on_container_copy_construction< _Alloc, void_t< decltype(((std::declval< const _Alloc &> ().select_on_container_copy_construction())))> >  : public true_type { 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc> struct allocator_traits; 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(push)
#pragma warning(disable: 4996)
template < class _Alloc >
 struct _Normal_allocator_traits
 {
 using allocator_type = _Alloc;
 using value_type = typename _Alloc :: value_type;

 using pointer = typename _Get_pointer_type < _Alloc > :: type;
 using const_pointer = typename _Get_const_pointer_type < _Alloc > :: type;
 using void_pointer = typename _Get_void_pointer_type < _Alloc > :: type;
 using const_void_pointer = typename _Get_const_void_pointer_type < _Alloc > :: type;

 using size_type = typename _Get_size_type < _Alloc > :: type;
 using difference_type = typename _Get_difference_type < _Alloc > :: type;

 using propagate_on_container_copy_assignment = typename _Get_propagate_on_container_copy < _Alloc > :: type;
 using propagate_on_container_move_assignment = typename _Get_propagate_on_container_move < _Alloc > :: type;
 using propagate_on_container_swap = typename _Get_propagate_on_container_swap < _Alloc > :: type;
 using is_always_equal = typename _Get_is_always_equal < _Alloc > :: type;

 template < class _Other >
  using rebind_alloc = typename _Get_rebind_type < _Alloc, _Other > :: type;

 template < class _Other >
  using rebind_traits = allocator_traits < rebind_alloc < _Other >>;

  static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, const size_type _Count )
  {
  return ( _Al . allocate ( _Count ) );
  }

 static __declspec ( allocator ) pointer _Allocate1 ( _Alloc & _Al, const size_type _Count,
  const const_void_pointer _Hint, true_type )
  {
  return ( _Al . allocate ( _Count, _Hint ) );
  }

 static __declspec ( allocator ) pointer _Allocate1 ( _Alloc & _Al, const size_type _Count,
  const_void_pointer, false_type )
  {
  return ( _Al . allocate ( _Count ) );
  }

  static __declspec ( allocator ) pointer allocate ( _Alloc & _Al, const size_type _Count,
  const const_void_pointer _Hint )
  {
  return ( _Allocate1 ( _Al, _Count, _Hint, _Has_allocate_hint < _Alloc, size_type, const_void_pointer > { } ) );
  }

 static void deallocate ( _Alloc & _Al, pointer _Ptr, size_type _Count )
  {
  _Al . deallocate ( _Ptr, _Count );
  }

 template < class _Ty,
  class ... _Types >
  static void _Construct1 ( true_type, _Alloc &, _Ty * _Ptr, _Types && ... _Args )
  {
  :: new ( static_cast < void * > ( _Ptr ) ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty,
  class ... _Types >
  static void _Construct1 ( false_type, _Alloc & _Al, _Ty * _Ptr, _Types && ... _Args )
  {
  _Al . construct ( _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty,
  class ... _Types >
  static void construct ( _Alloc & _Al, _Ty * _Ptr, _Types && ... _Args )
  {
  _Construct1 ( _Uses_default_construct_t < _Alloc, _Ty *, _Types ... > ( ),
   _Al, _Ptr, :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Ty >
  static void _Destroy1 ( _Alloc &, _Ty * _Ptr, true_type )
  {
  _Ptr -> ~ _Ty ( );
  }

 template < class _Ty >
  static void _Destroy1 ( _Alloc & _Al, _Ty * _Ptr, false_type )
  {
  _Al . destroy ( _Ptr );
  }

 template < class _Ty >
  static void destroy ( _Alloc & _Al, _Ty * _Ptr )
  {
  _Destroy1 ( _Al, _Ptr, _Uses_default_destroy_t < _Alloc, _Ty * > ( ) );
  }

 static size_type _Max_size1 ( const _Alloc & _Al, true_type ) noexcept
  {
  return ( _Al . max_size ( ) );
  }

 static size_type _Max_size1 ( const _Alloc &, false_type ) noexcept
  {
  return ( ( numeric_limits < size_type > :: max ) ( ) / sizeof ( value_type ) );
  }

  static size_type max_size ( const _Alloc & _Al ) noexcept
  {
  return ( _Max_size1 ( _Al, _Has_max_size < _Alloc > { } ) );
  }

 static _Alloc _Select_on_container_copy_construction1 ( const _Alloc & _Al, true_type )
  {
  return ( _Al . select_on_container_copy_construction ( ) );
  }

 static _Alloc _Select_on_container_copy_construction1 ( const _Alloc & _Al, false_type )
  {
  return ( _Al );
  }

  static _Alloc select_on_container_copy_construction ( const _Alloc & _Al )
  {
  return ( _Select_on_container_copy_construction1 ( _Al, _Has_select_on_container_copy_construction < _Alloc > { } ) );
  }
 };
#pragma warning(pop)
#line 834 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc >
 struct _Default_allocator_traits
 {
 using allocator_type = _Alloc;
 using value_type = typename _Alloc :: value_type;

 using pointer = value_type *;
 using const_pointer = const value_type *;
 using void_pointer = void *;
 using const_void_pointer = const void *;

 using size_type = size_t;
 using difference_type = ptrdiff_t;

 using propagate_on_container_copy_assignment = false_type;
 using propagate_on_container_move_assignment = true_type;
 using propagate_on_container_swap = false_type;
 using is_always_equal = true_type;

 template < class _Other >
  using rebind_alloc = allocator < _Other >;

 template < class _Other >
  using rebind_traits = allocator_traits < allocator < _Other >>;

  static __declspec ( allocator ) pointer allocate ( _Alloc &, const size_type _Count )
  {
  return ( static_cast < pointer > ( _Allocate < _New_alignof < value_type >> ( _Get_size_of_n < sizeof ( value_type ) > ( _Count ) ) ) );
  }

  static __declspec ( allocator ) pointer allocate ( _Alloc &, const size_type _Count,
  const_void_pointer )
  {
  return ( static_cast < pointer > ( _Allocate < _New_alignof < value_type >> ( _Get_size_of_n < sizeof ( value_type ) > ( _Count ) ) ) );
  }

 static void deallocate ( _Alloc &, const pointer _Ptr, const size_type _Count )
  {

  _Deallocate < _New_alignof < value_type >> ( _Ptr, sizeof ( value_type ) * _Count );
  }

 template < class _Objty,
  class ... _Types >
  static void construct ( _Alloc &, _Objty * const _Ptr, _Types && ... _Args )
  {
  :: new ( const_cast < void * > ( static_cast < const volatile void * > ( _Ptr ) ) )
   _Objty ( :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Uty >
  static void destroy ( _Alloc &, _Uty * const _Ptr )
  {
  _Ptr -> ~ _Uty ( );
  }

  static size_type max_size ( const _Alloc & ) noexcept
  {
  return ( static_cast < size_t > ( - 1 ) / sizeof ( value_type ) );
  }

  static _Alloc select_on_container_copy_construction ( const _Alloc & _Al )
  {
  return ( _Al );
  }
 };
#line 901 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc> 
#line 902 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct allocator_traits : public conditional_t< _Is_default_allocator< _Alloc> ::value, _Default_allocator_traits< _Alloc> , _Normal_allocator_traits< _Alloc> >  { 
#line 906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc> constexpr bool 
#line 910 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Always_equal_after_move = (allocator_traits< _Alloc> ::is_always_equal::value || allocator_traits< _Alloc> ::propagate_on_container_move_assignment::value); 
#line 914 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc, class 
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Value_type> using _Rebind_alloc_t = typename allocator_traits< _Alloc> ::template rebind_alloc< _Value_type> ; 
#line 919 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Alloc> constexpr bool 
#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
_Is_simple_alloc_v = ((is_same_v< typename allocator_traits< _Alloc> ::size_type, unsigned __int64>  && is_same_v< typename allocator_traits< _Alloc> ::difference_type, __int64> ) && is_same_v< typename allocator_traits< _Alloc> ::pointer, typename _Alloc::value_type *> ) && is_same_v< typename allocator_traits< _Alloc> ::const_pointer, const typename _Alloc::value_type *> ; 
#line 927 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Value_type> 
#line 928 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct _Simple_types { 
#line 931 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using value_type = _Value_type; 
#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using size_type = size_t; 
#line 933 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using difference_type = ptrdiff_t; 
#line 934 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using pointer = value_type *; 
#line 935 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using const_pointer = const value_type *; 
#line 936 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Ty >
 class allocator
 {
public :
 static_assert ( ! is_const_v < _Ty >,
  "The C++ Standard forbids containers of const elements because allocator<const T> is ill-formed."
                                             );

 using _Not_user_specialized = void;

 using value_type = _Ty;

  typedef _Ty * pointer;
  typedef const _Ty * const_pointer;

  typedef _Ty & reference;
  typedef const _Ty & const_reference;

  typedef size_t size_type;
  typedef ptrdiff_t difference_type;

 using propagate_on_container_move_assignment = true_type;
 using is_always_equal = true_type;

 template < class _Other >
  struct rebind
  {
  using other = allocator < _Other >;
  };

   _Ty * address ( _Ty & _Val ) const noexcept
  {
  return ( :: std :: addressof ( _Val ) );
  }

   const _Ty * address ( const _Ty & _Val ) const noexcept
  {
  return ( :: std :: addressof ( _Val ) );
  }

 constexpr allocator ( ) noexcept
  {
  }

 constexpr allocator ( const allocator & ) noexcept = default;
 template < class _Other >
  constexpr allocator ( const allocator < _Other > & ) noexcept
  {
  }

 void deallocate ( _Ty * const _Ptr, const size_t _Count )
  {

  _Deallocate < _New_alignof < _Ty >> ( _Ptr, sizeof ( _Ty ) * _Count );
  }

  __declspec ( allocator ) _Ty * allocate ( const size_t _Count )
  {
  return ( static_cast < _Ty * > ( _Allocate < _New_alignof < _Ty >> ( _Get_size_of_n < sizeof ( _Ty ) > ( _Count ) ) ) );
  }

   __declspec ( allocator ) _Ty * allocate (
   const size_t _Count, const void * )
  {
  return ( allocate ( _Count ) );
  }

 template < class _Objty,
  class ... _Types >
   void construct ( _Objty * const _Ptr, _Types && ... _Args )
  {
  :: new ( const_cast < void * > ( static_cast < const volatile void * > ( _Ptr ) ) )
   _Objty ( :: std :: forward < _Types > ( _Args ) ... );
  }

 template < class _Uty >
   void destroy ( _Uty * const _Ptr )
  {
  _Ptr -> ~ _Uty ( );
  }

   size_t max_size ( ) const noexcept
  {
  return ( static_cast < size_t > ( - 1 ) / sizeof ( _Ty ) );
  }
 };
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma pack(8)
template<> 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
class allocator< void>  { 
#line 1031 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
public: using value_type = void; 
#line 1032 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using pointer = void *; 
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using const_pointer = const void *; 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template< class _Other> 
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
struct rebind { 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
using other = std::allocator< _Other> ; 
#line 1039 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#line 1040 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}; 
#pragma pack()
template < class _Ty,
 class _Other >
  inline bool operator == ( const allocator < _Ty > &,
  const allocator < _Other > & ) noexcept
 {
 return ( true );
 }
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Ty,
 class _Other >
  inline bool operator != ( const allocator < _Ty > &,
  const allocator < _Other > & ) noexcept
 {
 return ( false );
 }
#line 1067 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Pocca ( _Alloc & _Left, const _Alloc & _Right, true_type ) noexcept
 {
 _Left = _Right;
 }
#line 1073 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Pocca ( _Alloc &, const _Alloc &, false_type ) noexcept
 {
 }
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Pocca ( _Alloc & _Left, const _Alloc & _Right ) noexcept
 {
 typename allocator_traits < _Alloc > :: propagate_on_container_copy_assignment _Tag;
 _Pocca ( _Left, _Right, _Tag );
 }
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Pocma ( _Alloc & _Left, _Alloc & _Right, true_type ) noexcept
 {
 _Left = :: std :: move ( _Right );
 }
#line 1092 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Pocma ( _Alloc &, _Alloc &, false_type ) noexcept
 {
 }
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Pocma ( _Alloc & _Left, _Alloc & _Right ) noexcept
 {
 typename allocator_traits < _Alloc > :: propagate_on_container_move_assignment _Tag;
 _Pocma ( _Left, _Right, _Tag );
 }
#line 1105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Pocs ( _Alloc & _Left, _Alloc & _Right, true_type ) noexcept
 {
 _Swap_adl ( _Left, _Right );
 }
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Pocs ( _Alloc & _Left, _Alloc & _Right, false_type ) noexcept
 {
 ;
 ( void ) _Left;
 ( void ) _Right;
 }
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Pocs ( _Alloc & _Left, _Alloc & _Right ) noexcept
 {
 typename allocator_traits < _Alloc > :: propagate_on_container_swap _Tag;
 _Pocs ( _Left, _Right, _Tag );
 }
#line 1128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Destroy_range1 (
  typename allocator_traits < _Alloc > :: pointer _First,
  typename allocator_traits < _Alloc > :: pointer _Last,
  _Alloc & _Al, false_type )
 {
 for (; _First != _Last; ++ _First )
  {
  allocator_traits < _Alloc > :: destroy ( _Al, _Unfancy ( _First ) );
  }
 }
#line 1140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Destroy_range1 (
  typename allocator_traits < _Alloc > :: pointer,
  typename allocator_traits < _Alloc > :: pointer,
  _Alloc &, true_type )
 {

 }
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc > inline
 void _Destroy_range (
  typename allocator_traits < _Alloc > :: pointer _First,
  typename allocator_traits < _Alloc > :: pointer _Last,
  _Alloc & _Al )
 {


 using _Val = typename _Alloc :: value_type;
 _Destroy_range1 ( _First, _Last, _Al, bool_constant < conjunction_v <
  is_trivially_destructible < _Val >,
  _Uses_default_destroy < _Alloc, _Val * >> > { } );
 }
#line 1165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _FwdIt > inline
 void _Destroy_range1 ( _FwdIt _First, _FwdIt _Last, false_type )
 {
 for (; _First != _Last; ++ _First )
  {
  _Destroy_in_place ( * _First );
  }
 }
#line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _FwdIt > inline
 void _Destroy_range1 ( _FwdIt, _FwdIt, true_type )
 {

 }
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _FwdIt > inline
 void _Destroy_range ( _FwdIt _First, _FwdIt _Last )
 {


 _Destroy_range1 ( _First, _Last, is_trivially_destructible < _Iter_value_t < _FwdIt >> ( ) );
 }
#line 1190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Size_type > inline
 _Size_type _Convert_size ( const size_t _Len )
 {
 if ( _Len > ( numeric_limits < _Size_type > :: max ) ( ) )
  {
  _Xlength_error ( "size_t too long for _Size_type" );
  }

 return ( static_cast < _Size_type > ( _Len ) );
 }
#line 1202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template<> inline size_t _Convert_size< unsigned __int64> (const size_t _Len) 
#line 1203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
{ 
#line 1204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
return _Len; 
#line 1205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
} 
#line 1208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc,
 enable_if_t < is_same_v < typename allocator_traits < _Alloc > :: pointer,
  typename _Alloc :: value_type * >, int > = 0 > inline
 void _Deallocate_plain ( _Alloc & _Al, typename _Alloc :: value_type * const _Ptr )
 {
 allocator_traits < _Alloc > :: deallocate ( _Al, _Ptr, 1 );
 }
#line 1216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
template < class _Alloc,
 enable_if_t < ! is_same_v < typename allocator_traits < _Alloc > :: pointer,
  typename _Alloc :: value_type * >, int > = 0 > inline
 void _Deallocate_plain ( _Alloc & _Al, typename _Alloc :: value_type * const _Ptr )
 {
 using _Alloc_traits = allocator_traits < _Alloc >;
 using _Ptr_traits = pointer_traits < typename _Alloc_traits :: pointer >;
 _Alloc_traits :: deallocate ( _Al, _Ptr_traits :: pointer_to ( * _Ptr ), 1 );
 }
#line 1225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
}
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
namespace std { 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
typedef 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
enum memory_order { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
memory_order_relaxed, 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
memory_order_consume, 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
memory_order_acquire, 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
memory_order_release, 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
memory_order_acq_rel, 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
memory_order_seq_cst
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
} memory_order; 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
typedef unsigned long _Uint4_t; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
typedef _Uint4_t _Atomic_integral_t; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
typedef _Atomic_integral_t _Atomic_counter_t; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
inline _Atomic_integral_t _Get_atomic_count(const _Atomic_counter_t &_Counter) 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
{ 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
return _Counter; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
} 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
}
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
extern "C" {
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask); 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
unsigned char _bittest(const long *, long); 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
long _InterlockedAnd(volatile long * _Value, long _Mask); 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
short _InterlockedAnd16(volatile short * _Value, short _Mask); 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
__int64 _InterlockedAnd64(volatile __int64 * _Value, __int64 _Mask); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
char _InterlockedAnd8(volatile char * _Value, char _Mask); 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
long _InterlockedCompareExchange(volatile long * _Destination, long _Exchange, long _Comparand); 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
short _InterlockedCompareExchange16(volatile short * _Destination, short _Exchange, short _Comparand); 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
__int64 _InterlockedCompareExchange64(volatile __int64 * _Destination, __int64 _Exchange, __int64 _Comparand); 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
char _InterlockedCompareExchange8(volatile char * _Destination, char _Exchange, char _Comparand); 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
long _InterlockedDecrement(volatile long * _Addend); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
long _InterlockedExchange(volatile long * _Target, long _Value); 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
short _InterlockedExchange16(volatile short * _Target, short _Value); 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
__int64 _InterlockedExchange64(volatile __int64 * _Target, __int64 _Value); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
char _InterlockedExchange8(volatile char * _Target, char _Value); 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
long _InterlockedExchangeAdd(volatile long * _Addend, long _Value); 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
short _InterlockedExchangeAdd16(volatile short * _Addend, short _Value); 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
__int64 _InterlockedExchangeAdd64(volatile __int64 * _Addend, __int64 _Value); 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
char _InterlockedExchangeAdd8(volatile char * _Addend, char _Value); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
long _InterlockedIncrement(volatile long * _Addend); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
long _InterlockedOr(volatile long * _Value, long _Mask); 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
short _InterlockedOr16(volatile short * _Value, short _Mask); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
__int64 _InterlockedOr64(volatile __int64 * _Value, __int64 _Mask); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
char _InterlockedOr8(volatile char * _Value, char _Mask); 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
long _InterlockedXor(volatile long * _Value, long _Mask); 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
short _InterlockedXor16(volatile short * _Value, short _Mask); 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
__int64 _InterlockedXor64(volatile __int64 * _Value, __int64 _Mask); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
char _InterlockedXor8(volatile char * _Value, char _Mask); 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
void _ReadWriteBarrier(); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
unsigned char _interlockedbittestandset(volatile long *, long); 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
}
#line 1249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#pragma warning(pop)
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
namespace std { 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template< class _Traits> using _Traits_ch_t = typename _Traits::char_type; 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template< class _Traits> using _Traits_ptr_t = const typename _Traits::char_type *; 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr bool _Traits_equal ( const _Traits_ptr_t < _Traits > _Left, const size_t _Left_size,
    const _Traits_ptr_t < _Traits > _Right, const size_t _Right_size ) noexcept
 {
 return ( _Left_size == _Right_size && _Traits :: compare ( _Left, _Right, _Left_size ) == 0 );
 }
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr int _Traits_compare ( const _Traits_ptr_t < _Traits > _Left, const size_t _Left_size,
    const _Traits_ptr_t < _Traits > _Right, const size_t _Right_size ) noexcept
 {
 const int _Ans = _Traits :: compare ( _Left, _Right, _Min_value ( _Left_size, _Right_size ) );

 if ( _Ans != 0 )
  {
  return ( _Ans );
  }

 if ( _Left_size < _Right_size )
  {
  return ( - 1 );
  }

 if ( _Left_size > _Right_size )
  {
  return ( 1 );
  }

 return ( 0 );
 }
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
    const _Traits_ptr_t < _Traits > _Needle, const size_t _Needle_size ) noexcept
 {
 if ( _Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size )
  {







  return ( static_cast < size_t > ( - 1 ) );
  }

 if ( _Needle_size == 0 )
  {
  return ( _Start_at );
  }

 const auto _Possible_matches_end = _Haystack + ( _Hay_size - _Needle_size ) + 1;
 for ( auto _Match_try = _Haystack + _Start_at;; ++ _Match_try )
  {
  _Match_try = _Traits :: find ( _Match_try, static_cast < size_t > ( _Possible_matches_end - _Match_try ), * _Needle );
  if ( ! _Match_try )
   {
   return ( static_cast < size_t > ( - 1 ) );
   }

  if ( _Traits :: compare ( _Match_try, _Needle, _Needle_size ) == 0 )
   {
   return ( static_cast < size_t > ( _Match_try - _Haystack ) );
   }
  }
 }
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find_ch (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
  const _Traits_ch_t < _Traits > _Ch ) noexcept
 {
 if ( _Start_at < _Hay_size )
  {
  const auto _Found_at = _Traits :: find ( _Haystack + _Start_at, _Hay_size - _Start_at, _Ch );
  if ( _Found_at )
   {
   return ( static_cast < size_t > ( _Found_at - _Haystack ) );
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_rfind (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
    const _Traits_ptr_t < _Traits > _Needle, const size_t _Needle_size ) noexcept
 {
 if ( _Needle_size == 0 )
  {
  return ( _Min_value ( _Start_at, _Hay_size ) );
  }

 if ( _Needle_size <= _Hay_size )
  {
  for ( auto _Match_try = _Haystack + _Min_value ( _Start_at, _Hay_size - _Needle_size );; -- _Match_try )
   {
   if ( _Traits :: eq ( * _Match_try, * _Needle )
    && _Traits :: compare ( _Match_try, _Needle, _Needle_size ) == 0 )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }

   if ( _Match_try == _Haystack )
    {
    break;
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_rfind_ch (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
  const _Traits_ch_t < _Traits > _Ch ) noexcept
 {
 if ( _Hay_size != 0 )
  {
  for ( auto _Match_try = _Haystack + _Min_value ( _Start_at, _Hay_size - 1 );; -- _Match_try )
   {
   if ( _Traits :: eq ( * _Match_try, _Ch ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }

   if ( _Match_try == _Haystack )
    {
    break;
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 bool = _Is_character < _Elem > :: value >
 class _String_bitmap
 {
public :
 constexpr bool _Mark ( const _Elem * _First, const _Elem * const _Last )
  {

  for (; _First != _Last; ++ _First )
   {
   _Matches [ static_cast < unsigned char > ( * _First ) ] = true;
   }

  return ( true );
  }

 constexpr bool _Match ( const _Elem _Ch ) const
  {
  return ( _Matches [ static_cast < unsigned char > ( _Ch ) ] );
  }

private :
 bool _Matches [ 256 ] = { };
 };
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem >
 class _String_bitmap < _Elem, false >
 {
public :
 static_assert ( is_unsigned_v < _Elem >,
  "Standard char_traits is only provided for char, wchar_t, char16_t, and char32_t. See N5687 [char.traits]. Visual C++ accepts oth" "er unsigned integral types as an extension."
                                                                     );

 constexpr bool _Mark ( const _Elem * _First, const _Elem * const _Last )
  {

  for (; _First != _Last; ++ _First )
   {
   const auto _Ch = * _First;
   if ( _Ch >= 256U )
    {
    return ( false );
    }

   _Matches [ static_cast < unsigned char > ( _Ch ) ] = true;
   }

  return ( true );
  }

 constexpr bool _Match ( const _Elem _Ch ) const
  {
  return ( _Ch < 256U && _Matches [ _Ch ] );
  }

private :
 bool _Matches [ 256 ] = { };
 };
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find_first_of (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
    const _Traits_ptr_t < _Traits > _Needle, const size_t _Needle_size, false_type ) noexcept
 {

 if ( _Needle_size != 0 && _Start_at < _Hay_size )
  {
  const auto _End = _Haystack + _Hay_size;
  for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try )
   {
   if ( _Traits :: find ( _Needle, _Needle_size, * _Match_try ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find_first_of (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
    const _Traits_ptr_t < _Traits > _Needle, const size_t _Needle_size, true_type ) noexcept
 {

 if ( _Needle_size != 0 && _Start_at < _Hay_size )
  {
  _String_bitmap < typename _Traits :: char_type > _Matches;
  if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) )
   {
   return ( _Traits_find_first_of < _Traits > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
    false_type { } ) );
   }

  const auto _End = _Haystack + _Hay_size;
  for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try )
   {
   if ( _Matches . _Match ( * _Match_try ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find_last_of (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
    const _Traits_ptr_t < _Traits > _Needle, const size_t _Needle_size, false_type ) noexcept
 {

 if ( _Needle_size != 0 && _Hay_size != 0 )
  {
  for ( auto _Match_try = _Haystack + _Min_value ( _Start_at, _Hay_size - 1 );; -- _Match_try )
   {
   if ( _Traits :: find ( _Needle, _Needle_size, * _Match_try ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }

   if ( _Match_try == _Haystack )
    {
    break;
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find_last_of (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
    const _Traits_ptr_t < _Traits > _Needle, const size_t _Needle_size, true_type ) noexcept
 {

 if ( _Needle_size != 0 && _Hay_size != 0 )
  {
  _String_bitmap < typename _Traits :: char_type > _Matches;
  if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) )
   {
   return ( _Traits_find_last_of < _Traits > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
    false_type { } ) );
   }

  for ( auto _Match_try = _Haystack + _Min_value ( _Start_at, _Hay_size - 1 );; -- _Match_try )
   {
   if ( _Matches . _Match ( * _Match_try ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }

   if ( _Match_try == _Haystack )
    {
    break;
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find_first_not_of (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
    const _Traits_ptr_t < _Traits > _Needle, const size_t _Needle_size, false_type ) noexcept
 {

 if ( _Start_at < _Hay_size )
  {
  const auto _End = _Haystack + _Hay_size;
  for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try )
   {
   if ( ! _Traits :: find ( _Needle, _Needle_size, * _Match_try ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find_first_not_of (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
    const _Traits_ptr_t < _Traits > _Needle, const size_t _Needle_size, true_type ) noexcept
 {

 if ( _Start_at < _Hay_size )
  {
  _String_bitmap < typename _Traits :: char_type > _Matches;
  if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) )
   {
   return ( _Traits_find_first_not_of < _Traits > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
    false_type { } ) );
   }

  const auto _End = _Haystack + _Hay_size;
  for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try )
   {
   if ( ! _Matches . _Match ( * _Match_try ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find_not_ch (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
  const _Traits_ch_t < _Traits > _Ch ) noexcept
 {
 if ( _Start_at < _Hay_size )
  {
  const auto _End = _Haystack + _Hay_size;
  for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try )
   {
   if ( ! _Traits :: eq ( * _Match_try, _Ch ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find_last_not_of (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
    const _Traits_ptr_t < _Traits > _Needle, const size_t _Needle_size, false_type ) noexcept
 {

 if ( _Hay_size != 0 )
  {
  for ( auto _Match_try = _Haystack + _Min_value ( _Start_at, _Hay_size - 1 );; -- _Match_try )
   {
   if ( ! _Traits :: find ( _Needle, _Needle_size, * _Match_try ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }

   if ( _Match_try == _Haystack )
    {
    break;
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_find_last_not_of (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
    const _Traits_ptr_t < _Traits > _Needle, const size_t _Needle_size, true_type ) noexcept
 {

 if ( _Hay_size != 0 )
  {
  _String_bitmap < typename _Traits :: char_type > _Matches;
  if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) )
   {
   return ( _Traits_find_last_not_of < _Traits > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
    false_type { } ) );
   }

  for ( auto _Match_try = _Haystack + _Min_value ( _Start_at, _Hay_size - 1 );; -- _Match_try )
   {
   if ( ! _Matches . _Match ( * _Match_try ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }

   if ( _Match_try == _Haystack )
    {
    break;
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Traits >
 constexpr size_t _Traits_rfind_not_ch (
    const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size, const size_t _Start_at,
  const _Traits_ch_t < _Traits > _Ch ) noexcept
 {
 if ( _Hay_size != 0 )
  {
  for ( auto _Match_try = _Haystack + _Min_value ( _Start_at, _Hay_size - 1 );; -- _Match_try )
   {
   if ( ! _Traits :: eq ( * _Match_try, _Ch ) )
    {
    return ( static_cast < size_t > ( _Match_try - _Haystack ) );
    }

   if ( _Match_try == _Haystack )
    {
    break;
    }
   }
  }

 return ( static_cast < size_t > ( - 1 ) );
 }
#line 1398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Mystr >
 class _String_const_iterator
  : public _Iterator_base
 {
public :
 using iterator_category = random_access_iterator_tag;

 using value_type = typename _Mystr :: value_type;
 using difference_type = typename _Mystr :: difference_type;
 using pointer = typename _Mystr :: const_pointer;
 using reference = const value_type &;

 _String_const_iterator ( )
  : _Ptr ( )
  {
  }

 _String_const_iterator ( pointer _Parg, const _Container_base * _Pstring )
  : _Ptr ( _Parg )
  {
  this -> _Adopt ( _Pstring );
  }

  reference operator * ( ) const
  {











  ;
  return ( * _Ptr );
  }

  pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _String_const_iterator & operator ++ ( )
  {









  ++ _Ptr;
  return ( * this );
  }

 _String_const_iterator operator ++ ( int )
  {
  _String_const_iterator _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _String_const_iterator & operator -- ( )
  {








  -- _Ptr;
  return ( * this );
  }

 _String_const_iterator operator -- ( int )
  {
  _String_const_iterator _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 void _Verify_offset ( const difference_type _Off ) const noexcept
  {


























  ( void ) _Off;

  }

 _String_const_iterator & operator += ( const difference_type _Off )
  {



  _Ptr += _Off;
  return ( * this );
  }

  _String_const_iterator operator + ( const difference_type _Off ) const
  {
  _String_const_iterator _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _String_const_iterator & operator -= ( const difference_type _Off )
  {
  return ( * this += - _Off );
  }

  _String_const_iterator operator - ( const difference_type _Off ) const
  {
  _String_const_iterator _Tmp = * this;
  return ( _Tmp -= _Off );
  }

  difference_type operator - ( const _String_const_iterator & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr - _Right . _Ptr );
  }

  reference operator [ ] ( const difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

  bool operator == ( const _String_const_iterator & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr == _Right . _Ptr );
  }

  bool operator != ( const _String_const_iterator & _Right ) const
  {
  return ( ! ( * this == _Right ) );
  }

  bool operator < ( const _String_const_iterator & _Right ) const
  {
  _Compat ( _Right );
  return ( _Ptr < _Right . _Ptr );
  }

  bool operator > ( const _String_const_iterator & _Right ) const
  {
  return ( _Right < * this );
  }

  bool operator <= ( const _String_const_iterator & _Right ) const
  {
  return ( ! ( _Right < * this ) );
  }

  bool operator >= ( const _String_const_iterator & _Right ) const
  {
  return ( ! ( * this < _Right ) );
  }

 void _Compat ( const _String_const_iterator & _Right ) const
  {




  ( void ) _Right;

  }










  pointer _Unwrapped ( ) const
  {
  return ( _Ptr );
  }

 void _Seek_to ( pointer _It )
  {
  _Ptr = _It;
  }

 pointer _Ptr;
 };
#line 1619 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Mystr >
  inline _String_const_iterator < _Mystr > operator + (
  typename _String_const_iterator < _Mystr > :: difference_type _Off,
  _String_const_iterator < _Mystr > _Next )
 {
 return ( _Next += _Off );
 }
#line 1628 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Mystr >
 class _String_iterator
  : public _String_const_iterator < _Mystr >
 {
public :
 using _Mybase = _String_const_iterator < _Mystr >;
 using iterator_category = random_access_iterator_tag;

 using value_type = typename _Mystr :: value_type;
 using difference_type = typename _Mystr :: difference_type;
 using pointer = typename _Mystr :: pointer;
 using reference = value_type &;

 _String_iterator ( )
  {
  }

 _String_iterator ( pointer _Parg, const _Container_base * _Pstring )
  : _Mybase ( _Parg, _Pstring )
  {
  }

  reference operator * ( ) const
  {
  return ( const_cast < reference > ( _Mybase :: operator * ( ) ) );
  }

  pointer operator -> ( ) const
  {
  return ( pointer_traits < pointer > :: pointer_to ( * * this ) );
  }

 _String_iterator & operator ++ ( )
  {
  ++ * ( _Mybase * ) this;
  return ( * this );
  }

 _String_iterator operator ++ ( int )
  {
  _String_iterator _Tmp = * this;
  ++ * this;
  return ( _Tmp );
  }

 _String_iterator & operator -- ( )
  {
  -- * ( _Mybase * ) this;
  return ( * this );
  }

 _String_iterator operator -- ( int )
  {
  _String_iterator _Tmp = * this;
  -- * this;
  return ( _Tmp );
  }

 _String_iterator & operator += ( const difference_type _Off )
  {
  * ( _Mybase * ) this += _Off;
  return ( * this );
  }

  _String_iterator operator + ( const difference_type _Off ) const
  {
  _String_iterator _Tmp = * this;
  return ( _Tmp += _Off );
  }

 _String_iterator & operator -= ( const difference_type _Off )
  {
  return ( * this += - _Off );
  }

  _String_iterator operator - ( const difference_type _Off ) const
  {
  _String_iterator _Tmp = * this;
  return ( _Tmp -= _Off );
  }

  difference_type operator - ( const _Mybase & _Right ) const
  {
  return ( * ( _Mybase * ) this - _Right );
  }

  reference operator [ ] ( const difference_type _Off ) const
  {
  return ( * ( * this + _Off ) );
  }

  pointer _Unwrapped ( ) const
  {
  return ( _Const_cast ( this -> _Ptr ) );
  }
 };
#line 1725 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Mystr >
  inline _String_iterator < _Mystr > operator + (
  typename _String_iterator < _Mystr > :: difference_type _Off,
  _String_iterator < _Mystr > _Next )
 {
 return ( _Next += _Off );
 }
#line 1734 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template< class _Value_type, class 
#line 1735 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
_Size_type, class 
#line 1736 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
_Difference_type, class 
#line 1737 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
_Pointer, class 
#line 1738 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
_Const_pointer, class 
#line 1739 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
_Reference, class 
#line 1740 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
_Const_reference> 
#line 1741 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
struct _String_iter_types { 
#line 1743 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using value_type = _Value_type; 
#line 1744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using size_type = _Size_type; 
#line 1745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using difference_type = _Difference_type; 
#line 1746 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using pointer = _Pointer; 
#line 1747 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using const_pointer = _Const_pointer; 
#line 1748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
}; 
#line 1750 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template< class _Ty, class 
#line 1751 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
_Alloc> 
#line 1752 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
struct _String_base_types { 
#line 1754 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using _Alty = _Rebind_alloc_t< _Alloc, _Ty> ; 
#line 1755 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using _Alty_traits = allocator_traits< _Alty> ; 
#line 1757 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using _Val_types = conditional_t< _Is_simple_alloc_v< _Alty> , _Simple_types< _Ty> , _String_iter_types< _Ty, typename allocator_traits< _Alty> ::size_type, typename allocator_traits< _Alty> ::difference_type, typename allocator_traits< _Alty> ::pointer, typename allocator_traits< _Alty> ::const_pointer, _Ty &, const _Ty &> > ; 
#line 1766 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
}; 
#line 1769 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Val_types >
 class _String_val
  : public _Container_base
 {
public :
 using value_type = typename _Val_types :: value_type;
 using size_type = typename _Val_types :: size_type;
 using difference_type = typename _Val_types :: difference_type;
 using pointer = typename _Val_types :: pointer;
 using const_pointer = typename _Val_types :: const_pointer;
 using reference = value_type &;
 using const_reference = const value_type &;

 _String_val ( )
  : _Bx ( ),
  _Mysize ( 0 ),
  _Myres ( 0 )
  {
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof ( value_type ) < 1 ? 1
   : 16 / sizeof ( value_type ) };
 enum
  {
  _ALLOC_MASK = sizeof ( value_type ) <= 1 ? 15
   : sizeof ( value_type ) <= 2 ? 7
   : sizeof ( value_type ) <= 4 ? 3
   : sizeof ( value_type ) <= 8 ? 1 : 0
  };

 value_type * _Myptr ( )
  {
  value_type * _Result = _Bx . _Buf;
  if ( _Large_string_engaged ( ) )
   {
   _Result = _Unfancy ( _Bx . _Ptr );
   }

  return ( _Result );
  }

 const value_type * _Myptr ( ) const
  {
  const value_type * _Result = _Bx . _Buf;
  if ( _Large_string_engaged ( ) )
   {
   _Result = _Unfancy ( _Bx . _Ptr );
   }

  return ( _Result );
  }

 bool _Large_string_engaged ( ) const
  {
  return ( _BUF_SIZE <= _Myres );
  }

 void _Check_offset ( const size_type _Off ) const
  {
  if ( _Mysize < _Off )
   {
   _Xran ( );
   }
  }

 void _Check_offset_exclusive ( const size_type _Off ) const
  {
  if ( _Mysize <= _Off )
   {
   _Xran ( );
   }
  }

 [ [ noreturn ] ] static void _Xran ( )
  {
  _Xout_of_range ( "invalid string position" );
  }

 size_type _Clamp_suffix_size ( const size_type _Off, const size_type _Size ) const noexcept
  {
  return ( _Min_value ( _Size, _Mysize - _Off ) );
  }

 union _Bxty
  {
  _Bxty ( )
   {
   }

  ~ _Bxty ( ) noexcept
   {
   }

  value_type _Buf [ _BUF_SIZE ];
  pointer _Ptr;
  char _Alias [ _BUF_SIZE ];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };
#line 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Alloc_types >
 class _String_alloc
 {
public :
 using _Alty = typename _Alloc_types :: _Alty;
 using _Alty_traits = typename _Alloc_types :: _Alty_traits;
 using _Alproxy = _Rebind_alloc_t < _Alty, _Container_proxy >;
 using _Alproxy_traits = allocator_traits < _Alproxy >;
 using _Val_types = typename _Alloc_types :: _Val_types;
 using _Mydata_t = _String_val < _Val_types >;
 using _Bxty = typename _Mydata_t :: _Bxty;

 using value_type = typename _Val_types :: value_type;
 using size_type = typename _Val_types :: size_type;
 using difference_type = typename _Val_types :: difference_type;
 using pointer = typename _Val_types :: pointer;
 using const_pointer = typename _Val_types :: const_pointer;
 using reference = value_type &;
 using const_reference = const value_type &;

 using iterator = _String_iterator < _Mydata_t >;
 using const_iterator = _String_const_iterator < _Mydata_t >;

 enum
  {
  _BUF_SIZE = _Mydata_t :: _BUF_SIZE
  };

 enum
  {
  _ALLOC_MASK = _Mydata_t :: _ALLOC_MASK
  };


 _String_alloc ( )
  : _Mypair ( _Zero_then_variadic_args_t ( ) )
  {
  }

 template < class _Any_alloc,
  class = enable_if_t < ! is_same_v < remove_cv_t < remove_reference_t < _Any_alloc >>, _String_alloc >> >
  _String_alloc ( _Any_alloc && _Al )
  : _Mypair ( _One_then_variadic_args_t ( ),
   :: std :: forward < _Any_alloc > ( _Al ) )
  {
  }

 void _Copy_alloc ( const _Alty & _Al )
  {
  _Pocca ( _Getal ( ), _Al );
  }

 void _Move_alloc ( _Alty & _Al )
  {
  _Pocma ( _Getal ( ), _Al );
  }



























































































 void _Orphan_all ( )
  {
  _Get_data ( ) . _Orphan_all ( );
  }

 void _Swap_all ( _String_alloc & _Right )
  {
  _Get_data ( ) . _Swap_all ( _Right . _Get_data ( ) );
  }

 _Alty & _Getal ( ) noexcept
  {
  return ( _Mypair . _Get_first ( ) );
  }

 const _Alty & _Getal ( ) const noexcept
  {
  return ( _Mypair . _Get_first ( ) );
  }

 _Mydata_t & _Get_data ( ) noexcept
  {
  return ( _Mypair . _Get_second ( ) );
  }

 const _Mydata_t & _Get_data ( ) const noexcept
  {
  return ( _Mypair . _Get_second ( ) );
  }

private :
 _Compressed_pair < _Alty, _Mydata_t > _Mypair;
 };
#line 2057 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template< class _Ty> constexpr size_t 
#line 2058 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
_Size_after_ebco_v = (is_empty_v< _Ty> ) ? 0 : sizeof(_Ty); 
#line 2061 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits = char_traits < _Elem >,
 class _Alloc = allocator < _Elem > >
 class basic_string
  : public _String_alloc < _String_base_types < _Elem, _Alloc >>
 {
public :
 static_assert ( ! 0 || is_same_v < _Elem, typename _Alloc :: value_type >,
  "basic_string<T, Traits, Allocator> requires that Allocator\'s value_type match T (See N4659 26.2.1 [container.requirements.gener" "al]/16 allocator_type) Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0 to suppress this diagnostic." "" );

 static_assert ( is_same_v < _Elem, typename _Traits :: char_type >,
  "N4659 24.3.2.1 [string.require]/3 requires that the supplied char_traits character type match the string\'s character type."
                                                                 );

 using _Mybase = _String_alloc < _String_base_types < _Elem, _Alloc >>;
 using traits_type = _Traits;
 using allocator_type = _Alloc;

 using _Alty = typename _Mybase :: _Alty;
 using _Alty_traits = typename _Mybase :: _Alty_traits;
 using _Mydata_t = typename _Mybase :: _Mydata_t;

 using value_type = typename _Mybase :: value_type;
 using size_type = typename _Mybase :: size_type;
 using difference_type = typename _Mybase :: difference_type;
 using pointer = typename _Mybase :: pointer;
 using const_pointer = typename _Mybase :: const_pointer;
 using reference = value_type &;
 using const_reference = const value_type &;

 using iterator = typename _Mybase :: iterator;
 using const_iterator = typename _Mybase :: const_iterator;

 using reverse_iterator = :: std :: reverse_iterator < iterator >;
 using const_reverse_iterator = :: std :: reverse_iterator < const_iterator >;











 using _Use_memcpy_move = bool_constant <
  _Is_specialization_v < _Traits, char_traits > && is_trivial_v < pointer >>;

 static constexpr size_t _Memcpy_move_offset = _Size_after_ebco_v < _Container_base >;
 static constexpr size_t _Memcpy_move_size = sizeof ( _Mydata_t ) - _Memcpy_move_offset;

 template < class _Iter >
  using _Is_elem_cptr = bool_constant < _Is_any_of_v < _Iter,
   const _Elem * const,
   _Elem * const,
   const _Elem *,
   _Elem * >>;









 basic_string ( const basic_string & _Right )
  : _Mybase ( _Alty_traits :: select_on_container_copy_construction ( _Right . _Getal ( ) ) )
  {
  _Construct_lv_contents ( _Right );
  }

 basic_string ( const basic_string & _Right, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Construct_lv_contents ( _Right );
  }

 basic_string ( ) noexcept ( is_nothrow_default_constructible_v < _Alty > )
  : _Mybase ( )
  {
  _Tidy_init ( );
  }

 explicit basic_string ( const _Alloc & _Al ) noexcept
  : _Mybase ( _Al )
  {
  _Tidy_init ( );
  }

 basic_string ( const basic_string & _Right, const size_type _Roff, const _Alloc & _Al = _Alloc ( ) )
  : _Mybase ( _Al )
  {
  _Tidy_init ( );
  assign ( _Right, _Roff, npos );
  }

 basic_string ( const basic_string & _Right, const size_type _Roff, const size_type _Count, const _Alloc & _Al = _Alloc ( ) )
  : _Mybase ( _Al )
  {
  _Tidy_init ( );
  assign ( _Right, _Roff, _Count );
  }

 basic_string ( const _Elem * const _Ptr, const size_type _Count )
  : _Mybase ( )
  {
  _Tidy_init ( );
  assign ( _Ptr, _Count );
  }

 basic_string ( const _Elem * const _Ptr, const size_type _Count,
  const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy_init ( );
  assign ( _Ptr, _Count );
  }

 basic_string ( const _Elem * const _Ptr )
  : _Mybase ( )
  {
  _Tidy_init ( );
  assign ( _Ptr );
  }





 basic_string ( const _Elem * const _Ptr, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy_init ( );
  assign ( _Ptr );
  }

 basic_string ( const size_type _Count, const _Elem _Ch )
  : _Mybase ( )
  {
  _Tidy_init ( );
  assign ( _Count, _Ch );
  }





 basic_string ( const size_type _Count, const _Elem _Ch, const _Alloc & _Al )
  : _Mybase ( _Al )
  {
  _Tidy_init ( );
  assign ( _Count, _Ch );
  }

 template < class _Iter,
  class = enable_if_t < _Is_iterator_v < _Iter >> >
  basic_string ( _Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc ( ) )
  : _Mybase ( _Al )
  {
  _Tidy_init ( );
  _Adl_verify_range ( _First, _Last );
  _Construct ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Iter_cat_t < _Iter > ( ) );
  }

 template < class _Iter >
  void _Construct ( _Iter _First, const _Iter _Last, input_iterator_tag )
  {
  try {
  for (; _First != _Last; ++ _First )
   {
   push_back ( static_cast < _Elem > ( * _First ) );
   }

  } catch ( ... ) {
  _Tidy_deallocate ( );
  throw;
  }
  }

 template < class _Iter >
  void _Construct ( const _Iter _First, const _Iter _Last, forward_iterator_tag )
  {
  const size_type _Count = _Convert_size < size_type > ( static_cast < size_t > ( :: std :: distance ( _First, _Last ) ) );
  reserve ( _Count );
  _Construct ( _First, _Last, input_iterator_tag ( ) );
  }

 void _Construct ( _Elem * const _First, _Elem * const _Last, random_access_iterator_tag )
  {
  if ( _First != _Last )
   {
   assign ( _First, _Convert_size < size_type > ( static_cast < size_t > ( _Last - _First ) ) );
   }
  }

 void _Construct ( const _Elem * const _First, const _Elem * const _Last, random_access_iterator_tag )
  {
  if ( _First != _Last )
   {
   assign ( _First, _Convert_size < size_type > ( static_cast < size_t > ( _Last - _First ) ) );
   }
  }

 basic_string ( basic_string && _Right ) noexcept
  : _Mybase ( :: std :: move ( _Right . _Getal ( ) ) )
  {
  _Assign_rv_contents_with_alloc_always_equal ( :: std :: move ( _Right ), _Use_memcpy_move { } );
  }

 basic_string ( basic_string && _Right, const _Alloc & _Al )
  noexcept ( _Alty_traits :: is_always_equal :: value )
  : _Mybase ( _Al )
  {
  _Assign_rv_contents ( :: std :: move ( _Right ), typename _Alty_traits :: is_always_equal { } );
  }






















 basic_string & operator = ( basic_string && _Right ) noexcept ( _Always_equal_after_move < _Alty > )
  {
  if ( this != :: std :: addressof ( _Right ) )
   {
   _Tidy_deallocate ( );
   this -> _Move_alloc ( _Right . _Getal ( ) );


   _Assign_rv_contents ( :: std :: move ( _Right ), bool_constant < _Always_equal_after_move < _Alty >> { } );
   }

  return ( * this );
  }

 basic_string & assign ( basic_string && _Right ) noexcept ( _Always_equal_after_move < _Alty > )
  {
  * this = :: std :: move ( _Right );
  return ( * this );
  }

 void _Assign_rv_contents ( basic_string && _Right, true_type ) noexcept
  {



  _Assign_rv_contents_with_alloc_always_equal ( :: std :: move ( _Right ), _Use_memcpy_move { } );
  }

 void _Assign_rv_contents ( basic_string && _Right, false_type )
  {



  if ( this -> _Getal ( ) == _Right . _Getal ( ) )
   {
   _Assign_rv_contents_with_alloc_always_equal ( :: std :: move ( _Right ), _Use_memcpy_move { } );
   }
  else
   {
   _Construct_lv_contents ( _Right );
   }
  }

 void _Assign_rv_contents_with_alloc_always_equal ( basic_string && _Right, true_type ) noexcept
  {



  auto & _Right_data = _Right . _Get_data ( );












  const auto _My_data_mem = reinterpret_cast < unsigned char * > ( :: std :: addressof ( this -> _Get_data ( ) ) )
   + _Memcpy_move_offset;
  const auto _Right_data_mem = reinterpret_cast < unsigned char * > ( :: std :: addressof ( _Right_data ) )
   + _Memcpy_move_offset;
  :: memcpy ( _My_data_mem, _Right_data_mem, _Memcpy_move_size );
  _Right . _Tidy_init ( );
  }

 void _Assign_rv_contents_with_alloc_always_equal ( basic_string && _Right, false_type ) noexcept
  {



  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  if ( _Right_data . _Large_string_engaged ( ) )
   {
   _Alty_traits :: construct ( this -> _Getal ( ), :: std :: addressof ( _My_data . _Bx . _Ptr ), _Right_data . _Bx . _Ptr );
   _Right_data . _Bx . _Ptr = pointer ( );
   this -> _Swap_all ( _Right );
   }
  else
   {
   _Traits :: copy ( _My_data . _Bx . _Buf, _Right_data . _Bx . _Buf, _Right_data . _Mysize + 1 );
   _Right . _Orphan_all ( );
   }

  _My_data . _Mysize = _Right_data . _Mysize;
  _My_data . _Myres = _Right_data . _Myres;
  _Right . _Tidy_init ( );
  }

 void _Construct_lv_contents ( const basic_string & _Right )
  {


  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  const size_type _Right_size = _Right_data . _Mysize;
  const _Elem * const _Right_ptr = _Right_data . _Myptr ( );
  if ( _Right_size < this -> _BUF_SIZE )
   {
   _Traits :: copy ( _My_data . _Bx . _Buf, _Right_ptr, this -> _BUF_SIZE );
   _My_data . _Mysize = _Right_size;
   _My_data . _Myres = this -> _BUF_SIZE - 1;
   return;
   }

  auto & _Al = this -> _Getal ( );
  const size_type _New_capacity = _Min_value ( _Right_size | this -> _ALLOC_MASK, max_size ( ) );
  const pointer _New_array = _Al . allocate ( _New_capacity + 1 );
  _Alty_traits :: construct ( _Al, :: std :: addressof ( _My_data . _Bx . _Ptr ), _New_array );
  _Traits :: copy ( _Unfancy ( _New_array ), _Right_ptr, _Right_size + 1 );
  _My_data . _Mysize = _Right_size;
  _My_data . _Myres = _New_capacity;
  }

 basic_string ( initializer_list < _Elem > _Ilist, const _Alloc & _Al = allocator_type ( ) )
  : _Mybase ( _Al )
  {
  _Tidy_init ( );
  assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
  }

 basic_string & operator = ( initializer_list < _Elem > _Ilist )
  {
  return ( assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) ) );
  }

 basic_string & operator += ( initializer_list < _Elem > _Ilist )
  {
  return ( append ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) ) );
  }

 basic_string & assign ( initializer_list < _Elem > _Ilist )
  {
  return ( assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) ) );
  }

 basic_string & append ( initializer_list < _Elem > _Ilist )
  {
  return ( append ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) ) );
  }

 iterator insert ( const const_iterator _Where, const initializer_list < _Elem > _Ilist )
  {
  const difference_type _Off = _Where - begin ( );
  insert ( static_cast < size_type > ( _Off ), _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
  return ( begin ( ) + _Off );
  }

 basic_string & replace ( const const_iterator _First, const const_iterator _Last, const initializer_list < _Elem > _Ilist )
  {
  return ( replace ( static_cast < size_type > ( _First - begin ( ) ), static_cast < size_type > ( _Last - _First ),
   _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) ) );
  }

 ~ basic_string ( ) noexcept
  {
  _Tidy_deallocate ( );
  }

 static constexpr auto npos { static_cast < size_type > ( - 1 ) };

 basic_string & operator = ( const basic_string & _Right )
  {
  if ( this != :: std :: addressof ( _Right ) )
   {
#pragma warning(push)
#pragma warning(disable: 4127)
   if ( _Alty_traits :: propagate_on_container_copy_assignment :: value
    && this -> _Getal ( ) != _Right . _Getal ( ) )
    {
    _Tidy_deallocate ( );
    }
#pragma warning(pop)

   this -> _Copy_alloc ( _Right . _Getal ( ) );

   auto & _Right_data = _Right . _Get_data ( );
   assign ( _Right_data . _Myptr ( ), _Right_data . _Mysize );
   }

  return ( * this );
  }










 basic_string & operator = ( const _Elem * const _Ptr )
  {
  return ( assign ( _Ptr ) );
  }

 basic_string & operator = ( const _Elem _Ch )
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Mysize = 1;
  _Elem * const _Ptr = _My_data . _Myptr ( );
  _Traits :: assign ( _Ptr [ 0 ], _Ch );
  _Traits :: assign ( _Ptr [ 1 ], _Elem ( ) );
  return ( * this );
  }

 basic_string & operator += ( const basic_string & _Right )
  {
  return ( append ( _Right ) );
  }










 basic_string & operator += ( const _Elem * const _Ptr )
  {
  return ( append ( _Ptr ) );
  }

 basic_string & operator += ( _Elem _Ch )
  {
  push_back ( _Ch );
  return ( * this );
  }

 basic_string & append ( const basic_string & _Right )
  {
  auto & _Right_data = _Right . _Get_data ( );
  return ( append ( _Right_data . _Myptr ( ), _Right_data . _Mysize ) );
  }

 basic_string & append ( const basic_string & _Right, const size_type _Roff, size_type _Count = npos )
  {
  auto & _Right_data = _Right . _Get_data ( );
  _Right_data . _Check_offset ( _Roff );
  _Count = _Right_data . _Clamp_suffix_size ( _Roff, _Count );
  return ( append ( _Right_data . _Myptr ( ) + _Roff, _Count ) );
  }



















 basic_string & append ( const _Elem * const _Ptr, const size_type _Count )
  {
  auto & _My_data = this -> _Get_data ( );
  const size_type _Old_size = _My_data . _Mysize;
  if ( _Count <= _My_data . _Myres - _Old_size )
   {
   _My_data . _Mysize = _Old_size + _Count;
   _Elem * const _Old_ptr = _My_data . _Myptr ( );
   _Traits :: move ( _Old_ptr + _Old_size, _Ptr, _Count );
   _Traits :: assign ( _Old_ptr [ _Old_size + _Count ], _Elem ( ) );
   return ( * this );
   }

  return ( _Reallocate_grow_by ( _Count,
   [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const _Elem * const _Ptr, const size_type _Count ) {
   _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
   _Traits :: copy ( _New_ptr + _Old_size, _Ptr, _Count );
   _Traits :: assign ( _New_ptr [ _Old_size + _Count ], _Elem ( ) );
   }, _Ptr, _Count ) );
  }

 basic_string & append ( const _Elem * const _Ptr )
  {
  return ( append ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) ) );
  }

 basic_string & append ( const size_type _Count, const _Elem _Ch )
  {
  auto & _My_data = this -> _Get_data ( );
  const size_type _Old_size = _My_data . _Mysize;
  if ( _Count <= _My_data . _Myres - _Old_size )
   {
   _My_data . _Mysize = _Old_size + _Count;
   _Elem * const _Old_ptr = _My_data . _Myptr ( );
   _Traits :: assign ( _Old_ptr + _Old_size, _Count, _Ch );
   _Traits :: assign ( _Old_ptr [ _Old_size + _Count ], _Elem ( ) );
   return ( * this );
   }

  return ( _Reallocate_grow_by ( _Count,
   [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const size_type _Count, const _Elem _Ch ) {
   _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
   _Traits :: assign ( _New_ptr + _Old_size, _Count, _Ch );
   _Traits :: assign ( _New_ptr [ _Old_size + _Count ], _Elem ( ) );
   }, _Count, _Ch ) );
  }

 template < class _Iter,
  class = enable_if_t < _Is_iterator_v < _Iter >> >
  basic_string & append ( const _Iter _First, const _Iter _Last )
  {
  return ( replace ( end ( ), end ( ), _First, _Last ) );
  }

 basic_string & assign ( const basic_string & _Right )
  {
  * this = _Right;
  return ( * this );
  }

 basic_string & assign ( const basic_string & _Right, const size_type _Roff, size_type _Count = npos )
  {
  auto & _Right_data = _Right . _Get_data ( );
  _Right_data . _Check_offset ( _Roff );
  _Count = _Right_data . _Clamp_suffix_size ( _Roff, _Count );
  return ( assign ( _Right_data . _Myptr ( ) + _Roff, _Count ) );
  }



















 basic_string & assign ( const _Elem * const _Ptr, const size_type _Count )
  {
  auto & _My_data = this -> _Get_data ( );
  if ( _Count <= _My_data . _Myres )
   {
   _Elem * const _Old_ptr = _My_data . _Myptr ( );
   _My_data . _Mysize = _Count;
   _Traits :: move ( _Old_ptr, _Ptr, _Count );
   _Traits :: assign ( _Old_ptr [ _Count ], _Elem ( ) );
   return ( * this );
   }

  return ( _Reallocate_for ( _Count, [ ] ( _Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr ) {
   _Traits :: copy ( _New_ptr, _Ptr, _Count );
   _Traits :: assign ( _New_ptr [ _Count ], _Elem ( ) );
   }, _Ptr ) );
  }

 basic_string & assign ( const _Elem * const _Ptr )
  {
  return ( assign ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) ) );
  }

 basic_string & assign ( const size_type _Count, const _Elem _Ch )
  {
  auto & _My_data = this -> _Get_data ( );
  if ( _Count <= _My_data . _Myres )
   {
   _Elem * const _Old_ptr = _My_data . _Myptr ( );
   _My_data . _Mysize = _Count;
   _Traits :: assign ( _Old_ptr, _Count, _Ch );
   _Traits :: assign ( _Old_ptr [ _Count ], _Elem ( ) );
   return ( * this );
   }

  return ( _Reallocate_for ( _Count, [ ] ( _Elem * const _New_ptr, const size_type _Count, const _Elem _Ch ) {
   _Traits :: assign ( _New_ptr, _Count, _Ch );
   _Traits :: assign ( _New_ptr [ _Count ], _Elem ( ) );
   }, _Ch ) );
  }

 template < class _Iter,
  class = enable_if_t < _Is_iterator_v < _Iter >> >
  basic_string & assign ( const _Iter _First, const _Iter _Last )
  {
  return ( replace ( begin ( ), end ( ), _First, _Last ) );
  }

 basic_string & insert ( const size_type _Off, const basic_string & _Right )
  {
  auto & _Right_data = _Right . _Get_data ( );
  return ( insert ( _Off, _Right_data . _Myptr ( ), _Right_data . _Mysize ) );
  }

 basic_string & insert ( const size_type _Off, const basic_string & _Right, const size_type _Roff, size_type _Count = npos )
  {
  auto & _Right_data = _Right . _Get_data ( );
  _Right_data . _Check_offset ( _Roff );
  _Count = _Right_data . _Clamp_suffix_size ( _Roff, _Count );
  return ( insert ( _Off, _Right_data . _Myptr ( ) + _Roff, _Count ) );
  }




















 basic_string & insert ( const size_type _Off, const _Elem * const _Ptr,
   const size_type _Count )
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  const size_type _Old_size = _My_data . _Mysize;
  if ( _Count <= _My_data . _Myres - _Old_size )
   {
   _My_data . _Mysize = _Old_size + _Count;
   _Elem * const _Old_ptr = _My_data . _Myptr ( );
   _Elem * const _Insert_at = _Old_ptr + _Off;


   size_type _Ptr_shifted_after;
   if ( _Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size )
    {
    _Ptr_shifted_after = _Count;
    }
   else if ( _Insert_at <= _Ptr )
    {
    _Ptr_shifted_after = 0;
    }
   else
    {
    _Ptr_shifted_after = static_cast < size_type > ( _Insert_at - _Ptr );
    }

   _Traits :: move ( _Insert_at + _Count, _Insert_at, _Old_size - _Off + 1 );
   _Traits :: copy ( _Insert_at, _Ptr, _Ptr_shifted_after );
   _Traits :: copy ( _Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after,
    _Count - _Ptr_shifted_after );
   return ( * this );
   }

  return ( _Reallocate_grow_by ( _Count,
   [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const size_type _Off, const _Elem * const _Ptr, const size_type _Count ) {
   _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
   _Traits :: copy ( _New_ptr + _Off, _Ptr, _Count );
   _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1 );
   }, _Off, _Ptr, _Count ) );
  }

 basic_string & insert ( const size_type _Off, const _Elem * const _Ptr )
  {
  return ( insert ( _Off, _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) ) );
  }

 basic_string & insert ( const size_type _Off, const size_type _Count, const _Elem _Ch )
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  const size_type _Old_size = _My_data . _Mysize;
  if ( _Count <= _My_data . _Myres - _Old_size )
   {
   _My_data . _Mysize = _Old_size + _Count;
   _Elem * const _Old_ptr = _My_data . _Myptr ( );
   _Elem * const _Insert_at = _Old_ptr + _Off;
   _Traits :: move ( _Insert_at + _Count, _Insert_at, _Old_size - _Off + 1 );
   _Traits :: assign ( _Insert_at, _Count, _Ch );
   return ( * this );
   }

  return ( _Reallocate_grow_by ( _Count,
   [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const size_type _Off, const size_type _Count, const _Elem _Ch ) {
   _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
   _Traits :: assign ( _New_ptr + _Off, _Count, _Ch );
   _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1 );
   }, _Off, _Count, _Ch ) );
  }

 iterator insert ( const const_iterator _Where, const _Elem _Ch )
  {
  const difference_type _Off = _Where - begin ( );
  insert ( static_cast < size_type > ( _Off ), 1, _Ch );
  return ( begin ( ) + _Off );
  }

 iterator insert ( const const_iterator _Where, const size_type _Count, const _Elem _Ch )
  {
  const difference_type _Off = _Where - begin ( );
  insert ( static_cast < size_type > ( _Off ), _Count, _Ch );
  return ( begin ( ) + _Off );
  }

 template < class _Iter,
  class = enable_if_t < _Is_iterator_v < _Iter >> >
  iterator insert ( const const_iterator _Where, const _Iter _First, const _Iter _Last )
  {
  const difference_type _Off = _Where - begin ( );
  replace ( _Where, _Where, _First, _Last );
  return ( begin ( ) + _Off );
  }

 basic_string & erase ( const size_type _Off = 0 )
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  _Eos ( _Off );
  return ( * this );
  }

 basic_string & erase ( const size_type _Off, size_type _Count )
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  _Count = _My_data . _Clamp_suffix_size ( _Off, _Count );
  const size_type _Old_size = _My_data . _Mysize;
  _Elem * const _My_ptr = _My_data . _Myptr ( );
  _Elem * const _Erase_at = _My_ptr + _Off;
  const size_type _New_size = _Old_size - _Count;
  _My_data . _Mysize = _New_size;
  _Traits :: move ( _Erase_at, _Erase_at + _Count, _New_size - _Off + 1 );
  return ( * this );
  }

 iterator erase ( const const_iterator _Where )
  {
  const difference_type _Off = _Where - begin ( );
  erase ( static_cast < size_type > ( _Off ), 1 );
  return ( begin ( ) + _Off );
  }

 iterator erase ( const const_iterator _First, const const_iterator _Last )
  {
  _Adl_verify_range ( _First, _Last );
  const difference_type _Off = _First - begin ( );
  erase ( static_cast < size_type > ( _Off ), static_cast < size_type > ( _Last - _First ) );
  return ( begin ( ) + _Off );
  }

 void clear ( ) noexcept
  {
  _Eos ( 0 );
  }

 basic_string & replace ( const size_type _Off, const size_type _N0, const basic_string & _Right )
  {
  auto & _Right_data = _Right . _Get_data ( );
  return ( replace ( _Off, _N0, _Right_data . _Myptr ( ), _Right_data . _Mysize ) );
  }

 basic_string & replace ( const size_type _Off, size_type _N0,
  const basic_string & _Right, const size_type _Roff, size_type _Count = npos )
  {
  auto & _Right_data = _Right . _Get_data ( );
  _Right_data . _Check_offset ( _Roff );
  _Count = _Right_data . _Clamp_suffix_size ( _Roff, _Count );
  return ( replace ( _Off, _N0, _Right_data . _Myptr ( ) + _Roff, _Count ) );
  }




















 basic_string & replace ( const size_type _Off, size_type _N0,
    const _Elem * const _Ptr, const size_type _Count )
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  _N0 = _My_data . _Clamp_suffix_size ( _Off, _N0 );
  if ( _N0 == _Count )
   {
   _Traits :: move ( _My_data . _Myptr ( ) + _Off, _Ptr, _Count );
   return ( * this );
   }

  const size_type _Old_size = _My_data . _Mysize;
  const size_type _Suffix_size = _Old_size - _N0 - _Off + 1;
  if ( _Count < _N0 )
   {
   _My_data . _Mysize = _Old_size - ( _N0 - _Count );
   _Elem * const _Old_ptr = _My_data . _Myptr ( );
   _Elem * const _Insert_at = _Old_ptr + _Off;
   _Traits :: move ( _Insert_at, _Ptr, _Count );
   _Traits :: move ( _Insert_at + _Count, _Insert_at + _N0, _Suffix_size );
   return ( * this );
   }

  const size_type _Growth = static_cast < size_type > ( _Count - _N0 );
  if ( _Growth <= _My_data . _Myres - _Old_size )
   {
   _My_data . _Mysize = _Old_size + _Growth;
   _Elem * const _Old_ptr = _My_data . _Myptr ( );
   _Elem * const _Insert_at = _Old_ptr + _Off;
   _Elem * const _Suffix_at = _Insert_at + _N0;

   size_type _Ptr_shifted_after;
   if ( _Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size )
    {
    _Ptr_shifted_after = _Count;
    }
   else if ( _Suffix_at <= _Ptr )
    {
    _Ptr_shifted_after = 0;
    }
   else
    {
    _Ptr_shifted_after = static_cast < size_type > ( _Suffix_at - _Ptr );
    }

   _Traits :: move ( _Suffix_at + _Growth, _Suffix_at, _Suffix_size );



   _Traits :: move ( _Insert_at, _Ptr, _Ptr_shifted_after );


   _Traits :: copy ( _Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after,
    _Count - _Ptr_shifted_after );
   return ( * this );
   }

  return ( _Reallocate_grow_by ( _Growth,
   [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const size_type _Off, const size_type _N0, const _Elem * const _Ptr, const size_type _Count ) {
   _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
   _Traits :: copy ( _New_ptr + _Off, _Ptr, _Count );
   _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1 );
   }, _Off, _N0, _Ptr, _Count ) );
  }

 basic_string & replace ( const size_type _Off, const size_type _N0, const _Elem * const _Ptr )
  {
  return ( replace ( _Off, _N0, _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) ) );
  }

 basic_string & replace ( const size_type _Off, size_type _N0, const size_type _Count, const _Elem _Ch )
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  _N0 = _My_data . _Clamp_suffix_size ( _Off, _N0 );
  if ( _Count == _N0 )
   {
   _Traits :: assign ( _My_data . _Myptr ( ) + _Off, _Count, _Ch );
   return ( * this );
   }

  const size_type _Old_size = _My_data . _Mysize;
  if ( _Count < _N0 || _Count - _N0 <= _My_data . _Myres - _Old_size )
   {
   _My_data . _Mysize = _Old_size + _Count - _N0;

   _Elem * const _Old_ptr = _My_data . _Myptr ( );
   _Elem * const _Insert_at = _Old_ptr + _Off;
   _Traits :: move ( _Insert_at + _Count, _Insert_at + _N0, _Old_size - _N0 - _Off + 1 );
   _Traits :: assign ( _Insert_at, _Count, _Ch );
   return ( * this );
   }

  return ( _Reallocate_grow_by ( _Count - _N0,
   [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const size_type _Off, const size_type _N0, const size_type _Count, const _Elem _Ch ) {
   _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
   _Traits :: assign ( _New_ptr + _Off, _Count, _Ch );
   _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1 );
   }, _Off, _N0, _Count, _Ch ) );
  }

 basic_string & replace ( const const_iterator _First, const const_iterator _Last, const basic_string & _Right )
  {
  return ( replace ( static_cast < size_type > ( _First - begin ( ) ), static_cast < size_type > ( _Last - _First ), _Right ) );
  }










 basic_string & replace ( const const_iterator _First, const const_iterator _Last,
    const _Elem * const _Ptr, const size_type _Count )
  {
  return ( replace ( static_cast < size_type > ( _First - begin ( ) ), static_cast < size_type > ( _Last - _First ), _Ptr, _Count ) );
  }

 basic_string & replace ( const const_iterator _First, const const_iterator _Last, const _Elem * const _Ptr )
  {
  return ( replace ( static_cast < size_type > ( _First - begin ( ) ), static_cast < size_type > ( _Last - _First ), _Ptr ) );
  }

 basic_string & replace ( const const_iterator _First, const const_iterator _Last,
  const size_type _Count, const _Elem _Ch )
  {
  return ( replace ( static_cast < size_type > ( _First - begin ( ) ), static_cast < size_type > ( _Last - _First ), _Count, _Ch ) );
  }

 template < class _Iter >
  basic_string & _Replace_range ( const const_iterator _First, const const_iterator _Last,
  const _Iter _First2, const _Iter _Last2, false_type )
  {
  const basic_string _Right ( _First2, _Last2, get_allocator ( ) );
  replace ( _First, _Last, _Right );
  return ( * this );
  }

 template < class _Ptr >
  basic_string & _Replace_range ( const const_iterator _First, const const_iterator _Last,
  const _Ptr _First2, const _Ptr _Last2, true_type )
  {
  return ( replace ( static_cast < size_type > ( _First - cbegin ( ) ), static_cast < size_type > ( _Last - _First ),
   _First2, static_cast < size_type > ( _Last2 - _First2 ) ) );
  }

 template < class _Iter,
  class = enable_if_t < _Is_iterator_v < _Iter >> >
  basic_string & replace ( const const_iterator _First, const const_iterator _Last,
   const _Iter _First2, const _Iter _Last2 )
  {
  _Adl_verify_range ( _First2, _Last2 );
  const auto _UFirst2 = _Get_unwrapped ( _First2 );
  const auto _ULast2 = _Get_unwrapped ( _Last2 );
  return ( _Replace_range ( _First, _Last, _UFirst2, _ULast2, _Is_elem_cptr < decltype ( _UFirst2 ) > ( ) ) );
  }

  iterator begin ( ) noexcept
  {
  auto _My_data = :: std :: addressof ( this -> _Get_data ( ) );
  return ( iterator ( _Refancy < pointer > ( _My_data -> _Myptr ( ) ), _My_data ) );
  }

  const_iterator begin ( ) const noexcept
  {
  auto _My_data = :: std :: addressof ( this -> _Get_data ( ) );
  return ( const_iterator ( _Refancy < const_pointer > ( _My_data -> _Myptr ( ) ), _My_data ) );
  }

  iterator end ( ) noexcept
  {
  auto _My_data = :: std :: addressof ( this -> _Get_data ( ) );
  return ( iterator ( _Refancy < pointer > ( _My_data -> _Myptr ( ) )
   + static_cast < difference_type > ( _My_data -> _Mysize ), _My_data ) );
  }

  const_iterator end ( ) const noexcept
  {
  auto _My_data = :: std :: addressof ( this -> _Get_data ( ) );
  return ( const_iterator ( _Refancy < const_pointer > ( _My_data -> _Myptr ( ) )
   + static_cast < difference_type > ( _My_data -> _Mysize ), _My_data ) );
  }

 _Elem * _Unchecked_begin ( ) noexcept
  {
  return ( this -> _Get_data ( ) . _Myptr ( ) );
  }

 const _Elem * _Unchecked_begin ( ) const noexcept
  {
  return ( this -> _Get_data ( ) . _Myptr ( ) );
  }

 _Elem * _Unchecked_end ( ) noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( _My_data . _Myptr ( ) + _My_data . _Mysize );
  }

 const _Elem * _Unchecked_end ( ) const noexcept
  {
  const auto & _My_data = this -> _Get_data ( );
  return ( _My_data . _Myptr ( ) + _My_data . _Mysize );
  }

  reverse_iterator rbegin ( ) noexcept
  {
  return ( reverse_iterator ( end ( ) ) );
  }

  const_reverse_iterator rbegin ( ) const noexcept
  {
  return ( const_reverse_iterator ( end ( ) ) );
  }

  reverse_iterator rend ( ) noexcept
  {
  return ( reverse_iterator ( begin ( ) ) );
  }

  const_reverse_iterator rend ( ) const noexcept
  {
  return ( const_reverse_iterator ( begin ( ) ) );
  }

  const_iterator cbegin ( ) const noexcept
  {
  return ( begin ( ) );
  }

  const_iterator cend ( ) const noexcept
  {
  return ( end ( ) );
  }

  const_reverse_iterator crbegin ( ) const noexcept
  {
  return ( rbegin ( ) );
  }

  const_reverse_iterator crend ( ) const noexcept
  {
  return ( rend ( ) );
  }

 void shrink_to_fit ( )
  {
  auto & _My_data = this -> _Get_data ( );
  if ( ! _My_data . _Large_string_engaged ( ) )
   {
   return;
   }

  if ( _My_data . _Mysize < this -> _BUF_SIZE )
   {
   _Become_small ( );
   return;
   }

  const size_type _Target_capacity = _Min_value ( _My_data . _Mysize | this -> _ALLOC_MASK, max_size ( ) );
  if ( _Target_capacity < _My_data . _Myres )
   {
   auto & _Al = this -> _Getal ( );
   const pointer _New_ptr = _Al . allocate ( _Target_capacity + 1 );
   this -> _Orphan_all ( );
   _Traits :: copy ( _Unfancy ( _New_ptr ), _Unfancy ( _My_data . _Bx . _Ptr ), _My_data . _Mysize + 1 );
   _Al . deallocate ( _My_data . _Bx . _Ptr, _My_data . _Myres + 1 );
   _My_data . _Bx . _Ptr = _New_ptr;
   _My_data . _Myres = _Target_capacity;
   }
  }

  reference at ( const size_type _Off )
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset_exclusive ( _Off );
  return ( _My_data . _Myptr ( ) [ _Off ] );
  }

  const_reference at ( const size_type _Off ) const
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset_exclusive ( _Off );
  return ( _My_data . _Myptr ( ) [ _Off ] );
  }

  reference operator [ ] ( const size_type _Off )
  {
  auto & _My_data = this -> _Get_data ( );



  return ( _My_data . _Myptr ( ) [ _Off ] );
  }

  const_reference operator [ ] ( const size_type _Off ) const
  {
  auto & _My_data = this -> _Get_data ( );



  return ( _My_data . _Myptr ( ) [ _Off ] );
  }









 void push_back ( const _Elem _Ch )
  {
  auto & _My_data = this -> _Get_data ( );
  const size_type _Old_size = _My_data . _Mysize;
  if ( _Old_size < _My_data . _Myres )
   {
   _My_data . _Mysize = _Old_size + 1;
   _Elem * const _Ptr = _My_data . _Myptr ( );
   _Traits :: assign ( _Ptr [ _Old_size ], _Ch );
   _Traits :: assign ( _Ptr [ _Old_size + 1 ], _Elem ( ) );
   return;
   }

  _Reallocate_grow_by ( 1,
   [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
    const _Elem _Ch ) {
   _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
   _Traits :: assign ( _New_ptr [ _Old_size ], _Ch );
   _Traits :: assign ( _New_ptr [ _Old_size + 1 ], _Elem ( ) );
   }, _Ch );
  }

 void pop_back ( )
  {
  auto & _My_data = this -> _Get_data ( );
  const size_type _Old_size = _My_data . _Mysize;



  _Eos ( _Old_size - 1 );
  }

  reference front ( )
  {
  return ( * begin ( ) );
  }

  const_reference front ( ) const
  {
  return ( * begin ( ) );
  }

  reference back ( )
  {
  return ( * ( end ( ) - 1 ) );
  }

  const_reference back ( ) const
  {
  return ( * ( end ( ) - 1 ) );
  }

    const _Elem * c_str ( ) const noexcept
  {
  return ( this -> _Get_data ( ) . _Myptr ( ) );
  }

    const _Elem * data ( ) const noexcept
  {
  return ( this -> _Get_data ( ) . _Myptr ( ) );
  }








  size_type length ( ) const noexcept
  {
  return ( this -> _Get_data ( ) . _Mysize );
  }

  size_type size ( ) const noexcept
  {
  return ( this -> _Get_data ( ) . _Mysize );
  }

  size_type max_size ( ) const noexcept
  {
  const size_type _Alloc_max = _Alty_traits :: max_size ( this -> _Getal ( ) );
  const size_type _Storage_max =
   _Max_value ( _Alloc_max, static_cast < size_type > ( this -> _BUF_SIZE ) );
  return ( _Min_value (
   static_cast < size_type > ( ( numeric_limits < difference_type > :: max ) ( ) ),
   _Storage_max - 1
   ) );

  }

 void resize ( const size_type _Newsize, const _Elem _Ch = _Elem ( ) )
  {
  const size_type _Old_size = size ( );
  if ( _Newsize <= _Old_size )
   {
   _Eos ( _Newsize );
   }
  else
   {
   append ( _Newsize - _Old_size, _Ch );
   }
  }

  size_type capacity ( ) const noexcept
  {
  return ( this -> _Get_data ( ) . _Myres );
  }

 void reserve ( const size_type _Newcap = 0 )
  {
  auto & _My_data = this -> _Get_data ( );
  if ( _My_data . _Mysize > _Newcap )
   {
   return;
   }

  if ( _My_data . _Myres == _Newcap )
   {
   return;
   }

  if ( _My_data . _Myres < _Newcap )
   {
   const size_type _Old_size = _My_data . _Mysize;
   _Reallocate_grow_by ( _Newcap - _Old_size,
    [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size ) {
    _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size + 1 );
    } );

   _My_data . _Mysize = _Old_size;
   return;
   }

  if ( this -> _BUF_SIZE > _Newcap && _My_data . _Large_string_engaged ( ) )
   {
   _Become_small ( );
   return;
   }


  }

  bool empty ( ) const noexcept
  {
  return ( size ( ) == 0 );
  }

 size_type copy ( _Elem * const _Ptr,
  size_type _Count, const size_type _Off = 0 ) const
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  _Count = _My_data . _Clamp_suffix_size ( _Off, _Count );
  _Traits :: copy ( _Ptr, _My_data . _Myptr ( ) + _Off, _Count );
  return ( _Count );
  }

   size_type _Copy_s (
    _Elem * const _Dest, const size_type _Dest_size,
  size_type _Count, const size_type _Off = 0 ) const
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  _Count = _My_data . _Clamp_suffix_size ( _Off, _Count );
  _Traits :: _Copy_s ( _Dest, _Dest_size, _My_data . _Myptr ( ) + _Off, _Count );
  return ( _Count );
  }

 void _Swap_data ( basic_string & _Right, true_type )
  {
  const auto _My_data_mem = reinterpret_cast < unsigned char * > ( :: std :: addressof ( this -> _Get_data ( ) ) )
   + _Memcpy_move_offset;
  const auto _Right_data_mem = reinterpret_cast < unsigned char * > ( :: std :: addressof ( _Right . _Get_data ( ) ) )
   + _Memcpy_move_offset;
  unsigned char _Temp_mem [ _Memcpy_move_size ];
  :: memcpy ( _Temp_mem, _My_data_mem, _Memcpy_move_size );
  :: memcpy ( _My_data_mem, _Right_data_mem, _Memcpy_move_size );
  :: memcpy ( _Right_data_mem, _Temp_mem, _Memcpy_move_size );
  }

 void _Swap_bx_large_with_small ( _Mydata_t & _Starts_large, _Mydata_t & _Starts_small )
  {
  const pointer _Ptr = _Starts_large . _Bx . _Ptr;
  auto & _Al = this -> _Getal ( );
  _Alty_traits :: destroy ( _Al, :: std :: addressof ( _Starts_large . _Bx . _Ptr ) );
  _Traits :: copy ( _Starts_large . _Bx . _Buf, _Starts_small . _Bx . _Buf, this -> _BUF_SIZE );
  _Alty_traits :: construct ( _Al, :: std :: addressof ( _Starts_small . _Bx . _Ptr ), _Ptr );
  }

 void _Swap_data ( basic_string & _Right, false_type )
  {
  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  const bool _My_large = _My_data . _Large_string_engaged ( );
  const bool _Right_large = _Right_data . _Large_string_engaged ( );
  if ( _My_large )
   {
   if ( _Right_large )
    {
    _Swap_adl ( _My_data . _Bx . _Ptr, _Right_data . _Bx . _Ptr );
    }
   else
    {
    _Swap_bx_large_with_small ( _My_data, _Right_data );
    }
   }
  else
   {
   if ( _Right_large )
    {
    _Swap_bx_large_with_small ( _Right_data, _My_data );
    }
   else
    {
    _Elem _Temp_buf [ this -> _BUF_SIZE ];
    _Traits :: copy ( _Temp_buf, _My_data . _Bx . _Buf, this -> _BUF_SIZE );
    _Traits :: copy ( _My_data . _Bx . _Buf, _Right_data . _Bx . _Buf, this -> _BUF_SIZE );
    _Traits :: copy ( _Right_data . _Bx . _Buf, _Temp_buf, this -> _BUF_SIZE );
    }
   }

  :: std :: swap ( _My_data . _Mysize, _Right_data . _Mysize );
  :: std :: swap ( _My_data . _Myres, _Right_data . _Myres );
  }

 void swap ( basic_string & _Right ) noexcept
  {
  if ( this != :: std :: addressof ( _Right ) )
   {
   _Pocs ( this -> _Getal ( ), _Right . _Getal ( ) );





















   }

  _Swap_data ( _Right, _Use_memcpy_move { } );
  }













  size_type find ( const basic_string & _Right, const size_type _Off = 0 ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off,
    _Right_data . _Myptr ( ), _Right_data . _Mysize ) ) );
  }

  size_type find ( const _Elem * const _Ptr, const size_type _Off, const size_type _Count )
  const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr, _Count ) ) );
  }

  size_type find ( const _Elem * const _Ptr, const size_type _Off = 0 ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) ) );
  }

  size_type find ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find_ch < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ch ) ) );
  }













  size_type rfind ( const basic_string & _Right, const size_type _Off = npos ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_rfind < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off,
    _Right_data . _Myptr ( ), _Right_data . _Mysize ) ) );
  }

  size_type rfind ( const _Elem * const _Ptr, const size_type _Off,
  const size_type _Count ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_rfind < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr, _Count ) ) );
  }

  size_type rfind ( const _Elem * const _Ptr, const size_type _Off = npos )
  const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_rfind < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) ) );
  }

  size_type rfind ( const _Elem _Ch, const size_type _Off = npos ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_rfind_ch < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ch ) ) );
  }













  size_type find_first_of ( const basic_string & _Right, const size_type _Off = 0 ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  return ( static_cast < size_type > ( _Traits_find_first_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off,
   _Right_data . _Myptr ( ), _Right_data . _Mysize, _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_first_of ( const _Elem * const _Ptr, const size_type _Off,
  const size_type _Count ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find_first_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr, _Count,
    _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_first_of ( const _Elem * const _Ptr, const size_type _Off = 0 )
  const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find_first_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ),
    _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_first_of ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find_ch < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ch ) ) );
  }













  size_type find_last_of ( const basic_string & _Right, size_type _Off = npos ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  return ( static_cast < size_type > ( _Traits_find_last_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off,
   _Right_data . _Myptr ( ), _Right_data . _Mysize, _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_last_of ( const _Elem * const _Ptr, const size_type _Off,
  const size_type _Count ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find_last_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr, _Count,
    _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_last_of ( const _Elem * const _Ptr, const size_type _Off = npos )
  const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find_last_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ),
    _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_last_of ( const _Elem _Ch, const size_type _Off = npos ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > ( _Traits_rfind_ch < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ch ) ) );
  }













  size_type find_first_not_of ( const basic_string & _Right, const size_type _Off = 0 ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  return ( static_cast < size_type > ( _Traits_find_first_not_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off,
   _Right_data . _Myptr ( ), _Right_data . _Mysize, _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_first_not_of ( const _Elem * const _Ptr, const size_type _Off,
  const size_type _Count ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find_first_not_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr, _Count,
    _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_first_not_of ( const _Elem * const _Ptr, size_type _Off = 0 ) const
  noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find_first_not_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr,
    _Traits :: length ( _Ptr ), _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_first_not_of ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > ( _Traits_find_not_ch < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ch ) ) );
  }













  size_type find_last_not_of ( const basic_string & _Right, const size_type _Off = npos ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  return ( static_cast < size_type > ( _Traits_find_last_not_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off,
   _Right_data . _Myptr ( ), _Right_data . _Mysize, _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_last_not_of ( const _Elem * const _Ptr, const size_type _Off,
  const size_type _Count ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_find_last_not_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ptr, _Count,
    _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_last_not_of ( const _Elem * const _Ptr, const size_type _Off = npos ) const
  noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > ( _Traits_find_last_not_of < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off,
   _Ptr, _Traits :: length ( _Ptr ), _Is_specialization < _Traits, char_traits > { } ) ) );
  }

  size_type find_last_not_of ( const _Elem _Ch, const size_type _Off = npos ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( static_cast < size_type > (
   _Traits_rfind_not_ch < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Off, _Ch ) ) );
  }








  basic_string substr ( const size_type _Off = 0, const size_type _Count = npos ) const
  {
  return ( basic_string ( * this, _Off, _Count, get_allocator ( ) ) );
  }

 bool _Equal ( const basic_string & _Right ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  return ( _Traits_equal < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Right_data . _Myptr ( ), _Right_data . _Mysize ) );
  }

 bool _Equal ( const _Elem * const _Ptr ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( _Traits_equal < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize, _Ptr, _Traits :: length ( _Ptr ) ) );
  }





































  int compare ( const basic_string & _Right ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  return ( _Traits_compare < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize,
   _Right_data . _Myptr ( ), _Right_data . _Mysize ) );
  }

  int compare ( size_type _Off, size_type _N0, const basic_string & _Right ) const
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  auto & _Right_data = _Right . _Get_data ( );
  return ( _Traits_compare < _Traits > ( _My_data . _Myptr ( ) + _Off, _My_data . _Clamp_suffix_size ( _Off, _N0 ),
   _Right_data . _Myptr ( ), _Right_data . _Mysize ) );
  }

  int compare ( const size_type _Off, const size_type _N0, const basic_string & _Right,
  const size_type _Roff, const size_type _Count = npos ) const
  {
  auto & _My_data = this -> _Get_data ( );
  auto & _Right_data = _Right . _Get_data ( );
  _My_data . _Check_offset ( _Off );
  _Right_data . _Check_offset ( _Roff );
  return ( _Traits_compare < _Traits > ( _My_data . _Myptr ( ) + _Off, _My_data . _Clamp_suffix_size ( _Off, _N0 ),
   _Right_data . _Myptr ( ) + _Roff, _Right_data . _Clamp_suffix_size ( _Roff, _Count ) ) );
  }

  int compare ( const _Elem * const _Ptr ) const noexcept
  {
  auto & _My_data = this -> _Get_data ( );
  return ( _Traits_compare < _Traits > ( _My_data . _Myptr ( ), _My_data . _Mysize,
   _Ptr, _Traits :: length ( _Ptr ) ) );
  }

  int compare ( const size_type _Off, const size_type _N0, const _Elem * const _Ptr ) const
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  return ( _Traits_compare < _Traits > ( _My_data . _Myptr ( ) + _Off, _My_data . _Clamp_suffix_size ( _Off, _N0 ),
   _Ptr, _Traits :: length ( _Ptr ) ) );
  }

  int compare ( const size_type _Off, const size_type _N0, const _Elem * const _Ptr,
  const size_type _Count ) const
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Check_offset ( _Off );
  return ( _Traits_compare < _Traits > ( _My_data . _Myptr ( ) + _Off, _My_data . _Clamp_suffix_size ( _Off, _N0 ),
   _Ptr, _Count ) );
  }

  allocator_type get_allocator ( ) const noexcept
  {
  return ( static_cast < allocator_type > ( this -> _Getal ( ) ) );
  }

 size_type _Calculate_growth ( const size_type _Requested ) const
  {
  const size_type _Max = max_size ( );
  auto & _My_data = this -> _Get_data ( );
  const size_type _Masked = _Requested | this -> _ALLOC_MASK;
  if ( _Masked > _Max )
   {
   return ( _Max );
   }

  const size_type _Old = _My_data . _Myres;
  if ( _Old > _Max - _Old / 2 )
   {
   return ( _Max );
   }

  return ( _Max_value ( _Masked, _Old + _Old / 2 ) );
  }

 template < class _Fty,
  class ... _ArgTys >
  basic_string & _Reallocate_for ( const size_type _New_size, _Fty _Fn, _ArgTys ... _Args )
  {

  if ( _New_size > max_size ( ) )
   {
   _Xlen ( );
   }

  auto & _My_data = this -> _Get_data ( );
  const size_type _Old_capacity = _My_data . _Myres;
  const size_type _New_capacity = _Calculate_growth ( _New_size );
  auto & _Al = this -> _Getal ( );
  const pointer _New_ptr = _Al . allocate ( _New_capacity + 1 );
  _My_data . _Orphan_all ( );
  _My_data . _Mysize = _New_size;
  _My_data . _Myres = _New_capacity;
  _Fn ( _Unfancy ( _New_ptr ), _New_size, _Args ... );
  if ( this -> _BUF_SIZE <= _Old_capacity )
   {
   _Al . deallocate ( _My_data . _Bx . _Ptr, _Old_capacity + 1 );
   _My_data . _Bx . _Ptr = _New_ptr;
   }
  else
   {
   _Alty_traits :: construct ( _Al, :: std :: addressof ( _My_data . _Bx . _Ptr ), _New_ptr );
   }

  return ( * this );
  }

 template < class _Fty,
  class ... _ArgTys >
  basic_string & _Reallocate_grow_by ( const size_type _Size_increase, _Fty _Fn, _ArgTys ... _Args )
  {

  auto & _My_data = this -> _Get_data ( );
  const size_type _Old_size = _My_data . _Mysize;
  if ( max_size ( ) - _Old_size < _Size_increase )
   {
   _Xlen ( );
   }

  const size_type _New_size = _Old_size + _Size_increase;
  const size_type _Old_capacity = _My_data . _Myres;
  const size_type _New_capacity = _Calculate_growth ( _New_size );
  auto & _Al = this -> _Getal ( );
  const pointer _New_ptr = _Al . allocate ( _New_capacity + 1 );
  _My_data . _Orphan_all ( );
  _My_data . _Mysize = _New_size;
  _My_data . _Myres = _New_capacity;
  _Elem * const _Raw_new = _Unfancy ( _New_ptr );
  if ( this -> _BUF_SIZE <= _Old_capacity )
   {
   const pointer _Old_ptr = _My_data . _Bx . _Ptr;
   _Fn ( _Raw_new, _Unfancy ( _Old_ptr ), _Old_size, _Args ... );
   _Al . deallocate ( _Old_ptr, _Old_capacity + 1 );
   _My_data . _Bx . _Ptr = _New_ptr;
   }
  else
   {
   _Fn ( _Raw_new, _My_data . _Bx . _Buf, _Old_size, _Args ... );
   _Alty_traits :: construct ( _Al, :: std :: addressof ( _My_data . _Bx . _Ptr ), _New_ptr );
   }

  return ( * this );
  }

 void _Become_small ( )
  {


  auto & _My_data = this -> _Get_data ( );
  _My_data . _Orphan_all ( );
  const pointer _Ptr = _My_data . _Bx . _Ptr;
  auto & _Al = this -> _Getal ( );
  _Alty_traits :: destroy ( _Al, :: std :: addressof ( _My_data . _Bx . _Ptr ) );
  _Traits :: copy ( _My_data . _Bx . _Buf, _Unfancy ( _Ptr ), _My_data . _Mysize + 1 );
  _Al . deallocate ( _Ptr, _My_data . _Myres + 1 );
  _My_data . _Myres = this -> _BUF_SIZE - 1;
  }

 void _Eos ( const size_type _Newsize )
  {
  auto & _My_data = this -> _Get_data ( );
  _Traits :: assign ( _My_data . _Myptr ( ) [ _My_data . _Mysize = _Newsize ], _Elem ( ) );
  }

 void _Tidy_init ( )
  {
  auto & _My_data = this -> _Get_data ( );
  _My_data . _Mysize = 0;
  _My_data . _Myres = this -> _BUF_SIZE - 1;


  _Traits :: assign ( _My_data . _Bx . _Buf [ 0 ], _Elem ( ) );
  }

 void _Tidy_deallocate ( )
  {
  this -> _Orphan_all ( );
  auto & _My_data = this -> _Get_data ( );
  if ( _My_data . _Large_string_engaged ( ) )
   {
   const pointer _Ptr = _My_data . _Bx . _Ptr;
   auto & _Al = this -> _Getal ( );
   _Alty_traits :: destroy ( _Al, :: std :: addressof ( _My_data . _Bx . _Ptr ) );
   _Al . deallocate ( _Ptr, _My_data . _Myres + 1 );
   }

  _My_data . _Mysize = 0;
  _My_data . _Myres = this -> _BUF_SIZE - 1;


  _Traits :: assign ( _My_data . _Bx . _Buf [ 0 ], _Elem ( ) );
  }

 [ [ noreturn ] ] static void _Xlen ( )
  {
  _Xlength_error ( "string too long" );
  }
 };
#line 4034 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc > inline
 void swap ( basic_string < _Elem, _Traits, _Alloc > & _Left,
  basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 _Left . swap ( _Right );
 }
#line 4043 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 4057 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const _Elem * const _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 using _String_type = basic_string < _Elem, _Traits, _Alloc >;
 using _Size_type = typename _String_type :: size_type;
 _String_type _Ans;
 _Ans . reserve ( _Convert_size < _Size_type > ( _Traits :: length ( _Left ) + _Right . size ( ) ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 4073 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( 1 + _Right . size ( ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 4087 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
    const _Elem * const _Right )
 {
 using _String_type = basic_string < _Elem, _Traits, _Alloc >;
 using _Size_type = typename _String_type :: size_type;
 _String_type _Ans;
 _Ans . reserve ( _Convert_size < _Size_type > ( _Left . size ( ) + _Traits :: length ( _Right ) ) );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 4103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const _Elem _Right )
 {
 basic_string < _Elem, _Traits, _Alloc > _Ans;
 _Ans . reserve ( _Left . size ( ) + 1 );
 _Ans += _Left;
 _Ans += _Right;
 return ( _Ans );
 }
#line 4117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 4127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( :: std :: move ( _Left . append ( _Right ) ) );
 }
#line 4137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 if ( _Right . size ( ) <= _Left . capacity ( ) - _Left . size ( )
  || _Right . capacity ( ) - _Right . size ( ) < _Left . size ( ) )
  return ( :: std :: move ( _Left . append ( _Right ) ) );
 else
  return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 4151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const _Elem * const _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 return ( :: std :: move ( _Right . insert ( 0, _Left ) ) );
 }
#line 4161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
  const _Elem _Left,
  basic_string < _Elem, _Traits, _Alloc > && _Right )
 {
 using size_type = typename allocator_traits < _Alloc > :: size_type;
 return ( :: std :: move ( _Right . insert ( static_cast < size_type > ( 0 ), static_cast < size_type > ( 1 ), _Left ) ) );
 }
#line 4172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
    const _Elem * const _Right )
 {
 return ( :: std :: move ( _Left . append ( _Right ) ) );
 }
#line 4182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline basic_string < _Elem, _Traits, _Alloc > operator + (
  basic_string < _Elem, _Traits, _Alloc > && _Left,
  const _Elem _Right )
 {
 _Left . push_back ( _Right );
 return ( :: std :: move ( _Left ) );
 }
#line 4193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator == (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Left . _Equal ( _Right ) );
 }
#line 4203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator == (
    const _Elem * const _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right . _Equal ( _Left ) );
 }
#line 4213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator == (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
    const _Elem * const _Right )
 {
 return ( _Left . _Equal ( _Right ) );
 }
#line 4223 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator != (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Left == _Right ) );
 }
#line 4233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator != (
    const _Elem * const _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 4243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator != (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
    const _Elem * const _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 4253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator < (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Left . compare ( _Right ) < 0 );
 }
#line 4263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator < (
    const _Elem * const _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right . compare ( _Left ) > 0 );
 }
#line 4273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator < (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
    const _Elem * const _Right )
 {
 return ( _Left . compare ( _Right ) < 0 );
 }
#line 4283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator > (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( _Right < _Left );
 }
#line 4293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator > (
    const _Elem * const _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( _Right < _Left );
 }
#line 4303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator > (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
    const _Elem * const _Right )
 {
 return ( _Right < _Left );
 }
#line 4313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator <= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Right < _Left ) );
 }
#line 4323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator <= (
    const _Elem * const _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 4333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator <= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
    const _Elem * const _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 4343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator >= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
 return ( ! ( _Left < _Right ) );
 }
#line 4353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator >= (
    const _Elem * const _Left,
  const basic_string < _Elem, _Traits, _Alloc > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 4363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
  inline bool operator >= (
  const basic_string < _Elem, _Traits, _Alloc > & _Left,
    const _Elem * const _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 4373 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using string = basic_string< char, char_traits< char> , allocator< char> > ; 
#line 4374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using wstring = basic_string< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 4375 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using u16string = basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > ; 
#line 4376 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
using u32string = basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > ; 
#line 4379 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
template < class _Elem,
 class _Traits,
 class _Alloc >
 struct hash < basic_string < _Elem, _Traits, _Alloc > >
 {
  typedef basic_string < _Elem, _Traits, _Alloc > argument_type;
  typedef size_t result_type;

  size_t operator ( ) ( const basic_string < _Elem, _Traits, _Alloc > & _Keyval ) const noexcept
  {
  return ( _Hash_array_representation ( _Keyval . c_str ( ), _Keyval . size ( ) ) );
  }
 };
#line 4392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
}
#line 4396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
#pragma warning(pop)
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
namespace std { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
class logic_error : public exception { 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
public: typedef exception _Mybase; 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit logic_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit logic_error(const char *_Message) : _Mybase(_Message) 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
}; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
class domain_error : public logic_error { 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit domain_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit domain_error(const char *_Message) : _Mybase(_Message) 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
}; 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
class invalid_argument : public logic_error { 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit invalid_argument(const string &_Message) : _Mybase(_Message.c_str()) 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit invalid_argument(const char *_Message) : _Mybase(_Message) 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
}; 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
class length_error : public logic_error { 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit length_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit length_error(const char *_Message) : _Mybase(_Message) 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
}; 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
class out_of_range : public logic_error { 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
public: typedef logic_error _Mybase; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit out_of_range(const string &_Message) : _Mybase(_Message.c_str()) 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit out_of_range(const char *_Message) : _Mybase(_Message) 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
}; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
class runtime_error : public exception { 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
public: typedef exception _Mybase; 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit runtime_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit runtime_error(const char *_Message) : _Mybase(_Message) 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
}; 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
class overflow_error : public runtime_error { 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
public: typedef runtime_error _Mybase; 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit overflow_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit overflow_error(const char *_Message) : _Mybase(_Message) 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
}; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
class underflow_error : public runtime_error { 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
public: typedef runtime_error _Mybase; 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit underflow_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit underflow_error(const char *_Message) : _Mybase(_Message) 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
}; 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
class range_error : public runtime_error { 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
public: typedef runtime_error _Mybase; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit range_error(const string &_Message) : _Mybase(_Message.c_str()) 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
explicit range_error(const char *_Message) : _Mybase(_Message) 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
{ 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
} 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
}; 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
}
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
#pragma warning(pop)
#pragma pack ( pop )
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"
#pragma warning(disable: 4275)
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
#pragma pack ( push, 8 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
struct __type_info_node; 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
extern __type_info_node __type_info_root_node; 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
struct __std_type_info_data { 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
const char *_UndecoratedName; 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
const char _DecoratedName[1]; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
__std_type_info_data() = delete;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
__std_type_info_data(const __std_type_info_data &) = delete;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
__std_type_info_data(__std_type_info_data &&) = delete;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
__std_type_info_data &operator=(const __std_type_info_data &) = delete;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
__std_type_info_data &operator=(__std_type_info_data &&) = delete;
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
}; 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
int __cdecl __std_type_info_compare(const __std_type_info_data * _Lhs, const __std_type_info_data * _Rhs); 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
size_t __cdecl __std_type_info_hash(const __std_type_info_data * _Data); 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
const char *__cdecl __std_type_info_name(__std_type_info_data * _Data, __type_info_node * _RootNode); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
}__pragma(pack ( pop )) 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
#pragma warning(push)
#pragma warning(disable: 4577)
class type_info { 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
public: type_info(const type_info &) = delete;
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
type_info &operator=(const type_info &) = delete;
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
size_t hash_code() const noexcept 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
return __std_type_info_hash(&(_Data)); 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
bool operator==(const type_info &_Other) const noexcept 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) == 0; 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
bool operator!=(const type_info &_Other) const noexcept 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) != 0; 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
bool before(const type_info &_Other) const noexcept 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) < 0; 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
const char *name() const noexcept 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
return __std_type_info_name(&(_Data), &__type_info_root_node); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
const char *raw_name() const noexcept 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
return (_Data)._DecoratedName; 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
virtual ~type_info() noexcept; 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
private: mutable __std_type_info_data _Data; 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
}; 
#pragma warning(pop)
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
namespace std { 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
using ::type_info;
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
}
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
namespace std { 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
#pragma warning(push)
#pragma warning(disable: 4577)
class bad_cast : public exception { 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
public: bad_cast() noexcept : exception("bad cast", 1) 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
static bad_cast __construct_from_string_literal(const char *const _Message) noexcept 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
return bad_cast(_Message, 1); 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
private: bad_cast(const char *const _Message, int) noexcept : exception(_Message, 1) 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
}; 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
class bad_typeid : public exception { 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
public: bad_typeid() noexcept : exception("bad typeid", 1) 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
static bad_typeid __construct_from_string_literal(const char *const _Message) noexcept 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
return bad_typeid(_Message, 1); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
friend class __non_rtti_object; 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
private: bad_typeid(const char *const _Message, int) noexcept : exception(_Message, 1) 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
}; 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
class __non_rtti_object : public bad_typeid { 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
public: static __non_rtti_object __construct_from_string_literal(const char *const _Message) noexcept 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
return __non_rtti_object(_Message, 1); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
private: __non_rtti_object(const char *const _Message, int) noexcept : bad_typeid(_Message, 1) 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
{ 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
} 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
}; 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
#pragma warning(pop)
}
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
#pragma pack ( pop )
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"
namespace std { 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"
constexpr int _Small_object_num_ptrs = ((6) + ((16) / sizeof(void *))); 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"
}
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"
#pragma pack ( pop )
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isctype(int _C, int _Type); 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isctype_l(int _C, int _Type, _locale_t _Locale); 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl isalpha(int _C); 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isalpha_l(int _C, _locale_t _Locale); 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl isupper(int _C); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isupper_l(int _C, _locale_t _Locale); 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl islower(int _C); 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _islower_l(int _C, _locale_t _Locale); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl isdigit(int _C); 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isdigit_l(int _C, _locale_t _Locale); 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl isxdigit(int _C); 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isxdigit_l(int _C, _locale_t _Locale); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl isspace(int _C); 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isspace_l(int _C, _locale_t _Locale); 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl ispunct(int _C); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _ispunct_l(int _C, _locale_t _Locale); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl isblank(int _C); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isblank_l(int _C, _locale_t _Locale); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl isalnum(int _C); 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isalnum_l(int _C, _locale_t _Locale); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl isprint(int _C); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isprint_l(int _C, _locale_t _Locale); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl isgraph(int _C); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _isgraph_l(int _C, _locale_t _Locale); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl iscntrl(int _C); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _iscntrl_l(int _C, _locale_t _Locale); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl toupper(int _C); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl tolower(int _C); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _tolower(int _C); 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _tolower_l(int _C, _locale_t _Locale); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _toupper(int _C); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl _toupper_l(int _C, _locale_t _Locale); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl __isascii(int _C); 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl __toascii(int _C); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl __iscsymf(int _C); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
int __cdecl __iscsym(int _C); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
__inline __crt_locale_data_public *__cdecl __acrt_get_locale_data_prefix(const volatile void *const _LocalePointers) 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
{ 
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
const _locale_t _TypedLocalePointers = (_locale_t)_LocalePointers; 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
return (__crt_locale_data_public *)(_TypedLocalePointers->locinfo); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
} 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
__inline int __cdecl _chvalidchk_l(const int 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
_C, const int 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
_Mask, const _locale_t 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
_Locale) 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
{ 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
if (_Locale) 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
{ 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
return ((__acrt_get_locale_data_prefix(_Locale)->_locale_pctype)[_C]) & _Mask; 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
}  
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
return (__pctype_func()[_C]) & _Mask; 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
} 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
__inline int __cdecl _ischartype_l(const int 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
_C, const int 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
_Mask, const _locale_t 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
_Locale) 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
{ 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
if (_Locale && ((__acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max) > 1)) 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
{ 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
return _isctype_l(_C, _Mask, _Locale); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
}  
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
return _chvalidchk_l(_C, _Mask, _Locale); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
} 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\ctype.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
struct lconv { 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *decimal_point; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *thousands_sep; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *grouping; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *int_curr_symbol; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *currency_symbol; 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *mon_decimal_point; 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *mon_thousands_sep; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *mon_grouping; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *positive_sign; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *negative_sign; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char int_frac_digits; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char frac_digits; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char p_cs_precedes; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char p_sep_by_space; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char n_cs_precedes; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char n_sep_by_space; 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char p_sign_posn; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char n_sign_posn; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *_W_decimal_point; 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *_W_thousands_sep; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *_W_int_curr_symbol; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *_W_currency_symbol; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *_W_mon_decimal_point; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *_W_mon_thousands_sep; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *_W_positive_sign; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *_W_negative_sign; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
}; 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
struct tm; 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
void __cdecl _lock_locales(); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
void __cdecl _unlock_locales(); 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
int __cdecl _configthreadlocale(int _Flag); 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *__cdecl setlocale(int _Category, const char * _Locale); 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
lconv *__cdecl localeconv(); 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
_locale_t __cdecl _get_current_locale(); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
_locale_t __cdecl _create_locale(int _Category, const char * _Locale); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
void __cdecl _free_locale(_locale_t _Locale); 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
_locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t **__cdecl ___lc_locale_name_func(); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
unsigned __cdecl ___lc_codepage_func(); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
unsigned __cdecl ___lc_collate_cp_func(); 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *__cdecl _Getdays(); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
char *__cdecl _Getmonths(); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
void *__cdecl _Gettnames(); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *__cdecl _W_Getdays(); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
__wchar_t *__cdecl _W_Getmonths(); 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
void *__cdecl _W_Gettnames(); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
size_t __cdecl _Strftime(char * _Buffer, size_t _Max_size, const char * _Format, const tm * _Timeptr, void * _Lc_time_arg); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
size_t __cdecl _Wcsftime(__wchar_t * _Buffer, size_t _Max_size, const __wchar_t * _Format, const tm * _Timeptr, void * _Lc_time_arg); 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.16299.0\\ucrt\\locale.h"
}__pragma(pack ( pop )) 
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
extern "C" {
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
typedef 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
struct _Collvec { 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
unsigned _Page; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
__wchar_t *_LocaleName; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
} _Collvec; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
typedef 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
struct _Ctypevec { 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
unsigned _Page; 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
const short *_Table; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
int _Delfl; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
__wchar_t *_LocaleName; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
} _Ctypevec; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
typedef 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
struct _Cvtvec { 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
unsigned _Page; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
unsigned _Mbcurmax; 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
int _Isclocale; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
unsigned char _Isleadbyte[32]; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
} _Cvtvec; 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
_Collvec __cdecl _Getcoll(); 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
_Ctypevec __cdecl _Getctype(); 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
_Cvtvec __cdecl _Getcvt(); 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
int __cdecl _Getdateorder(); 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
int __cdecl _Mbrtowc(__wchar_t *, const char *, size_t, mbstate_t *, const _Cvtvec *); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
float __cdecl _Stof(const char *, char **, long); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
double __cdecl _Stod(const char *, char **, long); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
long double __cdecl _Stold(const char *, char **, long); 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
int __cdecl _Strcoll(const char *, const char *, const char *, const char *, const _Collvec *); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
size_t __cdecl _Strxfrm(char * _String1, char * _End1, const char *, const char *, const _Collvec *); 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
int __cdecl _Tolower(int, const _Ctypevec *); 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
int __cdecl _Toupper(int, const _Ctypevec *); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
int __cdecl _Wcrtomb(char *, __wchar_t, mbstate_t *, const _Cvtvec *); 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
int __cdecl _Wcscoll(const __wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
size_t __cdecl _Wcsxfrm(__wchar_t * _String1, __wchar_t * _End1, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
short __cdecl _Getwctype(__wchar_t, const _Ctypevec *); 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
const __wchar_t *__cdecl _Getwctypes(const __wchar_t *, const __wchar_t *, short *, const _Ctypevec *); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
__wchar_t __cdecl _Towlower(__wchar_t, const _Ctypevec *); 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
__wchar_t __cdecl _Towupper(__wchar_t, const _Ctypevec *); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
}
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
extern "C" {
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
char *__cdecl _Getdays(); 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
char *__cdecl _Getmonths(); 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
void *__cdecl _Gettnames(); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
size_t __cdecl _Strftime(char *, size_t _Maxsize, const char *, const tm *, void *); 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
__wchar_t *__cdecl _W_Getdays(); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
__wchar_t *__cdecl _W_Getmonths(); 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
void *__cdecl _W_Gettnames(); 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
size_t __cdecl _Wcsftime(__wchar_t *, size_t _Maxsize, const __wchar_t *, const tm *, void *); 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
}
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
_locale_t __cdecl _GetLocaleForCP(unsigned); 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
namespace std { 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
class _Timevec { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
public: _Timevec(void *_Ptr = 0) : _Timeptr(_Ptr) 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Timevec(const _Timevec &_Right) 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
((*this) = _Right); 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
~_Timevec() noexcept 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
free(_Timeptr); 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Timevec &operator=(const _Timevec &_Right) 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
(_Timeptr) = (_Right._Timeptr); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
(((_Timevec *)(&_Right))->_Timeptr) = (nullptr); 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return *this; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
void *_Getptr() const 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return _Timeptr; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
private: void *_Timeptr; 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
}; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
class _Locinfo { 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
public: typedef ::_Collvec _Collvec; 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
typedef ::_Ctypevec _Ctypevec; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
typedef ::_Cvtvec _Cvtvec; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
typedef std::_Timevec _Timevec; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
static void __cdecl _Locinfo_ctor(_Locinfo *, const char *); 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
static void __cdecl _Locinfo_ctor(_Locinfo *, int, const char *); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
static void __cdecl _Locinfo_dtor(_Locinfo *); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
static _Locinfo &__cdecl _Locinfo_Addcats(_Locinfo *, int, const char *); 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Locinfo(const char *_Pch = "C") : _Lock(0) 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
if (_Pch == (nullptr)) { 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
throw ((runtime_error)("bad locale name")); }  
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Locinfo_ctor(this, _Pch); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Locinfo(int _Cat, const char *_Pch) : _Lock(0) 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
if (_Pch == (nullptr)) { 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
throw ((runtime_error)("bad locale name")); }  
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Locinfo_ctor(this, _Cat, _Pch); 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
~_Locinfo() noexcept 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Locinfo_dtor(this); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Locinfo &_Addcats(int _Cat, const char *_Pch) 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
if (_Pch == (nullptr)) { 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
throw ((runtime_error)("bad locale name")); }  
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return _Locinfo_Addcats(this, _Cat, _Pch); 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const char *_Getname() const 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return (_Newlocname)._C_str(); 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Collvec _Getcoll() const 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return ::_Getcoll(); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Ctypevec _Getctype() const 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return ::_Getctype(); 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Cvtvec _Getcvt() const 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return ::_Getcvt(); 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const lconv *_Getlconv() const 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return localeconv(); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Timevec _Gettnames() const 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return ((std::_Timevec)(::_Gettnames())); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const char *_Getdays() const 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const char *_Ptr = ::_Getdays(); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
if (_Ptr != (nullptr)) 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
((((_Locinfo *)this)->_Days) = _Ptr); 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
free((void *)_Ptr); 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
}  
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return (!(_Days)._Empty()) ? (_Days)._C_str() : (":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday:Thu:Thursday:Fri:Friday:Sat:Saturday"); 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const char *_Getmonths() const 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const char *_Ptr = ::_Getmonths(); 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
if (_Ptr != (nullptr)) 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
((((_Locinfo *)this)->_Months) = _Ptr); 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
free((void *)_Ptr); 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
}  
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return (!(_Months)._Empty()) ? (_Months)._C_str() : (":Jan:January:Feb:February:Mar:March:Apr:April:May:May:Jun:June:Jul:July:Aug:August:Sep:September:Oct:October:Nov:November:Dec:De" "cember"); 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const char *_Getfalse() const 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return "false"; 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const char *_Gettrue() const 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return "true"; 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
int _Getdateorder() const 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return ::_Getdateorder(); 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Timevec _W_Gettnames() const 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return ((std::_Timevec)(::_W_Gettnames())); 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const unsigned short *_W_Getdays() const 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const __wchar_t *_Ptr = ::_W_Getdays(); 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
if (_Ptr != (nullptr)) 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
((((_Locinfo *)this)->_W_Days) = _Ptr); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
free((void *)_Ptr); 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
}  
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return (const unsigned short *)((!(_W_Days)._Empty()) ? (_W_Days)._C_str() : (L"\x3a\x53\x75\x6e\x3a\x53\x75\x6e\x64\x61\x79\x3a\x4d\x6f\x6e\x3a\x4d\x6f\x6e\x64\x61\x79\x3a\x54\x75\x65\x3a\x54\x75\x65\x73\x64" L"\x61\x79\x3a\x57\x65\x64\x3a\x57\x65\x64\x6e\x65\x73\x64\x61\x79\x3a\x54\x68\x75\x3a\x54\x68\x75\x72\x73\x64\x61\x79\x3a\x46\x72" L"\x69\x3a\x46\x72\x69\x64\x61\x79\x3a\x53\x61\x74\x3a\x53\x61\x74\x75\x72\x64\x61\x79")); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const unsigned short *_W_Getmonths() const 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
const __wchar_t *_Ptr = ::_W_Getmonths(); 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
if (_Ptr != (nullptr)) 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
((((_Locinfo *)this)->_W_Months) = _Ptr); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
free((void *)_Ptr); 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
}  
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return (const unsigned short *)((!(_W_Months)._Empty()) ? (_W_Months)._C_str() : (L"\x3a\x4a\x61\x6e\x3a\x4a\x61\x6e\x75\x61\x72\x79\x3a\x46\x65\x62\x3a\x46\x65\x62\x72\x75\x61\x72\x79\x3a\x4d\x61\x72\x3a\x4d\x61" L"\x72\x63\x68\x3a\x41\x70\x72\x3a\x41\x70\x72\x69\x6c\x3a\x4d\x61\x79\x3a\x4d\x61\x79\x3a\x4a\x75\x6e\x3a\x4a\x75\x6e\x65\x3a\x4a" L"\x75\x6c\x3a\x4a\x75\x6c\x79\x3a\x41\x75\x67\x3a\x41\x75\x67\x75\x73\x74\x3a\x53\x65\x70\x3a\x53\x65\x70\x74\x65\x6d\x62\x65\x72" L"\x3a\x4f\x63\x74\x3a\x4f\x63\x74\x6f\x62\x65\x72\x3a\x4e\x6f\x76\x3a\x4e\x6f\x76\x65\x6d\x62\x65\x72\x3a\x44\x65\x63\x3a\x44\x65" L"\x63\x65\x6d\x62\x65\x72")); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Locinfo(const _Locinfo &) = delete;
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Locinfo &operator=(const _Locinfo &) = delete;
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
private: _Lockit _Lock; 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Yarn< char>  _Days; 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Yarn< char>  _Months; 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Yarn< __wchar_t>  _W_Days; 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Yarn< __wchar_t>  _W_Months; 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Yarn< char>  _Oldlocname; 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Yarn< char>  _Newlocname; 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
}; 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
template < class _Elem > inline
 int __cdecl _LStrcoll ( const _Elem * _First1, const _Elem * _Last1,
  const _Elem * _First2, const _Elem * _Last2,
   const _Locinfo :: _Collvec * )
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ++ _First2 )
  if ( * _First1 < * _First2 )
   return ( - 1 );
  else if ( * _First2 < * _First1 )
   return ( + 1 );
 return ( _First2 != _Last2 ? - 1 : _First1 != _Last1 ? + 1 : 0 );
 }
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
template<> inline int __cdecl _LStrcoll(const char *_First1, const char *_Last1, const char *
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Vector) 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
template<> inline int __cdecl _LStrcoll(const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Vector) 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return _Wcscoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
template < class _Elem > inline
 size_t __cdecl _LStrxfrm ( _Elem * _First1, _Elem * _Last1,
  const _Elem * _First2, const _Elem * _Last2,
   const _Locinfo :: _Collvec * )
 {
 const ptrdiff_t _Count = _Last2 - _First2;
 if ( _Count <= _Last1 - _First1 )
  {
  :: memcpy ( _First1, _First2, _Count * sizeof ( _Elem ) );
  }

 return ( _Count );
 }
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
template<> inline size_t __cdecl _LStrxfrm(char *
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_First1, char *_Last1, const char *
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Vector) 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
template<> inline size_t __cdecl _LStrxfrm(__wchar_t *
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_First1, __wchar_t *_Last1, const __wchar_t *
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
_Vector) 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
{ 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
return _Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
} 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
}
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
#pragma warning(pop)
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
namespace std { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _Ty > inline
 pair < _Ty *, ptrdiff_t > _Get_temporary_buffer ( ptrdiff_t _Count ) noexcept
 {
 if ( static_cast < size_t > ( _Count ) <= static_cast < size_t > ( - 1 ) / sizeof ( _Ty ) )
  {
  for (; 0 < _Count; _Count /= 2 )
   {
   const auto _Size = static_cast < size_t > ( _Count ) * sizeof ( _Ty );
   void * _Pbuf;











    {
    _Pbuf = :: operator new ( _Size, nothrow );
    }
   if ( _Pbuf )
    {
    return { static_cast < _Ty * > ( _Pbuf ), _Count };
    }
   }
  }

 return { nullptr, 0 };
 }
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _Ty > inline
 void _Return_temporary_buffer ( _Ty * const _Pbuf ) noexcept
 {











  {
  :: operator delete ( _Pbuf );
  }
 }
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _FwdIt >
 struct _Uninitialized_backout
 {
 _FwdIt _First;
 _FwdIt _Last;

 explicit _Uninitialized_backout ( _FwdIt _Dest )
  : _First ( _Dest ),
  _Last ( _Dest )
  { }

 _Uninitialized_backout ( _FwdIt _First_, _FwdIt _Last_ )
  : _First ( _First_ ),
  _Last ( _Last_ )
  { }

 _Uninitialized_backout ( const _Uninitialized_backout & ) = delete;
 _Uninitialized_backout & operator = ( const _Uninitialized_backout & ) = delete;

 ~ _Uninitialized_backout ( )
  {
  _Destroy_range ( _First, _Last );
  }

 template < class ... _Types >
  void _Emplace_back ( _Types && ... _Vals )
  {
  _Construct_in_place ( * _Last, :: std :: forward < _Types > ( _Vals ) ... );
  ++ _Last;
  }

 _FwdIt _Release ( )
  {
  _First = _Last;
  return ( _Last );
  }
 };
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _InIt,
 class _FwdIt > inline
 _FwdIt _Uninitialized_move_unchecked1 ( _InIt _First, const _InIt _Last,
  const _FwdIt _Dest, _General_ptr_iterator_tag )
 {
 _Uninitialized_backout < _FwdIt > _Backout { _Dest };
 for (; _First != _Last; ++ _First )
  {
  _Backout . _Emplace_back ( :: std :: move ( * _First ) );
  }

 return ( _Backout . _Release ( ) );
 }
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _InIt,
 class _FwdIt > inline
 _FwdIt _Uninitialized_move_unchecked1 ( const _InIt _First, const _InIt _Last,
  const _FwdIt _Dest, _Really_trivial_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _InIt,
 class _FwdIt > inline
 _FwdIt _Uninitialized_move_unchecked ( const _InIt _First, const _InIt _Last,
  const _FwdIt _Dest )
 {
 return ( _Uninitialized_move_unchecked1 ( _First, _Last, _Dest, _Ptr_move_cat ( _First, _Dest ) ) );
 }
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _FwdIt,
 class _Alloc >
 class _Uninitialized_backout_al
 {
public :
 _Uninitialized_backout_al ( _FwdIt _Dest, _Alloc & _Al_ )
  : _First ( _Dest ),
  _Last ( _Dest ),
  _Al ( _Al_ )
  {
  }

 _Uninitialized_backout_al ( const _Uninitialized_backout_al & ) = delete;
 _Uninitialized_backout_al & operator = ( const _Uninitialized_backout_al & ) = delete;

 ~ _Uninitialized_backout_al ( )
  {
  _Destroy_range ( _First, _Last, _Al );
  }

 template < class ... _Types >
  void _Emplace_back ( _Types && ... _Vals )
  {
  allocator_traits < _Alloc > :: construct ( _Al, _Unfancy ( _Last ), :: std :: forward < _Types > ( _Vals ) ... );
  ++ _Last;
  }

 _FwdIt _Release ( )
  {
  _First = _Last;
  return ( _Last );
  }

private :
 _FwdIt _First;
 _FwdIt _Last;
 _Alloc & _Al;
 };
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
 _FwdIt _Uninitialized_copy_al_unchecked ( _InIt _First, const _InIt _Last, const _FwdIt _Dest, _Alloc & _Al,
  _General_ptr_iterator_tag, _Any_tag )
 {
 _Uninitialized_backout_al < _FwdIt, _Alloc > _Backout { _Dest, _Al };
 for (; _First != _Last; ++ _First )
  {
  _Backout . _Emplace_back ( * _First );
  }

 return ( _Backout . _Release ( ) );
 }
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _Ty1,
 class _Ty2,
 class _Alloc > inline
 _Ty2 * _Uninitialized_copy_al_unchecked ( _Ty1 * const _First, _Ty1 * const _Last, _Ty2 * const _Dest, _Alloc &,
  _Really_trivial_ptr_iterator_tag, true_type )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
 _FwdIt _Uninitialized_copy ( const _InIt _First, const _InIt _Last, _FwdIt _Dest, _Alloc & _Al )
 {

 const auto _UFirst = _Get_unwrapped ( _First );
 const auto _ULast = _Get_unwrapped ( _Last );
 const auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
 _Seek_wrapped ( _Dest,
  _Uninitialized_copy_al_unchecked ( _UFirst, _ULast, _UDest, _Al,
   _Ptr_copy_cat ( _UFirst, _UDest ),
   _Uses_default_construct_t < _Alloc, decltype ( _Unfancy ( _UDest ) ), decltype ( * _UFirst ) > ( ) ) );

 return ( _Dest );
 }
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
 _FwdIt _Uninitialized_move_al_unchecked ( _InIt _First, const _InIt _Last, const _FwdIt _Dest, _Alloc & _Al,
  _General_ptr_iterator_tag, _Any_tag )
 {
 _Uninitialized_backout_al < _FwdIt, _Alloc > _Backout { _Dest, _Al };
 for (; _First != _Last; ++ _First )
  {
  _Backout . _Emplace_back ( :: std :: move ( * _First ) );
  }

 return ( _Backout . _Release ( ) );
 }
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _Ty1,
 class _Ty2,
 class _Alloc > inline
 _Ty2 * _Uninitialized_move_al_unchecked ( _Ty1 * const _First, _Ty1 * const _Last, _Ty2 * const _Dest, _Alloc &,
  _Really_trivial_ptr_iterator_tag, true_type )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _InIt,
 class _FwdIt,
 class _Alloc > inline
 _FwdIt _Uninitialized_move ( const _InIt _First, const _InIt _Last, _FwdIt _Dest, _Alloc & _Al )
 {

 const auto _UFirst = _Get_unwrapped ( _First );
 const auto _ULast = _Get_unwrapped ( _Last );
 const auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
 _Seek_wrapped ( _Dest,
  _Uninitialized_move_al_unchecked ( _UFirst, _ULast, _UDest, _Al,
   _Ptr_move_cat ( _UFirst, _UDest ),
   _Uses_default_construct_t < _Alloc, decltype ( _Unfancy ( _UDest ) ), decltype ( :: std :: move ( * _UFirst ) ) > ( ) ) );
 return ( _Dest );
 }
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _FwdIt,
 class _Diff,
 class _Alloc > inline
 _FwdIt _Uninit_alloc_fill_n1 ( const _FwdIt _First, _Diff _Count, const _Iter_value_t < _FwdIt > & _Val,
  _Alloc & _Al, false_type )
 {
 _Uninitialized_backout_al < _FwdIt, _Alloc > _Backout { _First, _Al };
 for (; 0 < _Count; -- _Count )
  {
  _Backout . _Emplace_back ( _Val );
  }

 return ( _Backout . _Release ( ) );
 }
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _FwdIt,
 class _Diff,
 class _Alloc > inline
 _FwdIt _Uninit_alloc_fill_n1 ( const _FwdIt _First, const _Diff _Count, const _Iter_value_t < _FwdIt > & _Val,
  _Alloc &, true_type )
 {
 :: memset ( _First, static_cast < unsigned char > ( _Val ), static_cast < size_t > ( _Count ) );
 return ( _First + _Count );
 }
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _FwdIt,
 class _Diff,
 class _Alloc > inline
 _FwdIt _Uninitialized_fill_n ( const _FwdIt _First, const _Diff _Count, const _Iter_value_t < _FwdIt > & _Val,
  _Alloc & _Al )
 {
 return ( _Uninit_alloc_fill_n1 ( _First, _Count, _Val, _Al,
  bool_constant < conjunction_v < decltype ( _Fill_memset_is_safe ( _First, _Val ) ),
   _Uses_default_construct < _Alloc, decltype ( _Unfancy ( _First ) ), decltype ( _Val ) >> > { } ) );
 }
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template< class _FwdIt> using _Use_memset_value_construct_t = bool_constant< conjunction_v< is_pointer< _FwdIt> , is_scalar< _Iter_value_t< _FwdIt> > , negation< is_volatile< _Iter_value_t< _FwdIt> > > , negation< is_member_pointer< _Iter_value_t< _FwdIt> > > > > ; 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _FwdIt > inline
 _FwdIt _Zero_range ( const _FwdIt _First, const _FwdIt _Last )
 {
 char * const _First_ch = reinterpret_cast < char * > ( _First );
 char * const _Last_ch = reinterpret_cast < char * > ( _Last );
 :: memset ( _First_ch, 0, static_cast < size_t > ( _Last_ch - _First_ch ) );
 return ( _Last );
 }
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _FwdIt,
 class _Diff,
 class _Alloc > inline
 _FwdIt _Uninitialized_value_construct_n1 ( const _FwdIt _First, _Diff _Count, _Alloc & _Al, false_type )
 {
 _Uninitialized_backout_al < _FwdIt, _Alloc > _Backout { _First, _Al };
 for (; 0 < _Count; -- _Count )
  {
  _Backout . _Emplace_back ( );
  }

 return ( _Backout . _Release ( ) );
 }
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _FwdIt,
 class _Diff,
 class _Alloc > inline
 _FwdIt _Uninitialized_value_construct_n1 ( _FwdIt _First, _Diff _Count, _Alloc &, true_type )
 {
 return ( _Zero_range ( _First, _First + _Count ) );
 }
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _FwdIt,
 class _Diff,
 class _Alloc > inline
 _FwdIt _Uninitialized_value_construct_n ( _FwdIt _First, _Diff _Count, _Alloc & _Al )
 {
 return ( _Uninitialized_value_construct_n1 ( _First, _Count, _Al,
  bool_constant < conjunction_v < _Use_memset_value_construct_t < _FwdIt >,
   _Uses_default_construct < _Alloc, decltype ( _Unfancy ( _First ) ) >> > { } ) );
 }
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
struct _Not_a_node_tag { 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
}; 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _Ty >
   pair < _Ty *, ptrdiff_t > get_temporary_buffer ( ptrdiff_t _Count ) noexcept
 {
 return ( _Get_temporary_buffer < _Ty > ( _Count ) );
 }
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
template < class _Ty >
  void return_temporary_buffer ( _Ty * _Pbuf )
 {
 _Return_temporary_buffer ( _Pbuf );
 }
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
}
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
namespace std { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _InIt,
 class _FwdIt > inline
 _FwdIt _Uninitialized_copy_unchecked ( _InIt _First, const _InIt _Last,
  const _FwdIt _Dest, _General_ptr_iterator_tag )
 {
 _Uninitialized_backout < _FwdIt > _Backout { _Dest };
 for (; _First != _Last; ++ _First )
  {
  _Backout . _Emplace_back ( * _First );
  }

 return ( _Backout . _Release ( ) );
 }
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _InIt,
 class _FwdIt > inline
 _FwdIt _Uninitialized_copy_unchecked ( const _InIt _First, const _InIt _Last,
  const _FwdIt _Dest, _Really_trivial_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _Last, _Dest ) );
 }
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _InIt,
 class _FwdIt > inline
 _FwdIt uninitialized_copy ( const _InIt _First, const _InIt _Last, _FwdIt _Dest )
 {
 _Adl_verify_range ( _First, _Last );
 const auto _UFirst = _Get_unwrapped ( _First );
 const auto _ULast = _Get_unwrapped ( _Last );
 const auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
 _Seek_wrapped ( _Dest,
  _Uninitialized_copy_unchecked ( _UFirst, _ULast, _UDest, _Ptr_copy_cat ( _UFirst, _UDest ) ) );
 return ( _Dest );
 }
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _InIt,
 class _Diff,
 class _FwdIt > inline
 _FwdIt _Uninitialized_copy_n_unchecked2 ( _InIt _First, _Diff _Count,
  const _FwdIt _Dest, _General_ptr_iterator_tag )
 {
 _Uninitialized_backout < _FwdIt > _Backout { _Dest };
 for (; 0 < _Count; -- _Count, ( void ) ++ _First )
  {
  _Backout . _Emplace_back ( * _First );
  }

 return ( _Backout . _Release ( ) );
 }
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _InIt,
 class _Diff,
 class _FwdIt > inline
 _FwdIt _Uninitialized_copy_n_unchecked2 ( const _InIt _First, const _Diff _Count,
  const _FwdIt _Dest, _Really_trivial_ptr_iterator_tag )
 {
 return ( _Copy_memmove ( _First, _First + _Count, _Dest ) );
 }
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _InIt,
 class _Diff,
 class _FwdIt > inline
 _FwdIt uninitialized_copy_n ( const _InIt _First, const _Diff _Count_raw, _FwdIt _Dest )
 {
 _Algorithm_int_t < _Diff > _Count = _Count_raw;
 if ( 0 < _Count )
  {
  const auto _UFirst = _Get_unwrapped_n ( _First, _Count );
  const auto _UDest = _Get_unwrapped_n ( _Dest, _Count );
  _Seek_wrapped ( _Dest,
   _Uninitialized_copy_n_unchecked2 ( _UFirst, _Count, _UDest, _Ptr_copy_cat ( _UFirst, _UDest ) ) );
  }

 return ( _Dest );
 }
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _FwdIt,
 class _Tval > inline
 void _Uninitialized_fill_unchecked ( const _FwdIt _First, const _FwdIt _Last, const _Tval & _Val, false_type )
 {
 _Uninitialized_backout < _FwdIt > _Backout { _First };
 while ( _Backout . _Last != _Last )
  {
  _Backout . _Emplace_back ( _Val );
  }

 _Backout . _Release ( );
 }
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _FwdIt,
 class _Tval > inline
 void _Uninitialized_fill_unchecked ( const _FwdIt _First, const _FwdIt _Last, const _Tval & _Val, true_type )
 {
 :: memset ( _First, static_cast < unsigned char > ( _Val ), static_cast < size_t > ( _Last - _First ) );
 }
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _FwdIt,
 class _Tval > inline
 void uninitialized_fill ( const _FwdIt _First, const _FwdIt _Last, const _Tval & _Val )
 {
 _Adl_verify_range ( _First, _Last );
 const auto _UFirst = _Get_unwrapped ( _First );
 _Uninitialized_fill_unchecked ( _UFirst, _Get_unwrapped ( _Last ), _Val, _Fill_memset_is_safe ( _UFirst, _Val ) );
 }
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _FwdIt,
 class _Diff,
 class _Tval > inline
 _FwdIt _Uninitialized_fill_n_unchecked1 ( const _FwdIt _First, _Diff _Count, const _Tval & _Val, false_type )
 {
 _Uninitialized_backout < _FwdIt > _Backout { _First };
 for (; 0 < _Count; -- _Count )
  {
  _Backout . _Emplace_back ( _Val );
  }

 return ( _Backout . _Release ( ) );
 }
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _FwdIt,
 class _Diff,
 class _Tval > inline
 _FwdIt _Uninitialized_fill_n_unchecked1 ( const _FwdIt _First, const _Diff _Count, const _Tval & _Val, true_type )
 {
 :: memset ( _First, static_cast < unsigned char > ( _Val ), _Count );
 return ( _First + _Count );
 }
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _FwdIt,
 class _Diff,
 class _Tval > inline
 _FwdIt uninitialized_fill_n ( _FwdIt _First, const _Diff _Count_raw, const _Tval & _Val )
 {
 _Algorithm_int_t < _Diff > _Count = _Count_raw;
 if ( 0 < _Count )
  {
  const auto _UFirst = _Get_unwrapped_n ( _First, _Count );
  _Seek_wrapped ( _First,
   _Uninitialized_fill_n_unchecked1 ( _UFirst, _Count, _Val, _Fill_memset_is_safe ( _UFirst, _Val ) ) );
  }

 return ( _First );
 }
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _OutIt,
 class _Ty >
 class raw_storage_iterator
 {
public :
 using iterator_category = output_iterator_tag;
 using value_type = void;
 using difference_type = void;
 using pointer = void;
 using reference = void;

 explicit raw_storage_iterator ( _OutIt _First )
  : _Next ( _First )
  {
  }

  raw_storage_iterator & operator * ( )
  {
  return ( * this );
  }

 raw_storage_iterator & operator = ( const _Ty & _Val )
  {
  _Construct_in_place ( * _Next, _Val );
  return ( * this );
  }

 raw_storage_iterator & operator = ( _Ty && _Val )
  {
  _Construct_in_place ( * _Next, :: std :: move ( _Val ) );
  return ( * this );
  }

 raw_storage_iterator & operator ++ ( )
  {
  ++ _Next;
  return ( * this );
  }

 raw_storage_iterator operator ++ ( int )
  {
  raw_storage_iterator _Ans = * this;
  ++ _Next;
  return ( _Ans );
  }

  _OutIt base ( ) const
  {
  return ( _Next );
  }

private :
 _OutIt _Next;
 };
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 class auto_ptr;
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 struct auto_ptr_ref
  {
 explicit auto_ptr_ref ( _Ty * _Right )
  : _Ref ( _Right )
  {
  }

 _Ty * _Ref;
 };
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 class auto_ptr
 {
public :
 typedef _Ty element_type;

 explicit auto_ptr ( _Ty * _Ptr = nullptr ) noexcept
  : _Myptr ( _Ptr )
  {
  }

 auto_ptr ( auto_ptr & _Right ) noexcept
  : _Myptr ( _Right . release ( ) )
  {
  }

 auto_ptr ( auto_ptr_ref < _Ty > _Right ) noexcept
  {
  _Ty * _Ptr = _Right . _Ref;
  _Right . _Ref = nullptr;
  _Myptr = _Ptr;
  }

 template < class _Other >
  operator auto_ptr < _Other > ( ) noexcept
  {
  return ( auto_ptr < _Other > ( * this ) );
  }

 template < class _Other >
  operator auto_ptr_ref < _Other > ( ) noexcept
  {
  _Other * _Cvtptr = _Myptr;
  auto_ptr_ref < _Other > _Ans ( _Cvtptr );
  _Myptr = nullptr;
  return ( _Ans );
  }

 template < class _Other >
  auto_ptr & operator = ( auto_ptr < _Other > & _Right ) noexcept
  {
  reset ( _Right . release ( ) );
  return ( * this );
  }

 template < class _Other >
  auto_ptr ( auto_ptr < _Other > & _Right ) noexcept
  : _Myptr ( _Right . release ( ) )
  {
  }

 auto_ptr & operator = ( auto_ptr & _Right ) noexcept
  {
  reset ( _Right . release ( ) );
  return ( * this );
  }

 auto_ptr & operator = ( auto_ptr_ref < _Ty > _Right ) noexcept
  {
  _Ty * _Ptr = _Right . _Ref;
  _Right . _Ref = 0;
  reset ( _Ptr );
  return ( * this );
  }

 ~ auto_ptr ( ) noexcept
  {
  delete _Myptr;
  }

  _Ty & operator * ( ) const noexcept
  {




  return ( * get ( ) );
  }

  _Ty * operator -> ( ) const noexcept
  {




  return ( get ( ) );
  }

  _Ty * get ( ) const noexcept
  {
  return ( _Myptr );
  }

 _Ty * release ( ) noexcept
  {
  _Ty * _Tmp = _Myptr;
  _Myptr = nullptr;
  return ( _Tmp );
  }

 void reset ( _Ty * _Ptr = nullptr )
  {
  if ( _Ptr != _Myptr )
   delete _Myptr;
  _Myptr = _Ptr;
  }

private :
 _Ty * _Myptr;
 };
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
#pragma pack(8)
template<> 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
class auto_ptr< void>  { 
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
public: typedef void element_type; 
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#pragma pack()
#line 757 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
#pragma pack(8)
#line 757 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
class bad_weak_ptr : public exception { 
#line 761 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
public: bad_weak_ptr() noexcept 
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 765 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
virtual const char *what() const noexcept override 
#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
return "bad_weak_ptr"; 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#pragma pack()
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
#pragma pack(8)
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
class __declspec(novtable) _Ref_count_base { 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
virtual void _Destroy() noexcept = 0; 
#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
virtual void _Delete_this() noexcept = 0; 
#line 790 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Atomic_counter_t _Uses; 
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Atomic_counter_t _Weaks; 
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
protected: _Ref_count_base() : _Uses((1)), _Weaks((1)) 
#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 800 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
public: virtual ~_Ref_count_base() noexcept 
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 804 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
bool _Incref_nz() 
#line 805 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 806 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
for (; ;) 
#line 807 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
const _Atomic_integral_t _Count = static_cast< volatile _Atomic_counter_t &>(_Uses); 
#line 812 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
if (_Count == (0)) { 
#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
return false; }  
#line 815 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
if ((static_cast< _Atomic_integral_t>(_InterlockedCompareExchange(reinterpret_cast< volatile long *>(&(_Uses)), static_cast< long>(_Count + (1)), static_cast< long>(_Count)))) == _Count) { 
#line 818 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
return true; }  
#line 830 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}  
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
void _Incref() 
#line 834 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Uses))); 
#line 836 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 838 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
void _Incwref() 
#line 839 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Weaks))); 
#line 841 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
void _Decref() 
#line 844 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 845 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Uses))) == (0)) 
#line 846 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 847 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
this->_Destroy(); 
#line 848 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
this->_Decwref(); 
#line 849 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}  
#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 852 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
void _Decwref() 
#line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 854 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Weaks))) == (0)) 
#line 855 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
this->_Delete_this(); 
#line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}  
#line 858 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
long _Use_count() const noexcept 
#line 861 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
return static_cast< long>(_Get_atomic_count(_Uses)); 
#line 863 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
virtual void *_Get_deleter(const type_info &) const noexcept 
#line 866 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 867 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
return nullptr; 
#line 868 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 869 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#pragma pack()
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 class _Ref_count
  : public _Ref_count_base
 {
public :
 explicit _Ref_count ( _Ty * _Px )
  : _Ref_count_base ( ), _Ptr ( _Px )
  {
  }

private :
 virtual void _Destroy ( ) noexcept override
  {
  delete _Ptr;
  }

 virtual void _Delete_this ( ) noexcept override
  {
  delete this;
  }

 _Ty * _Ptr;
 };
#line 897 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Resource,
 class _Dx >
 class _Ref_count_resource
  : public _Ref_count_base
 {
public :
 _Ref_count_resource ( _Resource _Px, _Dx _Dt )
  : _Ref_count_base ( ), _Mypair ( _One_then_variadic_args_t ( ), :: std :: move ( _Dt ), _Px )
  {
  }

 virtual void * _Get_deleter ( const type_info & _Typeid ) const noexcept override
  {

  if ( _Typeid == typeid ( _Dx ) )
   {
   return ( const_cast < _Dx * > ( :: std :: addressof ( _Mypair . _Get_first ( ) ) ) );
   }




  return ( nullptr );
  }

private :
 virtual void _Destroy ( ) noexcept override
  {
  _Mypair . _Get_first ( ) ( _Mypair . _Get_second ( ) );
  }

 virtual void _Delete_this ( ) noexcept override
  {
  delete this;
  }

 _Compressed_pair < _Dx, _Resource > _Mypair;
 };
#line 937 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Resource,
 class _Dx,
 class _Alloc >
 class _Ref_count_resource_alloc
  : public _Ref_count_base
 {
public :
 _Ref_count_resource_alloc ( _Resource _Px, _Dx _Dt, const _Alloc & _Ax )
  : _Ref_count_base ( ), _Mypair ( _One_then_variadic_args_t ( ), :: std :: move ( _Dt ),
   _One_then_variadic_args_t ( ), _Ax, _Px )
  {
  }

 virtual void * _Get_deleter ( const type_info & _Typeid ) const noexcept override
  {

  if ( _Typeid == typeid ( _Dx ) )
   {
   return ( const_cast < _Dx * > ( :: std :: addressof ( _Mypair . _Get_first ( ) ) ) );
   }




  return ( nullptr );
  }

private :
 using _Myalty = _Rebind_alloc_t < _Alloc, _Ref_count_resource_alloc >;

 virtual void _Destroy ( ) noexcept override
  {
  _Mypair . _Get_first ( ) ( _Mypair . _Get_second ( ) . _Get_second ( ) );
  }

 virtual void _Delete_this ( ) noexcept override
  {
  _Myalty _Al = _Mypair . _Get_second ( ) . _Get_first ( );
  allocator_traits < _Myalty > :: destroy ( _Al, this );
  _Deallocate_plain ( _Al, this );
  }

 _Compressed_pair < _Dx, _Compressed_pair < _Myalty, _Resource >> _Mypair;
 };
#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 struct default_delete;
#line 986 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx = default_delete < _Ty > >
 class unique_ptr;
#line 990 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 class shared_ptr;
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 class weak_ptr;
#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Yty, class 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
 = void> 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Can_enable_shared : public false_type { 
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1003 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Yty> 
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Can_enable_shared< _Yty, void_t< typename _Yty::_Esft_type> >  : public is_convertible< remove_cv_t< _Yty>  *, typename _Yty::_Esft_type *> ::type { 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1009 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Other,
 class _Yty >
 void _Enable_shared_from_this1 ( const shared_ptr < _Other > & _This, _Yty * _Ptr, true_type )
 {
 if ( _Ptr && _Ptr -> _Wptr . expired ( ) )
  {
  _Ptr -> _Wptr = shared_ptr < remove_cv_t < _Yty >> ( _This, const_cast < remove_cv_t < _Yty > * > ( _Ptr ) );
  }
 }
#line 1019 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Other,
 class _Yty >
 void _Enable_shared_from_this1 ( const shared_ptr < _Other > &, _Yty *, false_type )
 {
 }
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Other,
 class _Yty >
 void _Enable_shared_from_this ( const shared_ptr < _Other > & _This, _Yty * _Ptr )
 {
 _Enable_shared_from_this1 ( _This, _Ptr, bool_constant < conjunction_v <
  negation < is_array < _Other >>,
  negation < is_volatile < _Yty >>,
  _Can_enable_shared < _Yty >> > { } );
 }
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 class _Ptr_base
 {
public :
 using element_type = remove_extent_t < _Ty >;

  long use_count ( ) const noexcept
  {
  return ( _Rep ? _Rep -> _Use_count ( ) : 0 );
  }

 template < class _Ty2 >
   bool owner_before ( const _Ptr_base < _Ty2 > & _Right ) const noexcept
  {
  return ( _Rep < _Right . _Rep );
  }

 _Ptr_base ( const _Ptr_base & ) = delete;
 _Ptr_base & operator = ( const _Ptr_base & ) = delete;

protected :
  element_type * get ( ) const noexcept
  {
  return ( _Ptr );
  }

 constexpr _Ptr_base ( ) noexcept = default;

 ~ _Ptr_base ( ) = default;

 template < class _Ty2 >
  void _Move_construct_from ( _Ptr_base < _Ty2 > && _Right )
  {
  _Ptr = _Right . _Ptr;
  _Rep = _Right . _Rep;

  _Right . _Ptr = nullptr;
  _Right . _Rep = nullptr;
  }

 template < class _Ty2 >
  void _Copy_construct_from ( const shared_ptr < _Ty2 > & _Other )
  {
  if ( _Other . _Rep )
   {
   _Other . _Rep -> _Incref ( );
   }

  _Ptr = _Other . _Ptr;
  _Rep = _Other . _Rep;
  }

 template < class _Ty2 >
  void _Alias_construct_from ( const shared_ptr < _Ty2 > & _Other, element_type * _Px )
  {
  if ( _Other . _Rep )
   {
   _Other . _Rep -> _Incref ( );
   }

  _Ptr = _Px;
  _Rep = _Other . _Rep;
  }

 template < class _Ty0 >
  friend class weak_ptr;

 template < class _Ty2 >
  bool _Construct_from_weak ( const weak_ptr < _Ty2 > & _Other )
  {
  if ( _Other . _Rep && _Other . _Rep -> _Incref_nz ( ) )
   {
   _Ptr = _Other . _Ptr;
   _Rep = _Other . _Rep;
   return ( true );
   }

  return ( false );
  }

 void _Decref ( )
  {
  if ( _Rep )
   {
   _Rep -> _Decref ( );
   }
  }

 void _Swap ( _Ptr_base & _Right ) noexcept
  {
  :: std :: swap ( _Ptr, _Right . _Ptr );
  :: std :: swap ( _Rep, _Right . _Rep );
  }

 void _Set_ptr_rep ( element_type * _Other_ptr, _Ref_count_base * _Other_rep )
  {
  _Ptr = _Other_ptr;
  _Rep = _Other_rep;
  }

 template < class _Ty2 >
  void _Weakly_construct_from ( const _Ptr_base < _Ty2 > & _Other )
  {
  if ( _Other . _Rep )
   {
   _Other . _Rep -> _Incwref ( );
   }

  _Ptr = _Other . _Ptr;
  _Rep = _Other . _Rep;
  }

 void _Decwref ( )
  {
  if ( _Rep )
   {
   _Rep -> _Decwref ( );
   }
  }

private :
 element_type * _Ptr { nullptr };
 _Ref_count_base * _Rep { nullptr };

 template < class _Ty0 >
  friend class _Ptr_base;


 template < class _Dx,
  class _Ty0 >
  friend _Dx * get_deleter ( const shared_ptr < _Ty0 > & _Sx ) noexcept;

 };
#line 1171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Yty, class 
#line 1172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
 = void> 
#line 1173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Can_scalar_delete : public false_type { 
#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Yty> 
#line 1177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Can_scalar_delete< _Yty, void_t< decltype((delete std::declval< _Yty *> ()))> >  : public true_type { 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Yty, class 
#line 1183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
 = void> 
#line 1184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Can_array_delete : public false_type { 
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Yty> 
#line 1188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Can_array_delete< _Yty, void_t< decltype((delete [] std::declval< _Yty *> ()))> >  : public true_type { 
#line 1190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Fx, class 
#line 1194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Arg, class 
#line 1195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
 = void> 
#line 1196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Can_call_function_object : public false_type { 
#line 1198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Fx, class 
#line 1200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Arg> 
#line 1201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Can_call_function_object< _Fx, _Arg, void_t< decltype((std::declval< _Fx> ()(std::declval< _Arg> ())))> >  : public true_type { 
#line 1203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Yty, class 
#line 1207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Ty> 
#line 1208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _SP_convertible : public is_convertible< _Yty *, _Ty *> ::type { 
#line 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Yty, class 
#line 1212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Uty> 
#line 1213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _SP_convertible< _Yty, _Uty []>  : public is_convertible< _Yty (*)[], _Uty (*)[]> ::type { 
#line 1215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Yty, class 
#line 1217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Uty, size_t 
#line 1218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Ext> 
#line 1219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _SP_convertible< _Yty, _Uty [_Ext]>  : public is_convertible< _Yty (*)[_Ext], _Uty (*)[_Ext]> ::type { 
#line 1221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Yty, class 
#line 1225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Ty> 
#line 1226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _SP_pointer_compatible : public is_convertible< _Yty *, _Ty *> ::type { 
#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Uty, size_t 
#line 1232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Ext> 
#line 1233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _SP_pointer_compatible< _Uty [_Ext], _Uty []>  : public true_type { 
#line 1236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Uty, size_t 
#line 1238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Ext> 
#line 1239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _SP_pointer_compatible< _Uty [_Ext], const _Uty []>  : public true_type { 
#line 1242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Uty, size_t 
#line 1244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Ext> 
#line 1245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _SP_pointer_compatible< _Uty [_Ext], volatile _Uty []>  : public true_type { 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Uty, size_t 
#line 1250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Ext> 
#line 1251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _SP_pointer_compatible< _Uty [_Ext], const volatile _Uty []>  : public true_type { 
#line 1254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 1257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 class shared_ptr
  : public _Ptr_base < _Ty >
 {
private :
 using _Mybase = _Ptr_base < _Ty >;

public :
 using typename _Mybase :: element_type;





 constexpr shared_ptr ( ) noexcept
  {
  }

 constexpr shared_ptr ( nullptr_t ) noexcept
  {
  }

 template < class _Ux,
  enable_if_t < conjunction_v < conditional_t < is_array_v < _Ty >, _Can_array_delete < _Ux >, _Can_scalar_delete < _Ux >>,
   _SP_convertible < _Ux, _Ty >>, int > = 0 >
  explicit shared_ptr ( _Ux * _Px )
  {
  _Setp ( _Px, is_array < _Ty > { } );
  }

 template < class _Ux,
  class _Dx,
  enable_if_t < conjunction_v < is_move_constructible < _Dx >,
   _Can_call_function_object < _Dx &, _Ux * & >,
   _SP_convertible < _Ux, _Ty >>, int > = 0 >
  shared_ptr ( _Ux * _Px, _Dx _Dt )
  {
  _Setpd ( _Px, :: std :: move ( _Dt ) );
  }

 template < class _Ux,
  class _Dx,
  class _Alloc,
  enable_if_t < conjunction_v < is_move_constructible < _Dx >,
   _Can_call_function_object < _Dx &, _Ux * & >,
   _SP_convertible < _Ux, _Ty >>, int > = 0 >
  shared_ptr ( _Ux * _Px, _Dx _Dt, _Alloc _Ax )
  {
  _Setpda ( _Px, :: std :: move ( _Dt ), _Ax );
  }

 template < class _Dx,
  enable_if_t < conjunction_v < is_move_constructible < _Dx >,
   _Can_call_function_object < _Dx &, nullptr_t & >
  >, int > = 0 >
  shared_ptr ( nullptr_t, _Dx _Dt )
  {
  _Setpd ( nullptr, :: std :: move ( _Dt ) );
  }

 template < class _Dx,
  class _Alloc,
  enable_if_t < conjunction_v < is_move_constructible < _Dx >,
   _Can_call_function_object < _Dx &, nullptr_t & >
  >, int > = 0 >
  shared_ptr ( nullptr_t, _Dx _Dt, _Alloc _Ax )
  {
  _Setpda ( nullptr, :: std :: move ( _Dt ), _Ax );
  }

 template < class _Ty2 >
  shared_ptr ( const shared_ptr < _Ty2 > & _Right, element_type * _Px ) noexcept
  {
  this -> _Alias_construct_from ( _Right, _Px );
  }

 shared_ptr ( const shared_ptr & _Other ) noexcept
  {
  this -> _Copy_construct_from ( _Other );
  }

 template < class _Ty2,
  enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
  shared_ptr ( const shared_ptr < _Ty2 > & _Other ) noexcept
  {
  this -> _Copy_construct_from ( _Other );
  }

 shared_ptr ( shared_ptr && _Right ) noexcept
  {
  this -> _Move_construct_from ( :: std :: move ( _Right ) );
  }

 template < class _Ty2,
  enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
  shared_ptr ( shared_ptr < _Ty2 > && _Right ) noexcept
  {
  this -> _Move_construct_from ( :: std :: move ( _Right ) );
  }

 template < class _Ty2,
  enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
  explicit shared_ptr ( const weak_ptr < _Ty2 > & _Other )
  {
  if ( ! this -> _Construct_from_weak ( _Other ) )
   {
   throw bad_weak_ptr { };
   }
  }


 template < class _Ty2,
  enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
  shared_ptr ( auto_ptr < _Ty2 > && _Other )
  {
  _Ty2 * _Px = _Other . get ( );
  _Set_ptr_rep_and_enable_shared ( _Px, new _Ref_count < _Ty2 > ( _Px ) );
  _Other . release ( );
  }


 template < class _Ux,
  class _Dx,
  enable_if_t < conjunction_v <
   _SP_pointer_compatible < _Ux, _Ty >,
   is_convertible < typename unique_ptr < _Ux, _Dx > :: pointer, element_type * >
  >, int > = 0 >
  shared_ptr ( unique_ptr < _Ux, _Dx > && _Other )
  {
  using _Fancy_t = typename unique_ptr < _Ux, _Dx > :: pointer;
  using _Raw_t = typename unique_ptr < _Ux, _Dx > :: element_type *;
  using _Deleter_t = conditional_t < is_reference_v < _Dx >, decltype ( :: std :: ref ( _Other . get_deleter ( ) ) ), _Dx >;

  const _Fancy_t _Fancy = _Other . get ( );

  if ( _Fancy )
   {
   const _Raw_t _Raw = _Fancy;
   const auto _Rx = new _Ref_count_resource < _Fancy_t, _Deleter_t > ( _Fancy, _Other . get_deleter ( ) );
   _Set_ptr_rep_and_enable_shared ( _Raw, _Rx );
   _Other . release ( );
   }
  }

 ~ shared_ptr ( ) noexcept
  {
  this -> _Decref ( );
  }

 shared_ptr & operator = ( const shared_ptr & _Right ) noexcept
  {
  shared_ptr ( _Right ) . swap ( * this );
  return ( * this );
  }

 template < class _Ty2 >
  shared_ptr & operator = ( const shared_ptr < _Ty2 > & _Right ) noexcept
  {
  shared_ptr ( _Right ) . swap ( * this );
  return ( * this );
  }

 shared_ptr & operator = ( shared_ptr && _Right ) noexcept
  {
  shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
  return ( * this );
  }

 template < class _Ty2 >
  shared_ptr & operator = ( shared_ptr < _Ty2 > && _Right ) noexcept
  {
  shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
  return ( * this );
  }


 template < class _Ty2 >
  shared_ptr & operator = ( auto_ptr < _Ty2 > && _Right )
  {
  shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
  return ( * this );
  }


 template < class _Ux,
  class _Dx >
  shared_ptr & operator = ( unique_ptr < _Ux, _Dx > && _Right )
  {
  shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
  return ( * this );
  }

 void swap ( shared_ptr & _Other ) noexcept
  {
  this -> _Swap ( _Other );
  }

 void reset ( ) noexcept
  {
  shared_ptr ( ) . swap ( * this );
  }

 template < class _Ux >
  void reset ( _Ux * _Px )
  {
  shared_ptr ( _Px ) . swap ( * this );
  }

 template < class _Ux,
  class _Dx >
  void reset ( _Ux * _Px, _Dx _Dt )
  {
  shared_ptr ( _Px, _Dt ) . swap ( * this );
  }

 template < class _Ux,
  class _Dx,
  class _Alloc >
  void reset ( _Ux * _Px, _Dx _Dt, _Alloc _Ax )
  {
  shared_ptr ( _Px, _Dt, _Ax ) . swap ( * this );
  }

 using _Mybase :: get;

 template < class _Ty2 = _Ty,
  enable_if_t < ! disjunction_v < is_array < _Ty2 >, is_void < _Ty2 >>, int > = 0 >
   _Ty2 & operator * ( ) const noexcept
  {
  return ( * get ( ) );
  }

 template < class _Ty2 = _Ty,
  enable_if_t < ! is_array_v < _Ty2 >, int > = 0 >
   _Ty2 * operator -> ( ) const noexcept
  {
  return ( get ( ) );
  }

 template < class _Ty2 = _Ty,
  class _Elem = element_type,
  enable_if_t < is_array_v < _Ty2 >, int > = 0 >
   _Elem & operator [ ] ( ptrdiff_t _Idx ) const
  {
  return ( get ( ) [ _Idx ] );
  }

   bool unique ( ) const noexcept
  {
  return ( this -> use_count ( ) == 1 );
  }

 explicit operator bool ( ) const noexcept
  {
  return ( get ( ) != nullptr );
  }

private :
 template < class _Ux >
  void _Setp ( _Ux * _Px, true_type )
  {
  _Setpd ( _Px, default_delete < _Ux [ ] > { } );
  }

 template < class _Ux >
  void _Setp ( _Ux * _Px, false_type )
  {
  try {
  _Set_ptr_rep_and_enable_shared ( _Px, new _Ref_count < _Ux > ( _Px ) );
  } catch ( ... ) {
  delete _Px;
  throw;
  }
  }

 template < class _UxptrOrNullptr,
  class _Dx >
  void _Setpd ( _UxptrOrNullptr _Px, _Dx _Dt )
  {
  try {
  _Set_ptr_rep_and_enable_shared ( _Px, new _Ref_count_resource < _UxptrOrNullptr, _Dx > ( _Px, :: std :: move ( _Dt ) ) );
  } catch ( ... ) {
  _Dt ( _Px );
  throw;
  }
  }

 template < class _UxptrOrNullptr,
  class _Dx,
  class _Alloc >
  void _Setpda ( _UxptrOrNullptr _Px, _Dx _Dt, _Alloc _Ax )
  {
  using _Refd = _Ref_count_resource_alloc < _UxptrOrNullptr, _Dx, _Alloc >;
  using _Alref_alloc = _Rebind_alloc_t < _Alloc, _Refd >;
  using _Alref_traits = allocator_traits < _Alref_alloc >;
  _Alref_alloc _Alref ( _Ax );

  try {
  const auto _Pfancy = _Alref_traits :: allocate ( _Alref, 1 );
  _Refd * const _Pref = _Unfancy ( _Pfancy );
   try {
   _Alref_traits :: construct ( _Alref, _Pref, _Px, :: std :: move ( _Dt ), _Ax );
   _Set_ptr_rep_and_enable_shared ( _Px, _Pref );
   } catch ( ... ) {
   _Alref_traits :: deallocate ( _Alref, _Pfancy, 1 );
   throw;
   }
  } catch ( ... ) {
  _Dt ( _Px );
  throw;
  }
  }

 template < class _Ty0,
  class ... _Types >
  friend shared_ptr < _Ty0 > make_shared ( _Types && ... _Args );

 template < class _Ty0,
  class _Alloc,
  class ... _Types >
  friend shared_ptr < _Ty0 > allocate_shared ( const _Alloc & _Al_arg, _Types && ... _Args );

 template < class _Ux >
  void _Set_ptr_rep_and_enable_shared ( _Ux * _Px, _Ref_count_base * _Rx )
  {
  this -> _Set_ptr_rep ( _Px, _Rx );
  _Enable_shared_from_this ( * this, _Px );
  }

 void _Set_ptr_rep_and_enable_shared ( nullptr_t, _Ref_count_base * _Rx )
  {
  this -> _Set_ptr_rep ( nullptr, _Rx );
  }
 };
#line 1601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Ty2 >
  bool operator == ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept
 {
 return ( _Left . get ( ) == _Right . get ( ) );
 }
#line 1608 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Ty2 >
  bool operator != ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept
 {
 return ( _Left . get ( ) != _Right . get ( ) );
 }
#line 1615 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Ty2 >
  bool operator < ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept
 {
 return ( _Left . get ( ) < _Right . get ( ) );
 }
#line 1622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Ty2 >
  bool operator >= ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept
 {
 return ( _Left . get ( ) >= _Right . get ( ) );
 }
#line 1629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Ty2 >
  bool operator > ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept
 {
 return ( _Left . get ( ) > _Right . get ( ) );
 }
#line 1636 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Ty2 >
  bool operator <= ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept
 {
 return ( _Left . get ( ) <= _Right . get ( ) );
 }
#line 1643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator == ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept
 {
 return ( _Left . get ( ) == nullptr );
 }
#line 1649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator == ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept
 {
 return ( nullptr == _Right . get ( ) );
 }
#line 1655 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator != ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept
 {
 return ( _Left . get ( ) != nullptr );
 }
#line 1661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator != ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept
 {
 return ( nullptr != _Right . get ( ) );
 }
#line 1667 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator < ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept
 {
 return ( _Left . get ( ) < static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) );
 }
#line 1673 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator < ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept
 {
 return ( static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) < _Right . get ( ) );
 }
#line 1679 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator >= ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept
 {
 return ( _Left . get ( ) >= static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) );
 }
#line 1685 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator >= ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept
 {
 return ( static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) >= _Right . get ( ) );
 }
#line 1691 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator > ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept
 {
 return ( _Left . get ( ) > static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) );
 }
#line 1697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator > ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept
 {
 return ( static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) > _Right . get ( ) );
 }
#line 1703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator <= ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept
 {
 return ( _Left . get ( ) <= static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) );
 }
#line 1709 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  bool operator <= ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept
 {
 return ( static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) <= _Right . get ( ) );
 }
#line 1715 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Elem,
 class _Traits,
 class _Ty >
 basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Out, const shared_ptr < _Ty > & _Px )
 {
 return ( _Out << _Px . get ( ) );
 }
#line 1723 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 void swap ( shared_ptr < _Ty > & _Left, shared_ptr < _Ty > & _Right ) noexcept
 {
 _Left . swap ( _Right );
 }
#line 1729 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Ty2 >
  shared_ptr < _Ty1 > static_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept
 {
 const auto _Ptr = static_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
 return ( shared_ptr < _Ty1 > ( _Other, _Ptr ) );
 }
#line 1737 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Ty2 >
  shared_ptr < _Ty1 > const_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept
 {
 const auto _Ptr = const_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
 return ( shared_ptr < _Ty1 > ( _Other, _Ptr ) );
 }
#line 1745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Ty2 >
  shared_ptr < _Ty1 > reinterpret_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept
 {
 const auto _Ptr = reinterpret_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
 return ( shared_ptr < _Ty1 > ( _Other, _Ptr ) );
 }
#line 1754 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Ty2 >
  shared_ptr < _Ty1 > dynamic_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept
 {
 const auto _Ptr = dynamic_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );

 if ( _Ptr )
  {
  return ( shared_ptr < _Ty1 > ( _Other, _Ptr ) );
  }

 return ( shared_ptr < _Ty1 > ( ) );
 }
#line 1774 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Dx,
 class _Ty >
  _Dx * get_deleter ( const shared_ptr < _Ty > & _Sx ) noexcept
 {
 if ( _Sx . _Rep )
  {
  return ( static_cast < _Dx * > ( _Sx . _Rep -> _Get_deleter ( typeid ( _Dx ) ) ) );
  }

 return ( nullptr );
 }
#line 1792 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 class _Ref_count_obj
  : public _Ref_count_base
 {
public :
 template < class ... _Types >
  explicit _Ref_count_obj ( _Types && ... _Args )
  : _Ref_count_base ( )
  {
  :: new ( static_cast < void * > ( & _Storage ) ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );
  }

 _Ty * _Getptr ( )
  {
  return ( reinterpret_cast < _Ty * > ( & _Storage ) );
  }

private :
 virtual void _Destroy ( ) noexcept override
  {
  _Getptr ( ) -> ~ _Ty ( );
  }

 virtual void _Delete_this ( ) noexcept override
  {
  delete this;
  }

 aligned_union_t < 1, _Ty > _Storage;
 };
#line 1824 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Alloc >
 class _Ref_count_obj_alloc
  : public _Ref_count_base
 {
public :
 template < class ... _Types >
  explicit _Ref_count_obj_alloc ( const _Alloc & _Al_arg, _Types && ... _Args )
  : _Ref_count_base ( ), _Mypair ( _One_then_variadic_args_t ( ), _Al_arg )
  {
  :: new ( static_cast < void * > ( & _Mypair . _Get_second ( ) ) ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );
  }

 _Ty * _Getptr ( )
  {
  return ( reinterpret_cast < _Ty * > ( & _Mypair . _Get_second ( ) ) );
  }

private :
 using _Myalty = _Rebind_alloc_t < _Alloc, _Ref_count_obj_alloc >;
 using _Mystoragety = aligned_union_t < 1, _Ty >;

 virtual void _Destroy ( ) noexcept override
  {
  _Getptr ( ) -> ~ _Ty ( );
  }

 virtual void _Delete_this ( ) noexcept override
  {
  _Myalty _Al = _Mypair . _Get_first ( );
  allocator_traits < _Myalty > :: destroy ( _Al, this );
  _Deallocate_plain ( _Al, this );
  }

 _Compressed_pair < _Myalty, _Mystoragety > _Mypair;
 };
#line 1862 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class ... _Types >
  inline shared_ptr < _Ty > make_shared ( _Types && ... _Args )
 {
 const auto _Rx = new _Ref_count_obj < _Ty > ( :: std :: forward < _Types > ( _Args ) ... );

 shared_ptr < _Ty > _Ret;
 _Ret . _Set_ptr_rep_and_enable_shared ( _Rx -> _Getptr ( ), _Rx );
 return ( _Ret );
 }
#line 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Alloc,
 class ... _Types >
  inline shared_ptr < _Ty > allocate_shared ( const _Alloc & _Al_arg, _Types && ... _Args )
 {
 using _Refoa = _Ref_count_obj_alloc < _Ty, _Alloc >;
 using _Alref_alloc = _Rebind_alloc_t < _Alloc, _Refoa >;
 using _Alref_traits = allocator_traits < _Alref_alloc >;
 _Alref_alloc _Alref ( _Al_arg );

 const auto _Rx = _Alref_traits :: allocate ( _Alref, 1 );

 try {
  _Alref_traits :: construct ( _Alref, _Unfancy ( _Rx ), _Al_arg, :: std :: forward < _Types > ( _Args ) ... );
 } catch ( ... ) {
  _Alref_traits :: deallocate ( _Alref, _Rx, 1 );
 throw;
 }

 shared_ptr < _Ty > _Ret;
 _Ret . _Set_ptr_rep_and_enable_shared ( _Rx -> _Getptr ( ), _Unfancy ( _Rx ) );
 return ( _Ret );
 }
#line 1899 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 class weak_ptr
  : public _Ptr_base < _Ty >
 {
public :
 constexpr weak_ptr ( ) noexcept
  {
  }

 weak_ptr ( const weak_ptr & _Other ) noexcept
  {
  this -> _Weakly_construct_from ( _Other );
  }

 template < class _Ty2,
  enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
  weak_ptr ( const shared_ptr < _Ty2 > & _Other ) noexcept
  {
  this -> _Weakly_construct_from ( _Other );
  }

 template < class _Ty2,
  enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
  weak_ptr ( const weak_ptr < _Ty2 > & _Other ) noexcept
  {
  this -> _Weakly_construct_from ( _Other . lock ( ) );
  }

 weak_ptr ( weak_ptr && _Other ) noexcept
  {
  this -> _Move_construct_from ( :: std :: move ( _Other ) );
  }

 template < class _Ty2,
  enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
  weak_ptr ( weak_ptr < _Ty2 > && _Other ) noexcept
  {
  this -> _Weakly_construct_from ( _Other . lock ( ) );
  _Other . reset ( );
  }

 ~ weak_ptr ( ) noexcept
  {
  this -> _Decwref ( );
  }

 weak_ptr & operator = ( const weak_ptr & _Right ) noexcept
  {
  weak_ptr ( _Right ) . swap ( * this );
  return ( * this );
  }

 template < class _Ty2 >
  weak_ptr & operator = ( const weak_ptr < _Ty2 > & _Right ) noexcept
  {
  weak_ptr ( _Right ) . swap ( * this );
  return ( * this );
  }

 weak_ptr & operator = ( weak_ptr && _Right ) noexcept
  {
  weak_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
  return ( * this );
  }

 template < class _Ty2 >
  weak_ptr & operator = ( weak_ptr < _Ty2 > && _Right ) noexcept
  {
  weak_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
  return ( * this );
  }

 template < class _Ty2 >
  weak_ptr & operator = ( const shared_ptr < _Ty2 > & _Right ) noexcept
  {
  weak_ptr ( _Right ) . swap ( * this );
  return ( * this );
  }

 void reset ( ) noexcept
  {
  weak_ptr ( ) . swap ( * this );
  }

 void swap ( weak_ptr & _Other ) noexcept
  {
  this -> _Swap ( _Other );
  }

  bool expired ( ) const noexcept
  {
  return ( this -> use_count ( ) == 0 );
  }

  shared_ptr < _Ty > lock ( ) const noexcept
  {
  shared_ptr < _Ty > _Ret;
  ( void ) _Ret . _Construct_from_weak ( * this );
  return ( _Ret );
  }
 };
#line 2006 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 void swap ( weak_ptr < _Ty > & _Left, weak_ptr < _Ty > & _Right ) noexcept
 {
 _Left . swap ( _Right );
 }
#line 2013 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 class enable_shared_from_this
 {
public :
 using _Esft_type = enable_shared_from_this;

  shared_ptr < _Ty > shared_from_this ( )
  {
  return ( shared_ptr < _Ty > ( _Wptr ) );
  }

  shared_ptr < const _Ty > shared_from_this ( ) const
  {
  return ( shared_ptr < const _Ty > ( _Wptr ) );
  }

  weak_ptr < _Ty > weak_from_this ( ) noexcept
  {
  return ( _Wptr );
  }

  weak_ptr < const _Ty > weak_from_this ( ) const noexcept
  {
  return ( _Wptr );
  }

protected :
 constexpr enable_shared_from_this ( ) noexcept
  : _Wptr ( )
  {
  }

 enable_shared_from_this ( const enable_shared_from_this & ) noexcept
  : _Wptr ( )
  {
  }

 enable_shared_from_this & operator = ( const enable_shared_from_this & ) noexcept
  {
  return ( * this );
  }

 ~ enable_shared_from_this ( ) = default;

private :
 template < class _Other,
  class _Yty >
  friend void _Enable_shared_from_this1 ( const shared_ptr < _Other > & _This, _Yty * _Ptr, true_type );

 mutable weak_ptr < _Ty > _Wptr;
 };
#line 2069 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 struct default_delete
 {
 constexpr default_delete ( ) noexcept = default;

 template < class _Ty2,
  enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
  default_delete ( const default_delete < _Ty2 > & ) noexcept
  {
  }

 void operator ( ) ( _Ty * _Ptr ) const noexcept
  {
  static_assert ( 0 < sizeof ( _Ty ),
   "can\'t delete an incomplete type" );
  delete _Ptr;
  }
 };
#line 2088 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Ty> 
#pragma pack(8)
#line 2089 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct default_delete< _Ty []>  { 
#line 2091 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
constexpr default_delete() noexcept = default;
#line 2093 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Uty,
  enable_if_t < is_convertible_v < _Uty ( * ) [ ], _Ty ( * ) [ ] >, int > = 0 >
  default_delete ( const default_delete < _Uty [ ] > & ) noexcept
  {
  }
#line 2099 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Uty,
  enable_if_t < is_convertible_v < _Uty ( * ) [ ], _Ty ( * ) [ ] >, int > = 0 >
  void operator ( ) ( _Uty * _Ptr ) const noexcept
  {
  static_assert ( 0 < sizeof ( _Uty ),
   "can\'t delete an incomplete type" );
  delete [ ] _Ptr;
  }
#line 2107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#pragma pack(8)
#line 2110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Ty, class 
#line 2111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Dx_noref, class 
#line 2112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
 = void> 
#line 2113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Get_deleter_pointer_type { 
#line 2115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
typedef _Ty *type; 
#line 2116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 2118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Ty, class 
#line 2119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Dx_noref> 
#line 2120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Get_deleter_pointer_type< _Ty, _Dx_noref, void_t< typename _Dx_noref::pointer> >  { 
#line 2122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
typedef typename _Dx_noref::pointer type; 
#line 2123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 2126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
 class _Unique_ptr_base
 {
public :
 typedef remove_reference_t < _Dx > _Dx_noref;
 typedef typename _Get_deleter_pointer_type < _Ty, _Dx_noref > :: type pointer;

 template < class _Ptr2,
  class _Dx2 >
  _Unique_ptr_base ( _Ptr2 _Ptr, _Dx2 && _Dt )
  : _Mypair ( _One_then_variadic_args_t ( ), :: std :: forward < _Dx2 > ( _Dt ), _Ptr )
  {
  }

 template < class _Ptr2 >
  constexpr _Unique_ptr_base ( _Ptr2 _Ptr )
  : _Mypair ( _Zero_then_variadic_args_t ( ), _Ptr )
  {
  }

  _Dx & get_deleter ( ) noexcept
  {
  return ( _Mypair . _Get_first ( ) );
  }

  const _Dx & get_deleter ( ) const noexcept
  {
  return ( _Mypair . _Get_first ( ) );
  }

 pointer & _Myptr ( ) noexcept
  {
  return ( _Mypair . _Get_second ( ) );
  }

 const pointer & _Myptr ( ) const noexcept
  {
  return ( _Mypair . _Get_second ( ) );
  }

 _Compressed_pair < _Dx, pointer > _Mypair;
 };
#line 2170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Dx2> using _Unique_ptr_enable_default_t = enable_if_t< conjunction_v< negation< is_pointer< _Dx2> > , is_default_constructible< _Dx2> > , int> ; 
#line 2175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
 class unique_ptr
  : public _Unique_ptr_base < _Ty, _Dx >
 {
public :
 typedef _Unique_ptr_base < _Ty, _Dx > _Mybase;
 typedef typename _Mybase :: pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase :: get_deleter;

 template < class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t < _Dx2 > = 0 >
  constexpr unique_ptr ( ) noexcept
   : _Mybase ( pointer ( ) )
  {
  }

 template < class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t < _Dx2 > = 0 >
  constexpr unique_ptr ( nullptr_t ) noexcept
   : _Mybase ( pointer ( ) )
  {
  }

 unique_ptr & operator = ( nullptr_t ) noexcept
  {
  reset ( );
  return ( * this );
  }

 template < class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t < _Dx2 > = 0 >
  explicit unique_ptr ( pointer _Ptr ) noexcept
   : _Mybase ( _Ptr )
  {
  }

 template < class _Dx2 = _Dx,
  enable_if_t < is_constructible_v < _Dx2, const _Dx2 & >, int > = 0 >
  unique_ptr ( pointer _Ptr, const _Dx & _Dt ) noexcept
   : _Mybase ( _Ptr, _Dt )
  {
  }

 template < class _Dx2 = _Dx,
  enable_if_t < conjunction_v < negation < is_reference < _Dx2 >>,
   is_constructible < _Dx2, _Dx2 >>, int > = 0 >
  unique_ptr ( pointer _Ptr, _Dx && _Dt ) noexcept
   : _Mybase ( _Ptr, :: std :: move ( _Dt ) )
  {
  }

 template < class _Dx2 = _Dx,
  enable_if_t < conjunction_v < is_reference < _Dx2 >,
   is_constructible < _Dx2, remove_reference_t < _Dx2 >> >, int > = 0 >
  unique_ptr ( pointer, remove_reference_t < _Dx > && ) = delete;

 unique_ptr ( unique_ptr && _Right ) noexcept
  : _Mybase ( _Right . release ( ),
   :: std :: forward < _Dx > ( _Right . get_deleter ( ) ) )
  {
  }

 template < class _Ty2,
  class _Dx2,
  enable_if_t < conjunction_v < negation < is_array < _Ty2 >>,
   is_convertible < typename unique_ptr < _Ty2, _Dx2 > :: pointer, pointer >,
   conditional_t < is_reference_v < _Dx >, is_same < _Dx2, _Dx >, is_convertible < _Dx2, _Dx >>
  >, int > = 0 >
  unique_ptr ( unique_ptr < _Ty2, _Dx2 > && _Right ) noexcept
   : _Mybase ( _Right . release ( ),
    :: std :: forward < _Dx2 > ( _Right . get_deleter ( ) ) )
  {
  }


 template < class _Ty2,
  enable_if_t < conjunction_v < is_convertible < _Ty2 *, _Ty * >,
   is_same < _Dx, default_delete < _Ty >> >, int > = 0 >
  unique_ptr ( auto_ptr < _Ty2 > && _Right ) noexcept
   : _Mybase ( _Right . release ( ) )
  {
  }


 template < class _Ty2,
  class _Dx2,
  enable_if_t < conjunction_v < negation < is_array < _Ty2 >>,
   is_assignable < _Dx &, _Dx2 >,
   is_convertible < typename unique_ptr < _Ty2, _Dx2 > :: pointer, pointer >
  >, int > = 0 >
  unique_ptr & operator = ( unique_ptr < _Ty2, _Dx2 > && _Right ) noexcept
  {
  reset ( _Right . release ( ) );
  this -> get_deleter ( ) = :: std :: forward < _Dx2 > ( _Right . get_deleter ( ) );
  return ( * this );
  }

 unique_ptr & operator = ( unique_ptr && _Right ) noexcept
  {
  if ( this != :: std :: addressof ( _Right ) )
   {
   reset ( _Right . release ( ) );
   this -> get_deleter ( ) = :: std :: forward < _Dx > ( _Right . get_deleter ( ) );
   }
  return ( * this );
  }

 void swap ( unique_ptr & _Right ) noexcept
  {
  _Swap_adl ( this -> _Myptr ( ), _Right . _Myptr ( ) );
  _Swap_adl ( this -> get_deleter ( ), _Right . get_deleter ( ) );
  }

 ~ unique_ptr ( ) noexcept
  {
  if ( get ( ) != pointer ( ) )
   {
   this -> get_deleter ( ) ( get ( ) );
   }
  }

  add_lvalue_reference_t < _Ty > operator * ( ) const
  {
  return ( * get ( ) );
  }

  pointer operator -> ( ) const noexcept
  {
  return ( this -> _Myptr ( ) );
  }

  pointer get ( ) const noexcept
  {
  return ( this -> _Myptr ( ) );
  }

 explicit operator bool ( ) const noexcept
  {
  return ( get ( ) != pointer ( ) );
  }

 pointer release ( ) noexcept
  {
  pointer _Ans = get ( );
  this -> _Myptr ( ) = pointer ( );
  return ( _Ans );
  }

 void reset ( pointer _Ptr = pointer ( ) ) noexcept
  {
  pointer _Old = get ( );
  this -> _Myptr ( ) = _Ptr;
  if ( _Old != pointer ( ) )
   {
   this -> get_deleter ( ) ( _Old );
   }
  }

 unique_ptr ( const unique_ptr & ) = delete;
 unique_ptr & operator = ( const unique_ptr & ) = delete;
 };
#line 2342 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
 class unique_ptr < _Ty [ ], _Dx >
  : public _Unique_ptr_base < _Ty, _Dx >
 {
public :
 typedef _Unique_ptr_base < _Ty, _Dx > _Mybase;
 typedef typename _Mybase :: pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase :: get_deleter;

 template < class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t < _Dx2 > = 0 >
  constexpr unique_ptr ( ) noexcept
   : _Mybase ( pointer ( ) )
  {
  }

 template < class _Uty,
  class _Is_nullptr = is_same < _Uty, nullptr_t >>
  using _Enable_ctor_reset = enable_if_t <
   is_same_v < _Uty, pointer >
   || _Is_nullptr :: value
   || ( is_same_v < pointer, element_type * >
   && is_pointer_v < _Uty >
   && is_convertible_v <
    remove_pointer_t < _Uty > ( * ) [ ],
    element_type ( * ) [ ]
   > ) >;

 template < class _Uty,
  class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t < _Dx2 > = 0,
  class = _Enable_ctor_reset < _Uty >>
  explicit unique_ptr ( _Uty _Ptr ) noexcept
   : _Mybase ( _Ptr )
  {
  }

 template < class _Uty,
  class _Dx2 = _Dx,
  enable_if_t < is_constructible_v < _Dx2, const _Dx2 & >, int > = 0,
  class = _Enable_ctor_reset < _Uty >>
  unique_ptr ( _Uty _Ptr, const _Dx & _Dt ) noexcept
   : _Mybase ( _Ptr, _Dt )
  {
  }

 template < class _Uty,
  class _Dx2 = _Dx,
  enable_if_t < conjunction_v < negation < is_reference < _Dx2 >>,
   is_constructible < _Dx2, _Dx2 >>, int > = 0,
  class = _Enable_ctor_reset < _Uty >>
  unique_ptr ( _Uty _Ptr, _Dx && _Dt ) noexcept
   : _Mybase ( _Ptr, :: std :: move ( _Dt ) )
  {
  }

 template < class _Uty,
  class _Dx2 = _Dx,
  enable_if_t < conjunction_v < is_reference < _Dx2 >,
   is_constructible < _Dx2, remove_reference_t < _Dx2 >> >, int > = 0 >
  unique_ptr ( _Uty, remove_reference_t < _Dx > && ) = delete;

 unique_ptr ( unique_ptr && _Right ) noexcept
  : _Mybase ( _Right . release ( ),
   :: std :: forward < _Dx > ( _Right . get_deleter ( ) ) )
  {
  }

 unique_ptr & operator = ( unique_ptr && _Right ) noexcept
  {
  if ( this != :: std :: addressof ( _Right ) )
   {
   reset ( _Right . release ( ) );
   this -> get_deleter ( ) = :: std :: move ( _Right . get_deleter ( ) );
   }
  return ( * this );
  }

 template < class _Uty,
  class _Ex,
  class _More,
  class _UP_pointer = typename unique_ptr < _Uty, _Ex > :: pointer,
  class _UP_element_type = typename unique_ptr < _Uty, _Ex > :: element_type >
  using _Enable_conversion = enable_if_t < conjunction_v <
   is_array < _Uty >,
   is_same < pointer, element_type * >,
   is_same < _UP_pointer, _UP_element_type * >,
   is_convertible < _UP_element_type ( * ) [ ], element_type ( * ) [ ] >,
   _More >>;

 template < class _Uty,
  class _Ex,
  class = _Enable_conversion < _Uty, _Ex,
   conditional_t < is_reference_v < _Dx >, is_same < _Ex, _Dx >, is_convertible < _Ex, _Dx >> >>
  unique_ptr ( unique_ptr < _Uty, _Ex > && _Right ) noexcept
   : _Mybase ( _Right . release ( ),
    :: std :: forward < _Ex > ( _Right . get_deleter ( ) ) )
  {
  }

 template < class _Uty,
  class _Ex,
  class = _Enable_conversion < _Uty, _Ex, is_assignable < _Dx &, _Ex >> >
  unique_ptr & operator = ( unique_ptr < _Uty, _Ex > && _Right ) noexcept
  {
  reset ( _Right . release ( ) );
  this -> get_deleter ( ) = :: std :: forward < _Ex > ( _Right . get_deleter ( ) );
  return ( * this );
  }

 template < class _Dx2 = _Dx,
  _Unique_ptr_enable_default_t < _Dx2 > = 0 >
  constexpr unique_ptr ( nullptr_t ) noexcept
   : _Mybase ( pointer ( ) )
  {
  }

 unique_ptr & operator = ( nullptr_t ) noexcept
  {
  reset ( );
  return ( * this );
  }

 void reset ( nullptr_t = nullptr ) noexcept
  {
  reset ( pointer ( ) );
  }

 void swap ( unique_ptr & _Right ) noexcept
  {
  _Swap_adl ( this -> _Myptr ( ), _Right . _Myptr ( ) );
  _Swap_adl ( this -> get_deleter ( ), _Right . get_deleter ( ) );
  }

 ~ unique_ptr ( ) noexcept
  {
  _Delete ( );
  }

  _Ty & operator [ ] ( size_t _Idx ) const
  {
  return ( get ( ) [ _Idx ] );
  }

  pointer get ( ) const noexcept
  {
  return ( this -> _Myptr ( ) );
  }

 explicit operator bool ( ) const noexcept
  {
  return ( get ( ) != pointer ( ) );
  }

 pointer release ( ) noexcept
  {
  pointer _Ans = get ( );
  this -> _Myptr ( ) = pointer ( );
  return ( _Ans );
  }

 template < class _Uty,
  class = _Enable_ctor_reset < _Uty, false_type >>
  void reset ( _Uty _Ptr ) noexcept
  {
  pointer _Old = get ( );
  this -> _Myptr ( ) = _Ptr;
  if ( _Old != pointer ( ) )
   {
   this -> get_deleter ( ) ( _Old );
   }
  }

 unique_ptr ( const unique_ptr & ) = delete;
 unique_ptr & operator = ( const unique_ptr & ) = delete;

private :
 void _Delete ( )
  {
  if ( get ( ) != pointer ( ) )
   {
   this -> get_deleter ( ) ( get ( ) );
   }
  }
 };
#line 2534 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class ... _Types,
 enable_if_t < ! is_array_v < _Ty >, int > = 0 >
  inline unique_ptr < _Ty > make_unique ( _Types && ... _Args )
 {
 return ( unique_ptr < _Ty > ( new _Ty ( :: std :: forward < _Types > ( _Args ) ... ) ) );
 }
#line 2542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 enable_if_t < is_array_v < _Ty > && extent_v < _Ty > == 0, int > = 0 >
  inline unique_ptr < _Ty > make_unique ( size_t _Size )
 {
 typedef remove_extent_t < _Ty > _Elem;
 return ( unique_ptr < _Ty > ( new _Elem [ _Size ] ( ) ) );
 }
#line 2550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class ... _Types,
 enable_if_t < extent_v < _Ty > != 0, int > = 0 >
 void make_unique ( _Types && ... ) = delete;
#line 2557 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Alloc >
 struct _Allocator_deleter
 {
 _Alloc _Al;

 using pointer = typename allocator_traits < _Alloc > :: pointer;
 void operator ( ) ( pointer _Ptr ) noexcept
  {
  allocator_traits < _Alloc > :: destroy ( _Al, _Unfancy ( _Ptr ) );
  _Al . deallocate ( _Ptr, 1 );
  }
 };
#line 2570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Alloc> using _Unique_ptr_alloc = unique_ptr< typename _Alloc::value_type, _Allocator_deleter< _Alloc> > ; 
#line 2573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Alloc,
 class ... _Args >
 _Unique_ptr_alloc < _Alloc > _Make_unique_alloc ( _Alloc & _Al, _Args && ... _Vals )
 {
 auto _Ptr = _Al . allocate ( 1 );
 try {
  allocator_traits < _Alloc > :: construct ( _Al, _Unfancy ( _Ptr ), :: std :: forward < _Args > ( _Vals ) ... );
 } catch ( ... ) {
  _Al . deallocate ( _Ptr, 1 );
 throw;
 }

 return ( _Unique_ptr_alloc < _Alloc > ( _Ptr, _Allocator_deleter < _Alloc > { _Al } ) );
 }
#line 2588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx,
 enable_if_t < _Is_swappable < _Dx > :: value, int > = 0 >
 void swap ( unique_ptr < _Ty, _Dx > & _Left, unique_ptr < _Ty, _Dx > & _Right ) noexcept
 {
 _Left . swap ( _Right );
 }
#line 2596 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2 >
  bool operator == ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right )
 {
 return ( _Left . get ( ) == _Right . get ( ) );
 }
#line 2605 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2 >
  bool operator != ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2614 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2 >
  bool operator < ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right )
 {
 typedef typename unique_ptr < _Ty1, _Dx1 > :: pointer _Ptr1;
 typedef typename unique_ptr < _Ty2, _Dx2 > :: pointer _Ptr2;
 typedef common_type_t < _Ptr1, _Ptr2 > _Common;
 return ( less < _Common > ( ) ( _Left . get ( ), _Right . get ( ) ) );
 }
#line 2626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2 >
  bool operator >= ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2 >
  bool operator > ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right )
 {
 return ( _Right < _Left );
 }
#line 2644 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2 >
  bool operator <= ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator == ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t ) noexcept
 {
 return ( ! _Left );
 }
#line 2660 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator == ( nullptr_t, const unique_ptr < _Ty, _Dx > & _Right ) noexcept
 {
 return ( ! _Right );
 }
#line 2667 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator != ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) noexcept
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2674 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator != ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) noexcept
 {
 return ( ! ( _Left == _Right ) );
 }
#line 2681 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator < ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right )
 {
 typedef typename unique_ptr < _Ty, _Dx > :: pointer _Ptr;
 return ( less < _Ptr > ( ) ( _Left . get ( ), _Right ) );
 }
#line 2689 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator < ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right )
 {
 typedef typename unique_ptr < _Ty, _Dx > :: pointer _Ptr;
 return ( less < _Ptr > ( ) ( _Left, _Right . get ( ) ) );
 }
#line 2697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator >= ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2704 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator >= ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right )
 {
 return ( ! ( _Left < _Right ) );
 }
#line 2711 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator > ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right )
 {
 return ( _Right < _Left );
 }
#line 2718 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator > ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right )
 {
 return ( _Right < _Left );
 }
#line 2725 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator <= ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2732 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
  bool operator <= ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right )
 {
 return ( ! ( _Right < _Left ) );
 }
#line 2739 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _OutTy, class 
#line 2740 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_PxTy, class 
#line 2741 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
 = void> 
#line 2742 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Can_stream_unique_ptr : public false_type { 
#line 2744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 2745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _OutTy, class 
#line 2746 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_PxTy> 
#line 2747 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Can_stream_unique_ptr< _OutTy, _PxTy, void_t< decltype((std::declval< _OutTy> () << (std::declval< _PxTy> ().get())))> >  : public true_type { 
#line 2750 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 2752 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Elem,
 class _Traits,
 class _Yty,
 class _Dx,
 enable_if_t < _Can_stream_unique_ptr < basic_ostream < _Elem, _Traits > &, const unique_ptr < _Yty, _Dx > & > :: value, int > = 0 >
 basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Out, const unique_ptr < _Yty, _Dx > & _Px )
 {
 _Out << _Px . get ( );
 return ( _Out );
 }
#line 2764 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
enum class pointer_safety { 
#line 2765 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
relaxed, 
#line 2766 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
preferred, 
#line 2767 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
strict
#line 2768 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 2770 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
inline void declare_reachable(void *) 
#line 2771 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 2772 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 2774 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty > inline
 _Ty * undeclare_reachable ( _Ty * _Ptr )
 {
 return ( _Ptr );
 }
#line 2780 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
inline void declare_no_pointers(char *, size_t) 
#line 2781 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 2782 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 2784 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
inline void undeclare_no_pointers(char *, size_t) 
#line 2785 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 2786 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 2788 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
inline pointer_safety get_pointer_safety() noexcept 
#line 2789 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 2790 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
return pointer_safety::relaxed; 
#line 2791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 2794 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template< class _Ty = void> struct owner_less; 
#line 2797 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 struct owner_less < shared_ptr < _Ty > >
 {
  typedef shared_ptr < _Ty > first_argument_type;
  typedef shared_ptr < _Ty > second_argument_type;
  typedef bool result_type;

  bool operator ( ) ( const shared_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept
  {
  return ( _Left . owner_before ( _Right ) );
  }

  bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept
  {
  return ( _Left . owner_before ( _Right ) );
  }

  bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept
  {
  return ( _Left . owner_before ( _Right ) );
  }
 };
#line 2820 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 struct owner_less < weak_ptr < _Ty > >
 {
  typedef weak_ptr < _Ty > first_argument_type;
  typedef weak_ptr < _Ty > second_argument_type;
  typedef bool result_type;

  bool operator ( ) ( const weak_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept
  {
  return ( _Left . owner_before ( _Right ) );
  }

  bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept
  {
  return ( _Left . owner_before ( _Right ) );
  }

  bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept
  {
  return ( _Left . owner_before ( _Right ) );
  }
 };
#line 2844 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template<> struct owner_less< void>  { 
#line 2846 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using is_transparent = int; 
#line 2848 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
  class _Uty >
   bool operator ( ) ( const shared_ptr < _Ty > & _Left, const shared_ptr < _Uty > & _Right ) const noexcept
  {
  return ( _Left . owner_before ( _Right ) );
  }
#line 2855 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
  class _Uty >
   bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Uty > & _Right ) const noexcept
  {
  return ( _Left . owner_before ( _Right ) );
  }
#line 2862 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
  class _Uty >
   bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Uty > & _Right ) const noexcept
  {
  return ( _Left . owner_before ( _Right ) );
  }
#line 2869 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
  class _Uty >
   bool operator ( ) ( const weak_ptr < _Ty > & _Left, const weak_ptr < _Uty > & _Right ) const noexcept
  {
  return ( _Left . owner_before ( _Right ) );
  }
#line 2875 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty,
 class _Dx >
 struct hash < unique_ptr < _Ty, _Dx > >
  : _Conditionally_enabled_hash < unique_ptr < _Ty, _Dx >,
   is_default_constructible_v < hash < typename unique_ptr < _Ty, _Dx > :: pointer >> >
 {
 static size_t _Do_hash ( const unique_ptr < _Ty, _Dx > & _Keyval )
   noexcept ( _Is_nothrow_hashable < typename unique_ptr < _Ty, _Dx > :: pointer > :: value )
  {
  return ( hash < typename unique_ptr < _Ty, _Dx > :: pointer > { } ( _Keyval . get ( ) ) );
  }
 };
#line 2891 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
 struct hash < shared_ptr < _Ty > >
 {
  typedef shared_ptr < _Ty > argument_type;
  typedef size_t result_type;

  size_t operator ( ) ( const shared_ptr < _Ty > & _Keyval ) const noexcept
  {
  return ( hash < typename shared_ptr < _Ty > :: element_type * > ( ) ( _Keyval . get ( ) ) );
  }
 };
#line 2904 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
inline void *align(size_t _Bound, size_t _Size, void *&_Ptr, size_t &_Space) noexcept 
#line 2905 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 2906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
size_t _Off = static_cast< size_t>((reinterpret_cast< uintptr_t>(_Ptr)) & (_Bound - (1))); 
#line 2907 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
if (_Off != (0)) 
#line 2908 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 2909 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Off = (_Bound - _Off); 
#line 2910 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}  
#line 2912 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
if ((_Space < _Off) || ((_Space - _Off) < _Size)) 
#line 2913 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 2914 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
return nullptr; 
#line 2915 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}  
#line 2918 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Ptr = ((static_cast< char *>(_Ptr)) + _Off); 
#line 2919 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Space -= _Off; 
#line 2920 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
return _Ptr; 
#line 2921 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 2926 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
extern "C" {
#line 2927 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
void __cdecl _Lock_shared_ptr_spin_lock(); 
#line 2928 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
void __cdecl _Unlock_shared_ptr_spin_lock(); 
#line 2929 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}
#line 2932 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
struct _Shared_ptr_spin_lock { 
#line 2934 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Shared_ptr_spin_lock() 
#line 2935 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 2936 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Lock_shared_ptr_spin_lock(); 
#line 2937 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 2939 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
~_Shared_ptr_spin_lock() noexcept 
#line 2940 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
{ 
#line 2941 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
_Unlock_shared_ptr_spin_lock(); 
#line 2942 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
} 
#line 2943 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}; 
#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  inline bool atomic_is_lock_free ( const shared_ptr < _Ty > * )
 {
 return ( false );
 }
#line 2951 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  inline shared_ptr < _Ty > atomic_load_explicit ( const shared_ptr < _Ty > * _Ptr,
  memory_order )
 {
 _Shared_ptr_spin_lock _Lock;
 shared_ptr < _Ty > _Result = * _Ptr;
 return ( _Result );
 }
#line 2960 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty >
  inline shared_ptr < _Ty > atomic_load ( const shared_ptr < _Ty > * _Ptr )
 {
 return ( :: std :: atomic_load_explicit ( _Ptr, memory_order_seq_cst ) );
 }
#line 2966 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty > inline
 void atomic_store_explicit ( shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other,
  memory_order )
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr -> swap ( _Other );
 }
#line 2974 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty > inline
 void atomic_store ( shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other )
 {
 :: std :: atomic_store_explicit ( _Ptr, :: std :: move ( _Other ), memory_order_seq_cst );
 }
#line 2980 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty > inline
 shared_ptr < _Ty > atomic_exchange_explicit (
  shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other,
  memory_order )
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr -> swap ( _Other );
 return ( _Other );
 }
#line 2990 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty > inline
 shared_ptr < _Ty > atomic_exchange (
  shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other )
 {
 return ( :: std :: atomic_exchange_explicit ( _Ptr, :: std :: move ( _Other ), memory_order_seq_cst ) );
 }
#line 2997 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty > inline
 bool atomic_compare_exchange_weak_explicit (
  shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value,
  memory_order, memory_order )
 {
 shared_ptr < _Ty > _Old_exp;
 _Shared_ptr_spin_lock _Lock;
 bool _Success = _Ptr -> get ( ) == _Exp -> get ( )
  && ! _Ptr -> owner_before ( * _Exp )
  && ! _Exp -> owner_before ( * _Ptr );
 if ( _Success )
  _Ptr -> swap ( _Value );
 else
  {
  _Exp -> swap ( _Old_exp );
  * _Exp = * _Ptr;
  }
 return ( _Success );
 }
#line 3017 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty > inline
 bool atomic_compare_exchange_weak (
  shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > * _Exp,
   shared_ptr < _Ty > _Value )
 {
 return ( :: std :: atomic_compare_exchange_weak_explicit ( _Ptr, _Exp, :: std :: move ( _Value ),
  memory_order_seq_cst, memory_order_seq_cst ) );
 }
#line 3026 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty > inline
 bool atomic_compare_exchange_strong_explicit (
  shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value,
  memory_order, memory_order )
 {
 return ( :: std :: atomic_compare_exchange_weak_explicit ( _Ptr, _Exp, :: std :: move ( _Value ),
  memory_order_seq_cst, memory_order_seq_cst ) );
 }
#line 3035 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
template < class _Ty > inline
 bool atomic_compare_exchange_strong (
 shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > * _Exp,
  shared_ptr < _Ty > _Value )
 {
 return ( :: std :: atomic_compare_exchange_strong_explicit ( _Ptr, _Exp, :: std :: move ( _Value ),
  memory_order_seq_cst, memory_order_seq_cst ) );
 }
#line 3045 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 { 
#line 3046 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::allocate_shared;
#line 3047 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::bad_weak_ptr;
#line 3048 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::const_pointer_cast;
#line 3049 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::dynamic_pointer_cast;
#line 3050 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::enable_shared_from_this;
#line 3051 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::get_deleter;
#line 3052 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::make_shared;
#line 3053 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::shared_ptr;
#line 3054 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::static_pointer_cast;
#line 3055 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::swap;
#line 3056 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
using std::weak_ptr;
#line 3057 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}
#line 3060 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
}
#line 3063 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
#pragma warning(pop)
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
namespace std { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
class _Facet_base { 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
public: virtual ~_Facet_base() noexcept 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
{ 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
} 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
virtual void _Incref() = 0; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
virtual _Facet_base *_Decref() = 0; 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
}; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
void __cdecl _Facet_Register(_Facet_base *); 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
}
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
namespace std { 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Dummy> 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
class _Locbase { 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: static const int collate = ((1 << 1) >> 1); 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const int ctype = ((1 << 2) >> 1); 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const int monetary = ((1 << 3) >> 1); 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const int numeric = ((1 << 4) >> 1); 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const int time = ((1 << 5) >> 1); 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const int messages = ((1 << 6) >> 1); 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const int all = (((1 << (6 + 1)) >> 1) - 1); 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const int none = 0; 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Dummy> const int _Locbase< _Dummy> ::collate; 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Dummy> const int _Locbase< _Dummy> ::ctype; 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Dummy> const int _Locbase< _Dummy> ::monetary; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Dummy> const int _Locbase< _Dummy> ::numeric; 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Dummy> const int _Locbase< _Dummy> ::time; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Dummy> const int _Locbase< _Dummy> ::messages; 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Dummy> const int _Locbase< _Dummy> ::all; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Dummy> const int _Locbase< _Dummy> ::none; 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
class locale; 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Facet >
 const _Facet & __cdecl use_facet ( const locale & );
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Elem> class collate; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
struct _Crt_new_delete { 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
class locale : public _Locbase< int> , public _Crt_new_delete { 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: typedef int category; 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
class id { 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: id(size_t _Val = 0) : _Id(_Val) 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
operator size_t() 
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Id) == (0)) 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ _Lockit _Lock(0); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Id) == (0)) 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Id) = (static_cast< size_t>(++_Id_cnt)); 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Id; 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: size_t _Id; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static int _Id_cnt; 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: id(const id &) = delete;
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
id &operator=(const id &) = delete;
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
class _Locimp; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
class facet : public _Facet_base, public _Crt_new_delete { 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: static size_t __cdecl _Getcat(const facet ** = 0, const locale * = 0) 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return static_cast< size_t>(-1); 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual void _Incref() override 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Myrefs))); 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Facet_base *_Decref() override 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Myrefs))) == (0)) 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this; 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return nullptr; 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: _Atomic_counter_t _Myrefs; 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: explicit facet(size_t _Initrefs = 0) : _Myrefs(static_cast< _Atomic_integral_t>(_Initrefs)) 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual ~facet() noexcept 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: facet(const facet &) = delete;
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
facet &operator=(const facet &) = delete;
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
class _Locimp : public facet { 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: virtual ~_Locimp() noexcept 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locimp_dtor(this); 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: static _Locimp *__cdecl _New_Locimp(bool _Transparent = false); 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static _Locimp *__cdecl _New_Locimp(const _Locimp & _Right); 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static void __cdecl _Locimp_dtor(_Locimp *); 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static void __cdecl _Locimp_Addfac(_Locimp *, facet *, size_t); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static void __cdecl _Locimp_ctor(_Locimp *, const _Locimp &); 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
friend class locale; 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locimp(bool _Transparent) : facet(1), _Facetvec((nullptr)), _Facetcount((0)), _Catmask(none), _Xparent(_Transparent), _Name("*") 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locimp(const _Locimp &_Right) : facet(1), _Facetvec((nullptr)), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask), _Xparent(_Right._Xparent), _Name((_Right._Name).c_str()) 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locimp_ctor(this, _Right); 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
void _Addfac(facet *_Pfacet, size_t _Id) 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locimp_Addfac(this, _Pfacet, _Id); 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static _Locimp *__cdecl _Makeloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static void __cdecl _Makewloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static void __cdecl _Makeushloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static void __cdecl _Makexloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
facet **_Facetvec; 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
size_t _Facetcount; 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
category _Catmask; 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
bool _Xparent; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Yarn< char>  _Name; 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static _Locimp *_Clocptr; 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: _Locimp &operator=(const _Locimp &) = delete;
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Elem,
  class _Traits,
  class _Alloc >
  bool operator ( ) ( const basic_string < _Elem, _Traits, _Alloc > & _Left,
   const basic_string < _Elem, _Traits, _Alloc > & _Right ) const
  {
  const auto & _Coll_fac = use_facet < :: std :: collate < _Elem >> ( * this );

  return ( _Coll_fac . compare ( _Left . c_str ( ), _Left . c_str ( ) + _Left . size ( ),
   _Right . c_str ( ), _Right . c_str ( ) + _Right . size ( ) ) < 0 );
  }
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Facet >
  locale combine ( const locale & _Loc ) const
  {
  _Facet * _Facptr;

  try {
   _Facptr = ( _Facet * ) & use_facet < _Facet > ( _Loc );
  } catch ( ... ) {
   _Xruntime_error ( "locale::combine facet missing" );
  }

  _Locimp * _Newimp = _Locimp :: _New_Locimp ( * _Ptr );
  _Newimp -> _Addfac ( _Facptr, _Facet :: id );
  _Newimp -> _Catmask = none;
  _Newimp -> _Name = "*";
  return ( locale ( _Newimp ) );
  }
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Facet >
  locale ( const locale & _Loc, const _Facet * _Facptr )
   : _Ptr ( _Locimp :: _New_Locimp ( * _Loc . _Ptr ) )
  {
  if ( _Facptr != nullptr )
   {
   _Ptr -> _Addfac ( ( _Facet * ) _Facptr, _Facet :: id );
   _Ptr -> _Catmask = none;
   _Ptr -> _Name = "*";
   }
  }
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
locale(_Uninitialized) 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
locale(const locale &_Right) noexcept : _Ptr(_Right._Ptr) 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Ptr)->_Incref(); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
locale() noexcept : _Ptr(_Init(true)) 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
locale(const locale &_Loc, const locale &_Other, category 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Cat != none) 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
try { 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other); 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Lobj._Addcats((_Loc._Ptr)->_Catmask, (_Loc.name()).c_str()); 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Lobj._Addcats((_Other._Ptr)->_Catmask, (_Other.name()).c_str()); 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
((_Ptr)->_Catmask) = (((_Loc._Ptr)->_Catmask) | ((_Other._Ptr)->_Catmask)); 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(((_Ptr)->_Name) = (_Lobj._Getname())); 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} catch (...) { 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
throw; 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: void _Construct(const string &_Str, category 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cat) 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
bool _Bad = false; 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Init(); 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Cat != none) 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
try { 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ _Locinfo _Lobj(_Cat, _Str.c_str()); 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (this->_Badname(_Lobj)) { 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Bad = true; } else 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr); 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
((_Ptr)->_Catmask) = _Cat; 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(((_Ptr)->_Name) = (_Str.c_str())); 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} catch (...) { 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
throw; 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Bad) 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Xruntime_error("bad locale name"); 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: explicit locale(const char *_Locname, category 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cat = all) : _Ptr(_Locimp::_New_Locimp()) 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Locname == (nullptr)) { 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Xruntime_error("bad locale name"); }  
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Construct(_Locname, _Cat); 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
locale(const locale &_Loc, const char *_Locname, category 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Locname == (nullptr)) { 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Xruntime_error("bad locale name"); }  
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Construct(_Locname, _Cat); 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
explicit locale(const string &_Str, category 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cat = all) : _Ptr(_Locimp::_New_Locimp()) 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Construct(_Str, _Cat); 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
locale(const locale &_Loc, const string &_Str, category 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Construct(_Str, _Cat); 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
~locale() noexcept 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ptr) != (nullptr)) { 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
delete (_Ptr)->_Decref(); }  
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
locale &operator=(const locale &_Right) noexcept 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ptr) != (_Right._Ptr)) 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Ptr) = (_Right._Ptr); 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Ptr)->_Incref(); 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return *this; 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
string name() const 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (((_Ptr) == (nullptr)) ? string() : ((_Ptr)->_Name).c_str()); 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const char *c_str() const 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return ((_Ptr) == (nullptr)) ? "" : ((_Ptr)->_Name).c_str(); 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const facet *_Getfacet(size_t _Id) const 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const facet *_Facptr = (_Id < ((_Ptr)->_Facetcount)) ? ((_Ptr)->_Facetvec)[_Id] : (nullptr); 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Facptr != (nullptr)) || (!((_Ptr)->_Xparent))) { 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Facptr; } else 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locimp *_Ptr0 = _Getgloballocale(); 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_Id < (_Ptr0->_Facetcount)) ? (_Ptr0->_Facetvec)[_Id] : (nullptr); 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
bool operator==(const locale &_Loc) const 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return ((_Ptr) == (_Loc._Ptr)) || (((this->name()).compare("*") != 0) && ((this->name()).compare(_Loc.name()) == 0)); 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
bool operator!=(const locale &_Right) const 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return !((*this) == _Right); 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const locale &__cdecl classic(); 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static locale __cdecl global(const locale &); 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static locale __cdecl empty(); 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: locale(_Locimp *_Ptrimp) : _Ptr(_Ptrimp) 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static _Locimp *__cdecl _Init(bool _Do_incref = false); 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static _Locimp *__cdecl _Getgloballocale(); 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static void __cdecl _Setgloballocale(void *); 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
bool _Badname(const _Locinfo &_Lobj) 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return ::strcmp(_Lobj._Getname(), "*") == 0; 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locimp *_Ptr; 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Facet> 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
struct _Facetptr { 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const locale::facet *_Psave; 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Facet> const locale::facet *
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Facetptr< _Facet> ::_Psave = (nullptr); 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Facet > inline
 const _Facet & __cdecl use_facet ( const locale & _Loc )

 {
 { :: std :: _Lockit _Lock ( 0 );
  const locale :: facet * _Psave =
   _Facetptr < _Facet > :: _Psave;

  const size_t _Id = _Facet :: id;
  const locale :: facet * _Pf = _Loc . _Getfacet ( _Id );

  if ( _Pf == nullptr )
   {
   if ( _Psave != nullptr )
    {
    _Pf = _Psave;
    }
   else if ( _Facet :: _Getcat ( & _Psave, & _Loc ) == static_cast < size_t > ( - 1 ) )
    {

    throw bad_cast { };



    }
   else
    {
    auto _Pfmod = const_cast < locale :: facet * > ( _Psave );
    unique_ptr < _Facet_base > _Psave_guard ( static_cast < _Facet_base * > ( _Pfmod ) );




    _Facet_Register ( _Pfmod );


    _Pfmod -> _Incref ( );
    _Facetptr < _Facet > :: _Psave = _Psave;
    _Pf = _Psave;

    ( void ) _Psave_guard . release ( );
    }
   }

  return ( static_cast < const _Facet & > ( * _Pf ) );
 }
 }
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Elem,
 class _InIt > inline
 int __cdecl _Getloctxt ( _InIt & _First, _InIt & _Last, size_t _Numfields,
  const _Elem * _Ptr )
 {
 for ( size_t _Off = 0; _Ptr [ _Off ] != ( _Elem ) 0; ++ _Off )
  if ( _Ptr [ _Off ] == _Ptr [ 0 ] )
   ++ _Numfields;
 string _Str ( _Numfields, '\000' );

 int _Ans = - 2;
 for ( size_t _Column = 1;; ++ _Column, ( void ) ++ _First, _Ans = - 1 )
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++ _Field )
   {
   while ( _Ptr [ _Off ] != ( _Elem ) 0 && _Ptr [ _Off ] != _Ptr [ 0 ] )
    {
    ++ _Off;
    }

   if ( _Str [ _Field ] != '\000' )
    {
    _Off += _Str [ _Field ];
    }
   else if ( _Ptr [ _Off += _Column ] == _Ptr [ 0 ] || _Ptr [ _Off ] == ( _Elem ) 0 )
    {
    _Str [ _Field ] = ( char ) ( _Column < 127 ? _Column : 127 );
    _Ans = ( int ) _Field;
    }
   else if ( _First == _Last || _Ptr [ _Off ] != * _First )
    {
    _Str [ _Field ] = ( char ) ( _Column < 127 ? _Column : 127 );
    }
   else
    {
    _Prefix = true;
    }
   }

  if ( ! _Prefix || _First == _Last )
   break;
  }
 return ( _Ans );
 }
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Elem > inline
 char __cdecl _Maklocbyte ( _Elem _Char,
  const _Locinfo :: _Cvtvec & )
 {
 return ( ( char ) ( unsigned char ) _Char );
 }
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> inline char __cdecl _Maklocbyte(__wchar_t _Char, const _Locinfo::_Cvtvec &
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cvt) 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
char _Byte = '\000'; 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt); 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Byte; 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> inline char __cdecl _Maklocbyte(unsigned short _Char, const _Locinfo::_Cvtvec &
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cvt) 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
char _Byte = '\000'; 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Wcrtomb(&_Byte, (__wchar_t)_Char, &_Mbst1, &_Cvt); 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Byte; 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Elem > inline
 _Elem __cdecl _Maklocchr ( char _Byte, _Elem *,
  const _Locinfo :: _Cvtvec & )
 {
 return ( ( _Elem ) ( unsigned char ) _Byte );
 }
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> inline __wchar_t __cdecl _Maklocchr(char _Byte, __wchar_t *, const _Locinfo::_Cvtvec &
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cvt) 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
__wchar_t _Wc = L'\x0'; 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt); 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Wc; 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> inline unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *, const _Locinfo::_Cvtvec &
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cvt) 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned short _Wc = ((unsigned short)0); 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mbrtowc((__wchar_t *)(&_Wc), &_Byte, 1, &_Mbst1, &_Cvt); 
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Wc; 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Elem > inline
 _Elem * __cdecl _Maklocstr ( const char * _Ptr, _Elem *,
  const _Locinfo :: _Cvtvec & )
 {
 size_t _Count = :: strlen ( _Ptr ) + 1;

 _Elem * _Ptrdest = ( _Elem * ) calloc ( _Count, sizeof ( _Elem ) );


 if ( ! _Ptrdest )
  _Xbad_alloc ( );

 for ( _Elem * _Ptrnext = _Ptrdest; 0 < _Count; -- _Count, ++ _Ptrnext, ++ _Ptr )
  * _Ptrnext = ( _Elem ) ( unsigned char ) * _Ptr;

 return ( _Ptrdest );
 }
#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> inline __wchar_t *__cdecl _Maklocstr(const char *_Ptr, __wchar_t *, const _Locinfo::_Cvtvec &
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cvt) 
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
size_t _Count, _Count1; 
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
size_t _Wchars; 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const char *_Ptr1; 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Bytes; 
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
__wchar_t _Wc; 
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Count1 = (::strlen(_Ptr) + (1)); 
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 694 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; }  }  
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Wchars; 
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
__wchar_t *_Ptrdest = (__wchar_t *)calloc(_Wchars, sizeof(__wchar_t)); 
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (!_Ptrdest) { 
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Xbad_alloc(); }  
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
__wchar_t *_Ptrnext = _Ptrdest; 
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst2 = {}; 
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; }  }  
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Ptrnext) = L'\x0'; 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Ptrdest; 
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> inline unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *, const _Locinfo::_Cvtvec &
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Cvt) 
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
size_t _Count, _Count1; 
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
size_t _Wchars; 
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const char *_Ptr1; 
#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Bytes; 
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned short _Wc; 
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Count1 = (::strlen(_Ptr) + (1)); 
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) 
#line 729 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Bytes = _Mbrtowc((__wchar_t *)(&_Wc), _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) 
#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Wchars; 
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
__wchar_t *_Ptrdest = (__wchar_t *)calloc(_Wchars, sizeof(__wchar_t)); 
#line 742 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (!_Ptrdest) 
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Xbad_alloc(); 
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
__wchar_t *_Ptrnext = _Ptrdest; 
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst2 = {}; 
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) 
#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) 
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Ptrnext) = L'\x0'; 
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (unsigned short *)_Ptrdest; 
#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
class codecvt_base : public locale::facet { 
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: enum { 
#line 770 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
ok, partial, error, noconv}; 
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef int result; 
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
codecvt_base(size_t _Refs = 0) : locale::facet(_Refs) 
#line 775 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
bool always_noconv() const noexcept 
#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_always_noconv(); 
#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int max_length() const noexcept 
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_max_length(); 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int encoding() const noexcept 
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 790 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_encoding(); 
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual ~codecvt_base() noexcept 
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 795 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: virtual bool do_always_noconv() const noexcept 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 800 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return false; 
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_max_length() const noexcept 
#line 804 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 805 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 1; 
#line 806 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_encoding() const noexcept 
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 810 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 1; 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 812 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 815 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Elem,
 class _Byte,
 class _Statype >
 class codecvt
  : public codecvt_base
 {
public :
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in ( _Statype & _State,
  const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
  _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const
  {
  return ( do_in ( _State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 ) );
  }

 result out ( _Statype & _State,
  const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  return ( do_out ( _State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 ) );
  }

 result unshift ( _Statype & _State,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  return ( do_unshift ( _State, _First2, _Last2, _Mid2 ) );
  }

 int length ( _Statype & _State, const _Byte * _First1,
  const _Byte * _Last1, size_t _Count ) const
  {
  return ( do_length ( _State, _First1, _Last1, _Count ) );
  }

  static locale :: id id;

 explicit codecvt ( size_t _Refs = 0 )
  : codecvt_base ( _Refs )
  {
  _Init ( _Locinfo ( ) );
  }

  codecvt ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : codecvt_base ( _Refs )
  {
  _Init ( _Lobj );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr,
  const locale * _Ploc = nullptr )
  {
  if ( _Ppf != nullptr && * _Ppf == nullptr )
   * _Ppf = new codecvt < _Elem, _Byte, _Statype > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 2 );
  }

protected :
 virtual ~ codecvt ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

 virtual bool do_always_noconv ( ) const noexcept
  {
  return ( is_same_v < _Byte, _Elem > );
  }

 virtual result do_in ( _Statype &,
  const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
  _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const
  {
  _Mid1 = _First1;
  _Mid2 = _First2;
  if ( is_same_v < _Byte, _Elem > )
   {
   return ( noconv );
   }


  for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++ _Mid1, ++ _Mid2 )
   {
   * _Mid2 = ( _Elem ) * _Mid1;
   }

  return ( ok );
  }

 virtual result do_out ( _Statype &,
  const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
  _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const
  {
  _Mid1 = _First1;
  _Mid2 = _First2;
  if ( is_same_v < _Byte, _Elem > )
   {
   return ( noconv );
   }


  for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++ _Mid1, ++ _Mid2 )
   {
   * _Mid2 = ( _Byte ) * _Mid1;
   }

  return ( ok );
  }

 virtual result do_unshift ( _Statype &,
  _Byte * _First2, _Byte *, _Byte * & _Mid2 ) const
  {
  _Mid2 = _First2;
  return ( ok );
  }

 virtual int do_length ( _Statype &, const _Byte * _First1,
  const _Byte * _Last1, size_t _Count ) const
  {
  return ( static_cast < int > ( _Min_value ( _Count, static_cast < size_t > ( _Last1 - _First1 ) ) ) );
  }
 };
#line 951 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Elem, class 
#line 952 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Byte, class 
#line 953 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype> locale::id 
#line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
codecvt< _Elem, _Byte, _Statype> ::id; 
#line 961 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
enum _Codecvt_mode { 
#line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Consume_header = 4, 
#line 963 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Generate_header = 2
#line 964 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 968 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> class codecvt< char16_t, char, _Mbstatet>  : public codecvt_base { 
#line 972 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: typedef std::codecvt< char16_t, char, _Mbstatet>  _Mybase; 
#line 973 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef char16_t _Elem; 
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef char _Byte; 
#line 975 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 976 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Elem intern_type; 
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Byte extern_type; 
#line 978 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Statype state_type; 
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 981 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 984 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 986 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 990 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 991 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 992 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 994 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 999 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1003 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1009 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static locale::id id; 
#line 1011 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1017 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1019 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1022 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode 
#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1029 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1032 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ploc = 0) 
#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ppf != (nullptr)) && ((*_Ppf) == (nullptr))) 
#line 1036 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Ppf) = (new std::codecvt< char16_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); 
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1040 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 2; 
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1048 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
void _Init(const _Locinfo &) 
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_in(_Statype &_State, const _Byte *
#line 1053 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1054 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1062 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned char _By = (unsigned char)(*_Mid1); 
#line 1063 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned long _Ch; 
#line 1064 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Nextra, _Nskip; 
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((*_Pstate) > 1) 
#line 1067 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_By < 128) || (192 <= _By)) 
#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::error; 
#line 1071 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)((*_Pstate) | (_By & 63))); 
#line 1076 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Pstate) = (1); 
#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
continue; 
#line 1078 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_By < 128) 
#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = _By; 
#line 1083 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 0; 
#line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1085 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_By < 192) 
#line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1087 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::error; 
#line 1089 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1090 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_By < 224) 
#line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1092 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 31)); 
#line 1093 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 1; 
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1095 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_By < 240) 
#line 1096 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 15)); 
#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 2; 
#line 1099 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_By < 248) 
#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 7)); 
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 3; 
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 3)); 
#line 1108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = ((_By < 252) ? 4 : 5); 
#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  }  }  }  }  
#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nskip = ((_Nextra < 3) ? 0 : 1); 
#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1 = _Mid1; 
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Nextra == 0) 
#line 1115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 1117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Last1 - _Mid1) < ((_Nextra + 1) - _Nskip)) 
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (++_Mid1; _Nskip < _Nextra; (--_Nextra), (++_Mid1)) 
#line 1125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (((_By = ((unsigned char)(*_Mid1))) < 128) || (192 <= _By)) 
#line 1127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::error; 
#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = ((_Ch << 6) | (_By & 63)); 
#line 1133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  }  
#line 1137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (0 < _Nskip) 
#line 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch <<= 6; 
#line 1140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((((_Maxcode) < (1114111)) ? _Maxcode : (1114111)) < _Ch) 
#line 1143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::error; 
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((65535) < _Ch) 
#line 1148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned short _Ch0 = (unsigned short)((55296) | ((_Ch >> 10) - (64))); 
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)_Ch0); 
#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Pstate) = ((unsigned short)((56320) | (_Ch & (1023)))); 
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
continue; 
#line 1155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Nskip != 0) 
#line 1158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Mid1 == _Last1) 
#line 1160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 1162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (((_By = ((unsigned char)(*(_Mid1++)))) < 128) || (192 <= _By)) 
#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1167 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::error; 
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch |= (_By & 63); 
#line 1171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((*_Pstate) == 0) 
#line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Pstate) = (1); 
#line 1177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279))) 
#line 1178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Ans == (_Mybase::partial)) 
#line 1183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Pstate) = (0); 
#line 1185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Ans; 
#line 1189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)_Ch); 
#line 1193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} }  
#line 1195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 1204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 1206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) 
#line 1207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned long _Ch; 
#line 1209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const unsigned short _Ch1 = (unsigned short)(*_Mid1); 
#line 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
bool _Save = false; 
#line 1212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (1 < (*_Pstate)) 
#line 1213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1214 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ch1 < 56320) || (57344 <= _Ch1)) { 
#line 1215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::error; }  
#line 1216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = (static_cast< unsigned long>(((*_Pstate) << 10) | (_Ch1 - 56320))); 
#line 1217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((55296 <= _Ch1) && (_Ch1 < 56320)) 
#line 1219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1220 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = (static_cast< unsigned long>(((_Ch1 - 55296) + 64) << 10)); 
#line 1221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Save = true; 
#line 1222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = _Ch1; }  }  
#line 1226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Byte _By; 
#line 1227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Nextra; 
#line 1229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Ch < (128)) 
#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_By = ((_Byte)_Ch); 
#line 1232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 0; 
#line 1233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Ch < (2048)) 
#line 1235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_By = ((_Byte)((192) | (_Ch >> 6))); 
#line 1237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 1; 
#line 1238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Ch < (65536)) 
#line 1240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_By = ((_Byte)((224) | (_Ch >> 12))); 
#line 1242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 2; 
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_By = ((_Byte)((240) | (_Ch >> 18))); 
#line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 3; 
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  }  }  
#line 1250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Nput = (_Nextra < 3) ? _Nextra + 1 : (_Save ? 1 : 3); 
#line 1252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Last2 - _Mid2) < _Nput) 
#line 1253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (((*_Pstate) == 0) && (((_Mode) & (_Generate_header)) != 0)) 
#line 1258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Last2 - _Mid2) < (3 + _Nput)) 
#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)239)); 
#line 1266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)187)); 
#line 1267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)191)); 
#line 1268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 1271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Save || (_Nextra < 3)) 
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = _By; 
#line 1274 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
--_Nput; 
#line 1275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; 0 < _Nput; --_Nput) 
#line 1278 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); 
#line 1280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Pstate) = ((unsigned short)(_Save ? _Ch >> 10 : (1))); 
#line 1283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_unshift(_Statype &_State, _Byte *
#line 1289 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *, _Byte *&_Mid2) const 
#line 1290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned short *_Pstate = (unsigned short *)(&_State); 
#line 1292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 1294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (1 < (*_Pstate)) ? _Mybase::error : _Mybase::ok; 
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
size_t _Wchars = (0); 
#line 1302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype _Mystate = _State; 
#line 1304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_Wchars < _Count) && (_First1 != _Last1)) { 
#line 1305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Byte *_Mid1; 
#line 1307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem *_Mid2; 
#line 1308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem _Ch; 
#line 1309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const auto _Result = this->do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, (&_Ch) + 1, _Mid2); 
#line 1310 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Result == (_Mybase::noconv)) 
#line 1311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Wchars += (static_cast< size_t>(_Last1 - _First1)); 
#line 1313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Result == (_Mybase::ok)) 
#line 1317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Mid2 == ((&_Ch) + 1)) 
#line 1319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Wchars; 
#line 1321 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1 = _Mid1; 
#line 1324 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
continue; 
#line 1325 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} }  
#line 1330 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return static_cast< int>(_Min_value(static_cast< size_t>(2147483647), _Wchars)); 
#line 1331 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual bool do_always_noconv() const noexcept override 
#line 1334 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return false; 
#line 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_max_length() const noexcept override 
#line 1339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (((_Mode) & (_Consume_header)) != 0) ? 9 : ((((_Mode) & (_Generate_header)) != 0) ? 7 : 6); 
#line 1343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_encoding() const noexcept override 
#line 1346 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1347 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 0; 
#line 1348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: unsigned long _Maxcode; 
#line 1352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Codecvt_mode _Mode; 
#line 1353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 1357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> class codecvt< char32_t, char, _Mbstatet>  : public codecvt_base { 
#line 1361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: typedef std::codecvt< char32_t, char, _Mbstatet>  _Mybase; 
#line 1362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef char32_t _Elem; 
#line 1363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef char _Byte; 
#line 1364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1365 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Elem intern_type; 
#line 1366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Byte extern_type; 
#line 1367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Statype state_type; 
#line 1369 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1370 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1372 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1373 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1375 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1379 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1380 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1381 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1385 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1386 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1387 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1390 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1394 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static locale::id id; 
#line 1400 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1402 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 1405 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1406 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1408 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1410 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 1412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1414 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode 
#line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1418 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 1419 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1422 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ploc = 0) 
#line 1423 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ppf != (nullptr)) && ((*_Ppf) == (nullptr))) { 
#line 1425 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Ppf) = (new std::codecvt< char32_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1427 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 2; 
#line 1428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1431 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1432 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
void _Init(const _Locinfo &) 
#line 1436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1437 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1439 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_in(_Statype &_State, const _Byte *
#line 1440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1441 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
char *_Pstate = (char *)(&_State); 
#line 1444 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 1445 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 1447 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) 
#line 1448 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned char _By = (unsigned char)(*_Mid1); 
#line 1450 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned long _Ch; 
#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Nextra; 
#line 1453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_By < 128) 
#line 1454 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1455 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = _By; 
#line 1456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 0; 
#line 1457 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_By < 192) 
#line 1459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1460 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 1461 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::error; 
#line 1462 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_By < 224) 
#line 1464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 31)); 
#line 1466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 1; 
#line 1467 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_By < 240) 
#line 1469 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1470 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 15)); 
#line 1471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 2; 
#line 1472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1473 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_By < 248) 
#line 1474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 7)); 
#line 1476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 3; 
#line 1477 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 3)); 
#line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = ((_By < 252) ? 4 : 5); 
#line 1482 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  }  }  }  }  
#line 1484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Nextra == 0) 
#line 1485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 1487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Last1 - _Mid1) < (_Nextra + 1)) 
#line 1489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1493 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (++_Mid1; 0 < _Nextra; (--_Nextra), (++_Mid1)) 
#line 1495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1496 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (((_By = ((unsigned char)(*_Mid1))) < 128) || (192 <= _By)) 
#line 1497 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::error; 
#line 1499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ch = ((_Ch << 6) | (_By & 63)); 
#line 1503 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1504 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1505 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  }  
#line 1507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((*_Pstate) == 0) 
#line 1508 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Pstate) = (1); 
#line 1511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279))) 
#line 1512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Ans == (_Mybase::partial)) 
#line 1517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1518 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Pstate) = (0); 
#line 1519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 1520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Ans; 
#line 1522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1523 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Maxcode) < _Ch) 
#line 1526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::error; 
#line 1528 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Elem)_Ch); 
#line 1531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1534 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1538 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1539 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1540 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
char *_Pstate = (char *)(&_State); 
#line 1541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 1542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 1544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) 
#line 1545 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1546 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Byte _By; 
#line 1547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Nextra; 
#line 1548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned long _Ch = (unsigned long)(*_Mid1); 
#line 1550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Maxcode) < _Ch) { 
#line 1551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::error; }  
#line 1553 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Ch < (128)) 
#line 1554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_By = ((_Byte)_Ch); 
#line 1556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 0; 
#line 1557 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1558 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Ch < (2048)) 
#line 1559 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1560 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_By = ((_Byte)((192) | (_Ch >> 6))); 
#line 1561 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 1; 
#line 1562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Ch < (65536)) 
#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_By = ((_Byte)((224) | (_Ch >> 12))); 
#line 1566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 2; 
#line 1567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1568 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Ch < (2097152)) 
#line 1569 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_By = ((_Byte)((240) | (_Ch >> 18))); 
#line 1571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 3; 
#line 1572 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Ch < (67108864)) 
#line 1574 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_By = ((_Byte)((248) | (_Ch >> 24))); 
#line 1576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 4; 
#line 1577 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1579 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1580 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_By = ((_Byte)((252) | ((_Ch >> 30) & (3)))); 
#line 1581 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Nextra = 5; 
#line 1582 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  }  }  }  }  
#line 1584 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((*_Pstate) == 0) 
#line 1585 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Pstate) = (1); 
#line 1587 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (((_Mode) & (_Generate_header)) != 0) 
#line 1588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1589 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Last2 - _Mid2) < ((3 + 1) + _Nextra)) 
#line 1590 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1591 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::partial; 
#line 1592 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)239)); 
#line 1596 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)187)); 
#line 1597 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)((unsigned char)191)); 
#line 1598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1599 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Last2 - _Mid2) < (1 + _Nextra)) 
#line 1602 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1603 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1604 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1606 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 1607 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for ((*(_Mid2++)) = _By; 0 < _Nextra;) 
#line 1608 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1609 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*(_Mid2++)) = ((_Byte)(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); 
#line 1610 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1611 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1612 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_First1 == _Mid1) ? _Mybase::partial : _Mybase::ok; 
#line 1613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1615 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_unshift(_Statype &, _Byte *
#line 1616 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *, _Byte *&_Mid2) const 
#line 1617 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 1620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Mybase::ok; 
#line 1621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1623 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1625 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
size_t _Wchars = (0); 
#line 1627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype _Mystate = _State; 
#line 1629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_Wchars < _Count) && (_First1 != _Last1)) { 
#line 1630 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Byte *_Mid1; 
#line 1632 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem *_Mid2; 
#line 1633 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem _Ch; 
#line 1634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const auto _Result = this->do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, (&_Ch) + 1, _Mid2); 
#line 1635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Result == (_Mybase::noconv)) 
#line 1636 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1637 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Wchars += (static_cast< size_t>(_Last1 - _First1)); 
#line 1638 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1639 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1641 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Result == (_Mybase::ok)) 
#line 1642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Mid2 == ((&_Ch) + 1)) 
#line 1644 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1645 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Wchars; 
#line 1646 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1648 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1 = _Mid1; 
#line 1649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
continue; 
#line 1650 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1652 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} }  
#line 1655 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return static_cast< int>(_Min_value(static_cast< size_t>(2147483647), _Wchars)); 
#line 1656 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1658 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual bool do_always_noconv() const noexcept override 
#line 1659 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1660 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return false; 
#line 1661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_max_length() const noexcept override 
#line 1664 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1665 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? 9 : 6; 
#line 1667 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1669 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_encoding() const noexcept override 
#line 1670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1671 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? -1 : 0; 
#line 1673 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1676 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: unsigned long _Maxcode; 
#line 1677 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Codecvt_mode _Mode; 
#line 1678 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 1682 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> class codecvt< __wchar_t, char, _Mbstatet>  : public codecvt_base { 
#line 1686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: typedef __wchar_t _Elem; 
#line 1687 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef char _Byte; 
#line 1688 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1689 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Elem intern_type; 
#line 1690 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Byte extern_type; 
#line 1691 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Statype state_type; 
#line 1693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1694 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1695 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1699 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1702 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1704 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1705 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1707 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1709 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1710 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1711 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1712 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1714 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1716 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1717 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1718 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1719 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1720 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1722 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static locale::id id; 
#line 1724 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1726 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1727 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1728 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 1729 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1730 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1732 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1734 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1735 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 1736 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1738 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1739 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ploc = 0) 
#line 1740 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1741 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ppf != (nullptr)) && ((*_Ppf) == (nullptr))) { 
#line 1742 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Ppf) = (new std::codecvt< __wchar_t, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 2; 
#line 1745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1749 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1750 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1752 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 1753 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1754 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 1755 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1757 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_in(_Statype &, const _Byte *
#line 1758 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1759 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1760 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1761 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype _Mystate{}; 
#line 1762 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 1763 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 1764 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 1765 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 1766 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; ;) 
#line 1767 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1768 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Mid1 == _Last1) 
#line 1769 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1770 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return ok; 
#line 1771 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1773 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Mid2 == _Last2) 
#line 1774 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return partial; 
#line 1776 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1778 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Bytes = _Mbrtowc(_Mid2, _Mid1, static_cast< size_t>(_Last1 - _Mid1), &_Mystate, &(_Cvt)); 
#line 1779 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
switch (_Bytes) 
#line 1780 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1781 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
case -2:  
#line 1782 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return partial; 
#line 1784 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
case -1:  
#line 1785 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return error; 
#line 1787 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
case 0:  
#line 1788 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Bytes = 1; 
#line 1791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
default:  
#line 1792 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 += _Bytes; 
#line 1793 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid2; 
#line 1794 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1795 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1796 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1797 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1799 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 1800 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1801 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1802 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1803 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 1804 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 1805 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 1806 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 1807 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Bytes; 
#line 1809 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) 
#line 1810 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1811 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (((int)5) <= (_Last2 - _Mid2)) 
#line 1812 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1813 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) 
#line 1815 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1816 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return error; 
#line 1817 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1819 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1820 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 1821 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 += _Bytes; 
#line 1822 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1823 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1825 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1826 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Byte _Buf[5]; 
#line 1827 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype _Stsave = _State; 
#line 1829 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) 
#line 1831 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1832 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return error; 
#line 1833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1834 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Last2 - _Mid2) < _Bytes) 
#line 1835 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1836 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_State = _Stsave; 
#line 1837 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1838 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 1840 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1841 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 1842 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 1843 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 += _Bytes; 
#line 1844 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  }  
#line 1845 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1846 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1848 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_Mid1 == _Last1) ? ok : partial; 
#line 1849 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1851 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_unshift(_Statype &_State, _Byte *
#line 1852 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1853 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1854 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 1855 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 1856 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result _Ans = (ok); 
#line 1857 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Bytes; 
#line 1858 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Byte _Buf[5]; 
#line 1859 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype _Stsave = _State; 
#line 1861 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 1862 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ans = (error); } else { 
#line 1863 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Last2 - _Mid2) < (--_Bytes)) 
#line 1864 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1865 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_State = _Stsave; 
#line 1866 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ans = (partial); 
#line 1867 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 1868 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (0 < _Bytes) 
#line 1869 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1870 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 1871 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 += _Bytes; 
#line 1872 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  }  }  
#line 1873 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Ans; 
#line 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1876 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_length(_Statype &, const _Byte *_First1, const _Byte *
#line 1877 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1879 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 1880 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
size_t _Wchars = (0); 
#line 1881 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype _Mystate{}; 
#line 1883 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_Wchars < _Count) && (_First1 != _Last1)) 
#line 1884 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1885 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem _Ch; 
#line 1886 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast< size_t>(_Last1 - _First1), &_Mystate, &(_Cvt)); 
#line 1887 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Bytes < 0) 
#line 1888 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1889 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 1890 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1892 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Bytes == 0) 
#line 1893 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1894 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Bytes = 1; 
#line 1895 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1 += _Bytes; 
#line 1899 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Wchars; 
#line 1900 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 1902 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return static_cast< int>(_Min_value(static_cast< size_t>(2147483647), _Wchars)); 
#line 1903 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1905 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual bool do_always_noconv() const noexcept override 
#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1907 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return false; 
#line 1908 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1910 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_max_length() const noexcept override 
#line 1911 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1912 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 5; 
#line 1913 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1915 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_encoding() const noexcept override 
#line 1916 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1917 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 0; 
#line 1918 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1921 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: _Locinfo::_Cvtvec _Cvt; 
#line 1922 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 1927 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> class codecvt< unsigned short, char, _Mbstatet>  : public codecvt_base { 
#line 1931 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: typedef unsigned short _Elem; 
#line 1932 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef char _Byte; 
#line 1933 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Mbstatet _Statype; 
#line 1934 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Elem intern_type; 
#line 1935 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Byte extern_type; 
#line 1936 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Statype state_type; 
#line 1938 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result in(_Statype &_State, const _Byte *
#line 1939 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 1940 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 1941 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1942 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1944 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1946 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result out(_Statype &_State, const _Elem *
#line 1947 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 1948 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1949 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1950 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1952 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1954 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result unshift(_Statype &_State, _Byte *
#line 1955 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 1956 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1957 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1959 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1961 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int length(_Statype &_State, const _Byte *_First1, const _Byte *
#line 1962 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last1, size_t _Count) const 
#line 1963 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1964 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1965 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1967 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static locale::id id; 
#line 1969 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1971 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1972 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1973 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 1974 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1975 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1977 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) 
#line 1979 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1980 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 1981 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1983 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 1984 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ploc = 0) 
#line 1985 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1986 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ppf != (nullptr)) && ((*_Ppf) == (nullptr))) { 
#line 1987 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Ppf) = (new std::codecvt< unsigned short, char, _Mbstatet> (((_Locinfo)(_Ploc->c_str())))); }  
#line 1989 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 2; 
#line 1990 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1993 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: virtual ~codecvt() noexcept 
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1995 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 1997 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 1998 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 1999 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 2000 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2002 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_in(_Statype &, const _Byte *
#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Byte *_Last1, const _Byte *&_Mid1, _Elem *
#line 2004 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Elem *_Last2, _Elem *&_Mid2) const 
#line 2005 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2006 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype _Mystate{}; 
#line 2007 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 2008 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 2009 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 2010 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 2011 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; ;) 
#line 2012 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2013 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Mid1 == _Last1) 
#line 2014 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return ok; 
#line 2016 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2018 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Mid2 == _Last2) 
#line 2019 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2020 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return partial; 
#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2023 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Bytes = _Mbrtowc(reinterpret_cast< __wchar_t *>(_Mid2), _Mid1, static_cast< size_t>(_Last1 - _Mid1), &_Mystate, &(_Cvt)); 
#line 2025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
switch (_Bytes) 
#line 2026 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2027 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
case -2:  
#line 2028 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return partial; 
#line 2030 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
case -1:  
#line 2031 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return error; 
#line 2033 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
case 0:  
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Bytes = 1; 
#line 2037 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
default:  
#line 2038 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 += _Bytes; 
#line 2039 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid2; 
#line 2040 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 2041 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2042 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2045 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_out(_Statype &_State, const _Elem *
#line 2046 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1, const _Elem *_Last1, const _Elem *&_Mid1, _Byte *
#line 2047 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 2048 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2049 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 2050 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 2051 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid1 = _First1; 
#line 2052 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 2053 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Bytes; 
#line 2055 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) 
#line 2056 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2057 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (((int)5) <= (_Last2 - _Mid2)) 
#line 2058 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2059 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) 
#line 2061 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2062 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return error; 
#line 2063 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 2065 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2066 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 2067 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 += _Bytes; 
#line 2068 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2069 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 2071 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2072 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Byte _Buf[5]; 
#line 2073 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype _Stsave = _State; 
#line 2075 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) 
#line 2077 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2078 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return error; 
#line 2079 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 2080 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Last2 - _Mid2) < _Bytes) 
#line 2081 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2082 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_State = _Stsave; 
#line 2083 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 2084 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 2086 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2087 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2088 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Mid1; 
#line 2089 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 += _Bytes; 
#line 2090 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  }  
#line 2091 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2092 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2094 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_Mid1 == _Last1) ? ok : partial; 
#line 2095 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2097 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual result do_unshift(_Statype &_State, _Byte *
#line 2098 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First2, _Byte *_Last2, _Byte *&_Mid2) const 
#line 2099 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 2101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 = _First2; 
#line 2102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
result _Ans = (ok); 
#line 2103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Bytes; 
#line 2104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Byte _Buf[5]; 
#line 2105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype _Stsave = _State; 
#line 2107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) 
#line 2108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ans = (error); 
#line 2110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 2111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Last2 - _Mid2) < (--_Bytes)) 
#line 2112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_State = _Stsave; 
#line 2114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ans = (partial); 
#line 2115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else { 
#line 2116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (0 < _Bytes) 
#line 2117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Mid2 += _Bytes; 
#line 2120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  }  }  
#line 2122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Ans; 
#line 2123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_length(_Statype &, const _Byte *_First1, const _Byte *
#line 2126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last1, size_t _Count) const 
#line 2127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 2129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
size_t _Wchars = (0); 
#line 2130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Statype _Mystate{}; 
#line 2132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_Wchars < _Count) && (_First1 != _Last1)) 
#line 2133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
__wchar_t _Ch; 
#line 2135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast< size_t>(_Last1 - _First1), &_Mystate, &(_Cvt)); 
#line 2136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Bytes < 0) 
#line 2137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
break; 
#line 2139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Bytes == 0) 
#line 2142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Bytes = 1; 
#line 2144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First1 += _Bytes; 
#line 2148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_Wchars; 
#line 2149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return static_cast< int>(_Min_value(static_cast< size_t>(2147483647), _Wchars)); 
#line 2152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual bool do_always_noconv() const noexcept override 
#line 2155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return false; 
#line 2157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_max_length() const noexcept override 
#line 2160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 5; 
#line 2162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual int do_encoding() const noexcept override 
#line 2165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 0; 
#line 2167 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: _Locinfo::_Cvtvec _Cvt; 
#line 2171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 2175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Elem,
 class _Byte,
 class _Statype >
 class codecvt_byname
  : public codecvt < _Elem, _Byte, _Statype >
 {
public :
 explicit codecvt_byname ( const char * _Locname, size_t _Refs = 0 )
  : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Locname ), _Refs )
  {
  }

 explicit codecvt_byname ( const string & _Str, size_t _Refs = 0 )
  : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Str . c_str ( ) ), _Refs )
  {
  }

protected :
 virtual ~ codecvt_byname ( ) noexcept
  {
  }
 };
#line 2199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
struct ctype_base : public locale::facet { 
#line 2203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
enum { 
#line 2204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
alnum = 263, alpha = 259, 
#line 2205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
cntrl = 32, digit = 4, graph = 279, 
#line 2206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
lower = 2, print = 471, 
#line 2207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
punct = 16, space = 72, upper = 1, 
#line 2208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
xdigit = 128, blank = 72}; 
#line 2209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef short mask; 
#line 2211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
ctype_base(size_t _Refs = 0) : locale::facet(_Refs) 
#line 2213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2214 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual ~ctype_base() noexcept 
#line 2217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 2222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Elem >
 class ctype
  : public ctype_base
 {
public :
 typedef _Elem char_type;

 bool is ( mask _Maskval, _Elem _Ch ) const
  {
  return ( do_is ( _Maskval, _Ch ) );
  }

 const _Elem * is ( const _Elem * _First, const _Elem * _Last,
  mask * _Dest ) const
  {
  return ( do_is ( _First, _Last, _Dest ) );
  }

 const _Elem * scan_is ( mask _Maskval, const _Elem * _First,
  const _Elem * _Last ) const
  {
  return ( do_scan_is ( _Maskval, _First, _Last ) );
  }

 const _Elem * scan_not ( mask _Maskval, const _Elem * _First,
  const _Elem * _Last ) const
  {
  return ( do_scan_not ( _Maskval, _First, _Last ) );
  }

 _Elem tolower ( _Elem _Ch ) const
  {
  return ( do_tolower ( _Ch ) );
  }

 const _Elem * tolower ( _Elem * _First, const _Elem * _Last ) const
  {
  return ( do_tolower ( _First, _Last ) );
  }

 _Elem toupper ( _Elem _Ch ) const
  {
  return ( do_toupper ( _Ch ) );
  }

 const _Elem * toupper ( _Elem * _First, const _Elem * _Last ) const
  {
  return ( do_toupper ( _First, _Last ) );
  }

 _Elem widen ( char _Byte ) const
  {
  return ( do_widen ( _Byte ) );
  }

 const char * widen ( const char * _First, const char * _Last,
  _Elem * _Dest ) const
  {
  return ( do_widen ( _First, _Last, _Dest ) );
  }

 char narrow ( _Elem _Ch, char _Dflt = '\000' ) const
  {
  return ( do_narrow ( _Ch, _Dflt ) );
  }

 const _Elem * narrow ( const _Elem * _First, const _Elem * _Last,
  char _Dflt, char * _Dest ) const
  {
  return ( do_narrow ( _First, _Last, _Dflt, _Dest ) );
  }

  static locale :: id id;

 explicit ctype ( size_t _Refs = 0 )
  : ctype_base ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  ctype ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : ctype_base ( _Refs )
  {
  _Init ( _Lobj );
  }

 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr,
  const locale * _Ploc = nullptr )
  {
  if ( _Ppf != nullptr && * _Ppf == nullptr )
   * _Ppf = new ctype < _Elem > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 2 );
  }

protected :
 virtual ~ ctype ( ) noexcept
  {
  if ( _Ctype . _Delfl )
   :: free ( ( void * ) _Ctype . _Table );

  :: free ( _Ctype . _LocaleName );
  }

 void _Init ( const _Locinfo & _Lobj )
  {
  _Ctype = _Lobj . _Getctype ( );
  _Cvt = _Lobj . _Getcvt ( );
  }

 virtual bool do_is ( mask _Maskval, _Elem _Ch ) const
  {
  return ( ( _Ctype . _Table [ ( unsigned char ) narrow ( _Ch ) ]
   & _Maskval ) != 0 );
  }

 virtual const _Elem * do_is ( const _Elem * _First, const _Elem * _Last,
  mask * _Dest ) const
  {
  _Adl_verify_range ( _First, _Last );
  for (; _First != _Last; ++ _First, ++ _Dest )
   {
   * _Dest = _Ctype . _Table [ ( unsigned char ) narrow ( * _First ) ];
   }

  return ( _First );
  }

 virtual const _Elem * do_scan_is ( mask _Maskval,
  const _Elem * _First, const _Elem * _Last ) const
  {
  _Adl_verify_range ( _First, _Last );
  while ( _First != _Last && ! is ( _Maskval, * _First ) )
   {
   ++ _First;
   }

  return ( _First );
  }

 virtual const _Elem * do_scan_not ( mask _Maskval,
  const _Elem * _First, const _Elem * _Last ) const
  {
  _Adl_verify_range ( _First, _Last );
  while ( _First != _Last && is ( _Maskval, * _First ) )
   {
   ++ _First;
   }

  return ( _First );
  }

 virtual _Elem do_tolower ( _Elem _Ch ) const
  {
  unsigned char _Byte = ( unsigned char ) narrow ( _Ch, '\000' );
  if ( _Byte == '\000' )
   {
   return ( _Ch );
   }

  return ( widen ( ( char ) _Tolower ( _Byte, & _Ctype ) ) );
  }

 virtual const _Elem * do_tolower ( _Elem * _First,
  const _Elem * _Last ) const
  {
  _Adl_verify_range ( ( const _Elem * ) _First, _Last );
  for (; _First != _Last; ++ _First )
   {
   unsigned char _Byte = ( unsigned char ) narrow ( * _First, '\000' );
   if ( _Byte != '\000' )
    {
    * _First = ( widen ( ( char ) _Tolower ( _Byte, & _Ctype ) ) );
    }
   }
  return ( ( const _Elem * ) _First );
  }

 virtual _Elem do_toupper ( _Elem _Ch ) const
  {
  unsigned char _Byte = ( unsigned char ) narrow ( _Ch, '\000' );
  if ( _Byte == '\000' )
   {
   return ( _Ch );
   }

  return ( widen ( ( char ) _Toupper ( _Byte, & _Ctype ) ) );
  }

 virtual const _Elem * do_toupper ( _Elem * _First,
  const _Elem * _Last ) const
  {
  _Adl_verify_range ( ( const _Elem * ) _First, _Last );
  for (; _First != _Last; ++ _First )
   {
   unsigned char _Byte = ( unsigned char ) narrow ( * _First, '\000' );
   if ( _Byte != '\000' )
    {
    * _First = ( widen ( ( char ) _Toupper ( _Byte, & _Ctype ) ) );
    }
   }

  return ( ( const _Elem * ) _First );
  }

 virtual _Elem do_widen ( char _Byte ) const
  {
  return ( _Maklocchr ( _Byte, static_cast < _Elem * > ( nullptr ), _Cvt ) );
  }

 virtual const char * do_widen ( const char * _First,
  const char * _Last, _Elem * _Dest ) const
  {
  _Adl_verify_range ( _First, _Last );
  for (; _First != _Last; ++ _First, ++ _Dest )
   {
   * _Dest = _Maklocchr ( * _First, static_cast < _Elem * > ( nullptr ), _Cvt );
   }

  return ( _First );
  }

 char _Donarrow ( _Elem _Ch, char _Dflt ) const
  {
  char _Byte;
  if ( _Ch == ( _Elem ) 0 )
   {
   return ( '\000' );
   }

  if ( ( _Byte = _Maklocbyte ( _Ch, _Cvt ) ) == '\000' )
   {
   return ( _Dflt );
   }

  return ( _Byte );
  }

 virtual char do_narrow ( _Elem _Ch, char _Dflt ) const
  {
  return ( _Donarrow ( _Ch, _Dflt ) );
  }

 virtual const _Elem * do_narrow ( const _Elem * _First,
  const _Elem * _Last, char _Dflt, char * _Dest ) const
  {
  _Adl_verify_range ( _First, _Last );
  for (; _First != _Last; ++ _First, ++ _Dest )
   {
   * _Dest = _Donarrow ( * _First, _Dflt );
   }

  return ( _First );
  }

private :
 _Locinfo :: _Ctypevec _Ctype;
 _Locinfo :: _Cvtvec _Cvt;
 };
#line 2490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template< class _Elem> locale::id 
#line 2491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
ctype< _Elem> ::id; 
#line 2499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> class ctype< char>  : public ctype_base { 
#line 2503 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: typedef char _Elem; 
#line 2504 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Elem char_type; 
#line 2506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const 
#line 2507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2508 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return ((((_Ctype)._Table)[(unsigned char)_Ch]) & _Maskval) != 0; 
#line 2509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *
#line 2512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last, mask *_Dest) const 
#line 2513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Dest) = (((_Ctype)._Table)[(unsigned char)(*_First)]); }  
#line 2517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 2518 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *
#line 2521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2523 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_First != _Last) && (!this->is(_Maskval, *_First))) 
#line 2525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_First; 
#line 2527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 2530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *
#line 2533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2534 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_First != _Last) && this->is(_Maskval, *_First)) 
#line 2537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2538 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_First; 
#line 2539 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 2542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem tolower(_Elem _Ch) const 
#line 2545 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2546 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 2547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 2552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem toupper(_Elem _Ch) const 
#line 2555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 2557 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2559 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2560 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2561 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 2562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem widen(char _Byte) const 
#line 2565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_widen(_Byte); 
#line 2567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2569 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *widen(const char *_First, const char *_Last, _Elem *
#line 2570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Dest) const 
#line 2571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2572 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 2573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2577 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 2578 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2580 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2581 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Dflt, char *_Dest) const 
#line 2582 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2583 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2584 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static locale::id id; 
#line 2588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
explicit ctype(const mask *_Table = 0, bool 
#line 2589 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Deletetable = false, size_t 
#line 2590 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Refs = 0) : ctype_base(_Refs) 
#line 2592 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2594 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 2595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2597 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Tidy(); 
#line 2598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (_Table != (nullptr)) 
#line 2599 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2600 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
((_Ctype)._Table) = _Table; 
#line 2601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
((_Ctype)._Delfl) = (_Deletetable ? -1 : 0); 
#line 2602 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} else 
#line 2604 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2605 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
((_Ctype)._Table) = classic_table(); 
#line 2606 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
((_Ctype)._Delfl) = 0; 
#line 2607 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2608 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2610 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2612 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 2614 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2616 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2617 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ploc = 0) 
#line 2618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2619 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ppf != (nullptr)) && ((*_Ppf) == (nullptr))) { 
#line 2620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Ppf) = (new std::ctype< char> (((_Locinfo)(_Ploc->c_str())))); }  
#line 2622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 2; 
#line 2623 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2625 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const mask *table() const noexcept 
#line 2626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_Ctype)._Table; 
#line 2628 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2630 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const mask *__cdecl classic_table() noexcept 
#line 2631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2632 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return ::std::use_facet< std::ctype< char> > (locale::classic()).table(); 
#line 2633 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static const size_t table_size = (1 << 8); 
#line 2639 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: virtual ~ctype() noexcept 
#line 2640 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2641 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Tidy(); 
#line 2642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2644 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 2645 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2646 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 2647 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
void _Tidy() 
#line 2650 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2651 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (0 < ((_Ctype)._Delfl)) { 
#line 2652 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::free((void *)((_Ctype)._Table)); } else { 
#line 2653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if (((_Ctype)._Delfl) < 0) { 
#line 2654 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
delete [] ((_Ctype)._Table); }  }  
#line 2656 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 2657 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2659 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2660 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_Elem)_Tolower((unsigned char)_Ch, &(_Ctype)); 
#line 2662 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2664 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2665 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last) const 
#line 2666 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2667 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range((const _Elem *)_First, _Last); 
#line 2668 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; ++_First) 
#line 2669 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_First) = ((_Elem)_Tolower((unsigned char)(*_First), &(_Ctype))); 
#line 2671 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2673 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (const _Elem *)_First; 
#line 2674 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2676 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2677 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2678 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_Elem)_Toupper((unsigned char)_Ch, &(_Ctype)); 
#line 2679 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2681 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2682 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last) const 
#line 2683 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2684 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range((const _Elem *)_First, _Last); 
#line 2685 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; ++_First) 
#line 2686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2687 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_First) = ((_Elem)_Toupper((unsigned char)(*_First), &(_Ctype))); 
#line 2688 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2690 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (const _Elem *)_First; 
#line 2691 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const 
#line 2694 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2695 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Byte; 
#line 2696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2698 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_widen(const char *_First, const char *
#line 2699 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last, _Elem *_Dest) const 
#line 2700 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2701 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2702 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::memcpy(_Dest, _First, static_cast< size_t>(_Last - _First)); 
#line 2703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Last; 
#line 2704 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2706 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Elem do_narrow(_Elem _Ch, char) const 
#line 2707 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2708 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Ch; 
#line 2709 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2711 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 2712 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last, char, char *_Dest) const 
#line 2713 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2714 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2715 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::memcpy(_Dest, _First, static_cast< size_t>(_Last - _First)); 
#line 2716 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Last; 
#line 2717 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2720 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 2721 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 2725 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> class ctype< __wchar_t>  : public ctype_base { 
#line 2729 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: typedef __wchar_t _Elem; 
#line 2730 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Elem char_type; 
#line 2732 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const 
#line 2733 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2734 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_is(_Maskval, _Ch); 
#line 2735 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2737 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2738 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Dest) const 
#line 2739 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2740 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_is(_First, _Last, _Dest); 
#line 2741 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2743 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last) const 
#line 2745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2746 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2747 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2749 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2750 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last) const 
#line 2751 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2752 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2753 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2755 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem tolower(_Elem _Ch) const 
#line 2756 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2757 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 2758 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2760 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 2761 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2762 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 2763 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2765 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem toupper(_Elem _Ch) const 
#line 2766 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2767 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 2768 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2770 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 2771 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2772 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 2773 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2775 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem widen(char _Byte) const 
#line 2776 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2777 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_widen(_Byte); 
#line 2778 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2780 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const char *widen(const char *_First, const char *_Last, _Elem *
#line 2781 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Dest) const 
#line 2782 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2783 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 2784 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2786 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
char narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 2787 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2788 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 2789 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 2792 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Dflt, char *_Dest) const 
#line 2793 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2794 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2795 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2797 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static locale::id id; 
#line 2799 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) 
#line 2801 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2802 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2803 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 2804 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2805 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2807 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 2809 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2810 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 2811 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2813 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 2814 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ploc = 0) 
#line 2815 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2816 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ppf != (nullptr)) && ((*_Ppf) == (nullptr))) 
#line 2817 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2818 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Ppf) = (new std::ctype< __wchar_t> (((_Locinfo)(_Ploc->c_str())))); 
#line 2819 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2821 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 2; 
#line 2822 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2825 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: virtual ~ctype() noexcept 
#line 2826 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2827 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ctype)._Delfl) { 
#line 2828 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::free((void *)((_Ctype)._Table)); }  
#line 2830 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 2831 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 2834 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2835 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 2836 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 2837 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2839 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual bool do_is(mask _Maskval, _Elem _Ch) const 
#line 2840 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2841 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 2842 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2844 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_is(const _Elem *_First, const _Elem *
#line 2845 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last, mask *_Dest) const 
#line 2846 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2847 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2848 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return ::_Getwctypes(_First, _Last, _Dest, &(_Ctype)); 
#line 2849 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2851 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *
#line 2852 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2853 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2854 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2855 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_First != _Last) && (!this->is(_Maskval, *_First))) 
#line 2856 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2857 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_First; 
#line 2858 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2860 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 2861 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2863 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *
#line 2864 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 2865 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2866 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2867 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_First != _Last) && this->is(_Maskval, *_First)) 
#line 2868 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2869 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_First; 
#line 2870 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2872 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 2873 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2875 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const 
#line 2876 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2877 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Towlower(_Ch, &(_Ctype)); 
#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2880 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2881 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last) const 
#line 2882 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2883 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range((const _Elem *)_First, _Last); 
#line 2884 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; ++_First) 
#line 2885 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2886 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_First) = _Towlower(*_First, &(_Ctype)); 
#line 2887 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2889 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (const _Elem *)_First; 
#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2892 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const 
#line 2893 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2894 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Towupper(_Ch, &(_Ctype)); 
#line 2895 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2897 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last) const 
#line 2899 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2900 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range((const _Elem *)_First, _Last); 
#line 2901 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; ++_First) 
#line 2902 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2903 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_First) = _Towupper(*_First, &(_Ctype)); 
#line 2904 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (const _Elem *)_First; 
#line 2907 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2909 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem _Dowiden(char _Byte) const 
#line 2910 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2912 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
__wchar_t _Wc; 
#line 2913 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? (__wchar_t)((wint_t)65535) : _Wc; 
#line 2915 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2917 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const 
#line 2918 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2919 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->_Dowiden(_Byte); 
#line 2920 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2922 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const char *do_widen(const char *_First, const char *
#line 2923 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last, _Elem *_Dest) const 
#line 2924 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2925 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2926 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) 
#line 2927 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2928 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Dest) = this->_Dowiden(*_First); 
#line 2929 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2931 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 2932 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2934 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
char _Donarrow(_Elem _Ch, char _Dflt) const 
#line 2935 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2936 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
char _Buf[5]; 
#line 2937 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2938 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : (_Buf[0]); 
#line 2940 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2942 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual char do_narrow(_Elem _Ch, char _Dflt) const 
#line 2943 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2944 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->_Donarrow(_Ch, _Dflt); 
#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2947 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 2948 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last, char _Dflt, char *_Dest) const 
#line 2949 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2950 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2951 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) 
#line 2952 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2953 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Dest) = this->_Donarrow(*_First, _Dflt); 
#line 2954 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 2956 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 2957 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2960 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 2961 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locinfo::_Cvtvec _Cvt; 
#line 2962 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 2967 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> class ctype< unsigned short>  : public ctype_base { 
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: typedef unsigned short _Elem; 
#line 2972 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
typedef _Elem char_type; 
#line 2974 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const 
#line 2975 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2976 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_is(_Maskval, _Ch); 
#line 2977 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2979 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2980 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Dest) const 
#line 2981 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2982 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_is(_First, _Last, _Dest); 
#line 2983 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2985 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2986 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last) const 
#line 2987 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2988 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2989 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2991 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2992 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last) const 
#line 2993 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2994 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2995 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 2997 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem tolower(_Elem _Ch) const 
#line 2998 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 2999 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 3000 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3002 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *tolower(_Elem *_First, const _Elem *_Last) const 
#line 3003 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3004 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 3005 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3007 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem toupper(_Elem _Ch) const 
#line 3008 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3009 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 3010 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3012 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *toupper(_Elem *_First, const _Elem *_Last) const 
#line 3013 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3014 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 3015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3017 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem widen(char _Byte) const 
#line 3018 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3019 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_widen(_Byte); 
#line 3020 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3022 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const char *widen(const char *_First, const char *_Last, _Elem *
#line 3023 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Dest) const 
#line 3024 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 3026 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3028 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
char narrow(_Elem _Ch, char _Dflt = '\000') const 
#line 3029 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3030 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 3031 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3033 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char 
#line 3034 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Dflt, char *_Dest) const 
#line 3035 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3036 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 3037 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3039 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static locale::id id; 
#line 3041 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) 
#line 3043 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3044 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 3045 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 3046 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3047 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3049 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) 
#line 3051 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3052 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
this->_Init(_Lobj); 
#line 3053 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3055 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *
#line 3056 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Ploc = 0) 
#line 3057 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3058 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ppf != (nullptr)) && ((*_Ppf) == (nullptr))) 
#line 3059 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3060 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Ppf) = (new std::ctype< unsigned short> (((_Locinfo)(_Ploc->c_str())))); 
#line 3061 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 3063 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return 2; 
#line 3064 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3067 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: virtual ~ctype() noexcept 
#line 3068 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3069 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
if ((_Ctype)._Delfl) { 
#line 3070 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::free((void *)((_Ctype)._Table)); }  
#line 3072 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 3073 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3075 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) 
#line 3076 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3077 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 3078 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 3079 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3081 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual bool do_is(mask _Maskval, _Elem _Ch) const 
#line 3082 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3083 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 3084 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3086 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_is(const _Elem *_First, const _Elem *
#line 3087 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last, mask *_Dest) const 
#line 3088 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3089 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3090 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (const _Elem *)::_Getwctypes((const __wchar_t *)_First, (const __wchar_t *)_Last, _Dest, &(_Ctype)); 
#line 3092 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3094 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *
#line 3095 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 3096 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3097 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3098 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_First != _Last) && (!this->is(_Maskval, *_First))) 
#line 3099 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_First; 
#line 3101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 3103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 3104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *
#line 3107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_First, const _Elem *_Last) const 
#line 3108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
while ((_First != _Last) && this->is(_Maskval, *_First)) 
#line 3111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
++_First; 
#line 3113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 3115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 3116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const 
#line 3119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Towlower(_Ch, &(_Ctype)); 
#line 3121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 3124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last) const 
#line 3125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range((const _Elem *)_First, _Last); 
#line 3127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; ++_First) 
#line 3128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_First) = (_Towlower(*_First, &(_Ctype))); 
#line 3130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 3132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (const _Elem *)_First; 
#line 3133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const 
#line 3136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _Towupper(_Ch, &(_Ctype)); 
#line 3138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 3141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last) const 
#line 3142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range((const _Elem *)_First, _Last); 
#line 3144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; ++_First) 
#line 3145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_First) = (_Towupper(*_First, &(_Ctype))); 
#line 3147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 3149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (const _Elem *)_First; 
#line 3150 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Elem _Dowiden(char _Byte) const 
#line 3153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 3155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
unsigned short _Wc; 
#line 3156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_Mbrtowc((__wchar_t *)(&_Wc), &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? (unsigned short)((wint_t)65535) : _Wc; 
#line 3158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const 
#line 3161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->_Dowiden(_Byte); 
#line 3163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const char *do_widen(const char *_First, const char *
#line 3166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last, _Elem *_Dest) const 
#line 3167 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3169 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) 
#line 3170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Dest) = this->_Dowiden(*_First); 
#line 3172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 3174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 3175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
char _Donarrow(_Elem _Ch, char _Dflt) const 
#line 3178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
char _Buf[5]; 
#line 3180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 3181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : (_Buf[0]); 
#line 3183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual char do_narrow(_Elem _Ch, char _Dflt) const 
#line 3186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return this->_Donarrow(_Ch, _Dflt); 
#line 3188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *
#line 3191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Last, char _Dflt, char *_Dest) const 
#line 3192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) 
#line 3195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
(*_Dest) = this->_Donarrow(*_First, _Dflt); 
#line 3197 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}  
#line 3199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
return _First; 
#line 3200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 3204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
_Locinfo::_Cvtvec _Cvt; 
#line 3205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 3209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template < class _Elem >
 class ctype_byname
 : public ctype < _Elem >
 {
public :
 explicit ctype_byname ( const char * _Locname, size_t _Refs = 0 )
  : ctype < _Elem > ( _Locinfo ( _Locname ), _Refs )
  {
  }

 explicit ctype_byname ( const string & _Str, size_t _Refs = 0 )
  : ctype < _Elem > ( _Locinfo ( _Str . c_str ( ) ), _Refs )
  {
  }

protected :
 virtual ~ ctype_byname ( ) noexcept
  {
  }
 };
#line 3232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
template<> class ctype_byname< char>  : public ctype< char>  { 
#line 3236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
public: explicit ctype_byname(const char *_Locname, size_t _Refs = 0) : std::ctype< char> (((_Locinfo)(_Locname)), _Refs) 
#line 3238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
explicit ctype_byname(const string &_Str, size_t _Refs = 0) : std::ctype< char> (((_Locinfo)(_Str.c_str())), _Refs) 
#line 3243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
protected: virtual ~ctype_byname() noexcept 
#line 3248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
{ 
#line 3249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
} 
#line 3250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}; 
#line 3258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}
#line 3261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
#pragma warning(pop)
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
struct once_flag { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
constexpr once_flag() noexcept : _Opaque((nullptr)) 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
{ 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
} 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
once_flag(const once_flag &) = delete;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
once_flag &operator=(const once_flag &) = delete;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
void *_Opaque; 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
}; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
typedef int (__stdcall *_Execute_once_fp_t)(void *, void *, void **); 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
int __cdecl _Execute_once(once_flag & _Flag, _Execute_once_fp_t _Callback, void * _Pv) noexcept; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
}
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
enum class errc { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
address_family_not_supported = 102, 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
address_in_use = 100, 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
address_not_available, 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
already_connected = 113, 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
argument_list_too_long = 7, 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
argument_out_of_domain = 33, 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
bad_address = 14, 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
bad_file_descriptor = 9, 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
bad_message = 104, 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
broken_pipe = 32, 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
connection_aborted = 106, 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
connection_already_in_progress = 103, 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
connection_refused = 107, 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
connection_reset, 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
cross_device_link = 18, 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
destination_address_required = 109, 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
device_or_resource_busy = 16, 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
directory_not_empty = 41, 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
executable_format_error = 8, 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
file_exists = 17, 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
file_too_large = 27, 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
filename_too_long = 38, 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
function_not_supported = 40, 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
host_unreachable = 110, 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
identifier_removed, 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
illegal_byte_sequence = 42, 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
inappropriate_io_control_operation = 25, 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
interrupted = 4, 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
invalid_argument = 22, 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
invalid_seek = 29, 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
io_error = 5, 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
is_a_directory = 21, 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
message_size = 115, 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
network_down, 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
network_reset, 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
network_unreachable, 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_buffer_space, 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_child_process = 10, 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_link = 121, 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_lock_available = 39, 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_message_available = 120, 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_message = 122, 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_protocol_option, 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_space_on_device = 28, 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_stream_resources = 124, 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_such_device_or_address = 6, 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_such_device = 19, 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_such_file_or_directory = 2, 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
no_such_process, 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
not_a_directory = 20, 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
not_a_socket = 128, 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
not_a_stream = 125, 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
not_connected, 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
not_enough_memory = 12, 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
not_supported = 129, 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
operation_canceled = 105, 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
operation_in_progress = 112, 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
operation_not_permitted = 1, 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
operation_not_supported = 130, 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
operation_would_block = 140, 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
owner_dead = 133, 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
permission_denied = 13, 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
protocol_error = 134, 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
protocol_not_supported, 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
read_only_file_system = 30, 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
resource_deadlock_would_occur = 36, 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
resource_unavailable_try_again = 11, 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
result_out_of_range = 34, 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
state_not_recoverable = 127, 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
stream_timeout = 137, 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
text_file_busy = 139, 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
timed_out = 138, 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
too_many_files_open_in_system = 23, 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
too_many_files_open, 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
too_many_links = 31, 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
too_many_symbolic_link_levels = 114, 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
value_too_large = 132, 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
wrong_protocol_type = 136
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
}; 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
}
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
namespace std { 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
enum class io_errc { 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
stream = 1
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template< class _Enum> 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
struct is_error_code_enum : public false_type { 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template<> struct is_error_code_enum< io_errc>  : public true_type { 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template< class _Ty> constexpr bool 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
is_error_code_enum_v = (is_error_code_enum< _Ty> ::value); 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template< class _Enum> 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
struct is_error_condition_enum : public false_type { 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template<> struct is_error_condition_enum< errc>  : public true_type { 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template< class _Ty> constexpr bool 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
is_error_condition_enum_v = (is_error_condition_enum< _Ty> ::value); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class error_code; 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class error_condition; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_code make_error_code(errc) noexcept; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_code make_error_code(io_errc) noexcept; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_condition make_error_condition(errc) noexcept; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_condition make_error_condition(io_errc) noexcept; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class error_category; 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline const error_category &generic_category() noexcept; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline const error_category &iostream_category() noexcept; 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline const error_category &system_category() noexcept; 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class __declspec(novtable) error_category { 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
public: error_category() noexcept 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Addr) = (reinterpret_cast< uintptr_t>(this)); 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
virtual ~error_category() noexcept 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
virtual const char *name() const noexcept = 0; 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
virtual string message(int _Errval) const = 0; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline virtual error_condition default_error_condition(int _Errval) const noexcept; 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline virtual bool equivalent(int _Errval, const error_condition & _Cond) const noexcept; 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline virtual bool equivalent(const error_code & _Code, int _Errval) const noexcept; 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
bool operator==(const error_category &_Right) const noexcept 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return (_Addr) == (_Right._Addr); 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
bool operator!=(const error_category &_Right) const noexcept 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return !((*this) == _Right); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
bool operator<(const error_category &_Right) const noexcept 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return (_Addr) < (_Right._Addr); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
error_category(const error_category &) = delete;
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
error_category &operator=(const error_category &) = delete;
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
protected: uintptr_t _Addr; 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
enum: uintptr_t { 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
_Future_addr = 1Ui64, 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
_Generic_addr = 3Ui64, 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
_Iostream_addr = 5Ui64, 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
_System_addr = 7Ui64
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class error_code { 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
public: error_code() noexcept : _Myval(0), _Mycat(&system_category()) 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
error_code(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template < class _Enum,
  enable_if_t < is_error_code_enum_v < _Enum >, int > = 0 >
  error_code ( _Enum _Errcode ) noexcept
  : _Myval ( 0 ),
  _Mycat ( nullptr )
  {
  * this = make_error_code ( _Errcode );
  }
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
void assign(int _Val, const error_category &_Cat) noexcept 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Myval) = _Val; 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Mycat) = (&_Cat); 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template < class _Enum,
  enable_if_t < is_error_code_enum_v < _Enum >, int > = 0 >
  error_code & operator = ( _Enum _Errcode ) noexcept
  {
  * this = make_error_code ( _Errcode );
  return ( * this );
  }
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
void clear() noexcept 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Myval) = 0; 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Mycat) = (&system_category()); 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
int value() const noexcept 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Myval; 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
const error_category &category() const noexcept 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return *(_Mycat); 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_condition default_error_condition() const noexcept; 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
string message() const 
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return this->category().message(this->value()); 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
explicit operator bool() const noexcept 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return this->value() != 0; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
private: int _Myval; 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
const error_category *_Mycat; 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class error_condition { 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
public: error_condition() noexcept : _Myval(0), _Mycat(&generic_category()) 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
error_condition(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template < class _Enum,
  enable_if_t < is_error_condition_enum_v < _Enum >, int > = 0 >
  error_condition ( _Enum _Errcode ) noexcept
  : _Myval ( 0 ),
  _Mycat ( nullptr )
  {
  * this = make_error_condition ( _Errcode );
  }
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
void assign(int _Val, const error_category &_Cat) noexcept 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Myval) = _Val; 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Mycat) = (&_Cat); 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template < class _Enum,
  enable_if_t < is_error_condition_enum_v < _Enum >, int > = 0 >
  error_condition & operator = ( _Enum _Errcode ) noexcept
  {
  * this = make_error_condition ( _Errcode );
  return ( * this );
  }
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
void clear() noexcept 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Myval) = 0; 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Mycat) = (&generic_category()); 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
int value() const noexcept 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Myval; 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
const error_category &category() const noexcept 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return *(_Mycat); 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
string message() const 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return this->category().message(this->value()); 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
explicit operator bool() const noexcept 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return this->value() != 0; 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
private: int _Myval; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
const error_category *_Mycat; 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool operator==(const error_code &_Left, const error_code &_Right) noexcept 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool operator==(const error_code &_Left, const error_condition &_Right) noexcept 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Left.category().equivalent(_Left.value(), _Right) || _Right.category().equivalent(_Left, _Right.value()); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool operator==(const error_condition &_Left, const error_code &_Right) noexcept 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Right.category().equivalent(_Right.value(), _Left) || _Left.category().equivalent(_Right, _Left.value()); 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool operator==(const error_condition &_Left, const error_condition &_Right) noexcept 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool operator!=(const error_code &_Left, const error_code &_Right) noexcept 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return !((_Left == _Right)); 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool operator!=(const error_code &_Left, const error_condition &_Right) noexcept 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return !((_Left == _Right)); 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool operator!=(const error_condition &_Left, const error_code &_Right) noexcept 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return !((_Left == _Right)); 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool operator!=(const error_condition &_Left, const error_condition &_Right) noexcept 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return !((_Left == _Right)); 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool operator<(const error_code &_Left, const error_code &_Right) noexcept 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool operator<(const error_condition &_Left, const error_condition &_Right) noexcept 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_condition error_category::default_error_condition(int _Errval) const noexcept 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return error_condition(_Errval, *this); 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool error_category::equivalent(int _Errval, const error_condition &_Cond) const noexcept 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return ((this->default_error_condition(_Errval)) == _Cond); 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline bool error_category::equivalent(const error_code &_Code, int _Errval) const noexcept 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return ((*this) == (_Code.category())) && (_Code.value() == _Errval); 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_condition error_code::default_error_condition() const noexcept 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return this->category().default_error_condition(this->value()); 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_code make_error_code(errc _Errno) noexcept 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return error_code((int)_Errno, generic_category()); 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_code make_error_code(io_errc _Errno) noexcept 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return error_code((int)_Errno, iostream_category()); 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_condition make_error_condition(errc _Errno) noexcept 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return error_condition((int)_Errno, generic_category()); 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline error_condition make_error_condition(io_errc _Errno) noexcept 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return error_condition((int)_Errno, iostream_category()); 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template<> struct hash< error_code>  { 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
typedef error_code argument_type; 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
typedef size_t result_type; 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
size_t operator()(const error_code &_Keyval) const noexcept 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return std::hash< int> {}(_Keyval.value()); 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template<> struct hash< error_condition>  { 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
typedef error_condition argument_type; 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
typedef size_t result_type; 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
size_t operator()(const error_condition &_Keyval) const noexcept 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return std::hash< int> {}(_Keyval.value()); 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class _System_error : public runtime_error { 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
static string _Makestr(error_code _Errcode, string _Message) 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
if (!_Message.empty()) 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
_Message.append(": "); 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}  
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
_Message.append(_Errcode.message()); 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Message; 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
protected: _System_error(error_code _Errcode, const string &_Message) : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
error_code _Mycode; 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class system_error : public _System_error { 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
typedef _System_error _Mybase; 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
public: system_error(error_code _Errcode) : _Mybase(_Errcode, "") 
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
system_error(error_code _Errcode, const string &_Message) : _Mybase(_Errcode, _Message) 
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
system_error(error_code _Errcode, const char *_Message) : _Mybase(_Errcode, _Message) 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat) : _Mybase(error_code(_Errval, _Errcat), "") 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat, const string &_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat, const char *_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
const error_code &code() const noexcept 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Mycode; 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
const char *__cdecl _Syserror_map(int); 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
int __cdecl _Winerror_map(int); 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
unsigned long __cdecl _Winerror_message(unsigned long _Message_id, char * _Narrow, unsigned long _Size); 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class _Generic_error_category : public error_category { 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
public: _Generic_error_category() noexcept 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Addr) = (_Generic_addr); 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
virtual const char *name() const noexcept override 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return "generic"; 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
virtual string message(int _Errcode) const override 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Syserror_map(_Errcode); 
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class _Iostream_error_category : public _Generic_error_category { 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
public: _Iostream_error_category() noexcept 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Addr) = (_Iostream_addr); 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
virtual const char *name() const noexcept override 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return "iostream"; 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
virtual string message(int _Errcode) const override 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
if (_Errcode == ((int)io_errc::stream)) 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return "iostream stream error"; 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} else 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return this->_Generic_error_category::message(_Errcode); 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}  
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
class _System_error_category : public error_category { 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
public: _System_error_category() noexcept 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Addr) = (_System_addr); 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
virtual const char *name() const noexcept override 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return "system"; 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
virtual string message(int _Errcode) const override 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
const unsigned long _Size = (32767); 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
string _Narrow(_Size, '\000'); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
const unsigned long _Val = _Winerror_message(static_cast< unsigned long>(_Errcode), &_Narrow[0], _Size); 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
if (_Val == (0)) 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
(_Narrow = ("unknown error")); 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} else 
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
_Narrow.resize(_Val); 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}  
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
_Narrow.shrink_to_fit(); 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Narrow; 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
virtual error_condition default_error_condition(int _Errval) const noexcept override 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
const int _Posv = _Winerror_map(_Errval); 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
if (_Posv == 0) 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return error_condition(_Errval, system_category()); 
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} else 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return error_condition(_Posv, generic_category()); 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}  
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}; 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template < class _Ty > inline
 int __stdcall _Immortalize_impl ( void *, void * _Storage_ptr, void * * ) noexcept
 {
 :: new ( _Storage_ptr ) _Ty ( );
 return ( 1 );
 }
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
template < class _Ty > inline
 _Ty & _Immortalize ( )
 {
 static_assert ( sizeof ( void * ) == sizeof ( once_flag ), "TRANSITION, VSO#406237" );
 static_assert ( alignof ( void * ) == alignof ( once_flag ), "TRANSITION, VSO#406237" );
 static void * _Flag = nullptr;
 static aligned_union_t < 1, _Ty > _Storage;
 if ( _Execute_once ( reinterpret_cast < once_flag & > ( _Flag ), _Immortalize_impl < _Ty >, & _Storage ) == 0 )
  {
  :: std :: terminate ( );
  }

 return ( reinterpret_cast < _Ty & > ( _Storage ) );
 }
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline const error_category &generic_category() noexcept 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Immortalize< _Generic_error_category> (); 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline const error_category &iostream_category() noexcept 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Immortalize< _Iostream_error_category> (); 
#line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
inline const error_category &system_category() noexcept 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
{ 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
return _Immortalize< _System_error_category> (); 
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
} 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
}
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
namespace std { 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
class _Iosb { 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
public: enum _Dummy_enum { _Dummy_enum_val = 1}; 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
enum _Fmtflags { 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Fmtmask = 65535, _Fmtzero = 0}; 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags skipws = ((_Fmtflags)1); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags unitbuf = ((_Fmtflags)2); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags uppercase = ((_Fmtflags)4); 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags showbase = ((_Fmtflags)8); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags showpoint = ((_Fmtflags)16); 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags showpos = ((_Fmtflags)32); 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags left = ((_Fmtflags)64); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags right = ((_Fmtflags)128); 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags internal = ((_Fmtflags)256); 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags dec = ((_Fmtflags)512); 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags oct = ((_Fmtflags)1024); 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags hex = ((_Fmtflags)2048); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags scientific = ((_Fmtflags)4096); 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags fixed = ((_Fmtflags)8192); 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags hexfloat = ((_Fmtflags)12288); 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags boolalpha = ((_Fmtflags)16384); 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags _Stdio = ((_Fmtflags)32768); 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags adjustfield = ((_Fmtflags)((64 | 128) | 256)); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags basefield = ((_Fmtflags)((512 | 1024) | 2048)); 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Fmtflags floatfield = ((_Fmtflags)(4096 | 8192)); 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
enum _Iostate { 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Statmask = 23}; 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Iostate goodbit = ((_Iostate)0); 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Iostate eofbit = ((_Iostate)1); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Iostate failbit = ((_Iostate)2); 
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Iostate badbit = ((_Iostate)4); 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
enum _Openmode { 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Openmask = 255}; 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Openmode in = ((_Openmode)1); 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Openmode out = ((_Openmode)2); 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Openmode ate = ((_Openmode)4); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Openmode app = ((_Openmode)8); 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Openmode trunc = ((_Openmode)16); 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Openmode _Nocreate = ((_Openmode)64); 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Openmode _Noreplace = ((_Openmode)128); 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Openmode binary = ((_Openmode)32); 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
enum _Seekdir { 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Seekbeg, 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Seekcur, 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Seekend
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}; 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Seekdir beg = (_Seekbeg); 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Seekdir cur = (_Seekcur); 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static constexpr _Seekdir end = (_Seekend); 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
enum { 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Openprot = 64}; 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}; 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::skipws; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::unitbuf; 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::uppercase; 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::showbase; 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::showpoint; 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::showpos; 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::left; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::right; 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::internal; 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::dec; 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::oct; 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::hex; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::scientific; 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::fixed; 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::hexfloat; 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::boolalpha; 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::_Stdio; 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::adjustfield; 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::basefield; 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Fmtflags _Iosb< _Dummy> ::floatfield; 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate _Iosb< _Dummy> ::goodbit; 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate _Iosb< _Dummy> ::eofbit; 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate _Iosb< _Dummy> ::failbit; 
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Iostate _Iosb< _Dummy> ::badbit; 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode _Iosb< _Dummy> ::in; 
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode _Iosb< _Dummy> ::out; 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode _Iosb< _Dummy> ::ate; 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode _Iosb< _Dummy> ::app; 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode _Iosb< _Dummy> ::trunc; 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode _Iosb< _Dummy> ::_Nocreate; 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode _Iosb< _Dummy> ::_Noreplace; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Openmode _Iosb< _Dummy> ::binary; 
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir _Iosb< _Dummy> ::beg; 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir _Iosb< _Dummy> ::cur; 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
template< class _Dummy> constexpr const typename _Iosb< _Dummy> ::_Seekdir _Iosb< _Dummy> ::end; 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
class ios_base : public _Iosb< int>  { 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
public: typedef int fmtflags; 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
typedef int iostate; 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
typedef int openmode; 
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
typedef int seekdir; 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
typedef std::streamoff streamoff; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
typedef std::streampos streampos; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
enum event { 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
erase_event, imbue_event, copyfmt_event}; 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
typedef void (__cdecl *event_callback)(event, ios_base &, int); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
typedef unsigned io_state, open_mode, seek_dir; 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
class failure : public system_error { 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
public: explicit failure(const string &_Message, const error_code &
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Errcode = make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
explicit failure(const char *_Message, const error_code &
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Errcode = make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}; 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
class Init { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
public: Init() 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Init_ctor(this); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
~Init() noexcept 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Init_dtor(this); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
private: static void __cdecl _Init_ctor(Init *); 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static void __cdecl _Init_dtor(Init *); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static int _Init_cnt; 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static int &__cdecl _Init_cnt_func(); 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
explicit operator bool() const 
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return !this->fail(); 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
bool operator!() const 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return this->fail(); 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void clear(iostate _State, bool _Reraise) 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_State &= (_Statmask); 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Mystate) = _State; 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
const auto _Filtered = _State & (_Except); 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
if (_Filtered) 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
if (_Reraise) 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
throw; 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}  
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
const char *_Msg; 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
if (_Filtered & badbit) 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Msg = ("ios_base::badbit set"); 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} else { 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
if (_Filtered & failbit) 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Msg = ("ios_base::failbit set"); 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} else 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Msg = ("ios_base::eofbit set"); 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}  }  
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
throw ((failure)(_Msg)); 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}  
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void clear(iostate _State = goodbit) 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->clear(_State, false); 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void clear(io_state _State) 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->clear((iostate)_State); 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
iostate rdstate() const 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Mystate; 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void setstate(iostate _State, bool _Exreraise) 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->clear(this->rdstate() | _State, _Exreraise); 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void setstate(iostate _State) 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->clear(this->rdstate() | _State, false); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void setstate(io_state _State) 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->setstate((iostate)_State); 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
bool good() const 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return this->rdstate() == goodbit; 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
bool eof() const 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return this->rdstate() & eofbit; 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
bool fail() const 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return this->rdstate() & (badbit | failbit); 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
bool bad() const 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return this->rdstate() & badbit; 
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
iostate exceptions() const 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Except; 
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void exceptions(iostate _Newexcept) 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Except) = (_Newexcept & (_Statmask)); 
#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->clear(this->rdstate()); 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void exceptions(io_state _State) 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->exceptions((iostate)_State); 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
fmtflags flags() const 
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Fmtfl; 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
fmtflags flags(fmtflags _Newfmtflags) 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Fmtfl) = (_Newfmtflags & (_Fmtmask)); 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Oldfmtflags; 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
fmtflags setf(fmtflags _Newfmtflags) 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Fmtfl) |= (_Newfmtflags & (_Fmtmask)); 
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Oldfmtflags; 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask) 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Fmtfl) = ((_Oldfmtflags & (~_Mask)) | ((_Newfmtflags & _Mask) & (_Fmtmask))); 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Oldfmtflags; 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void unsetf(fmtflags _Mask) 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Fmtfl) &= (~_Mask); 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
streamsize precision() const 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Prec; 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
streamsize precision(streamsize _Newprecision) 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
const streamsize _Oldprecision = _Prec; 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Prec) = _Newprecision; 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Oldprecision; 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
streamsize width() const 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Wide; 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
streamsize width(streamsize _Newwidth) 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
const streamsize _Oldwidth = _Wide; 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Wide) = _Newwidth; 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Oldwidth; 
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
locale getloc() const 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return *(_Ploc); 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
locale imbue(const locale &_Loc) 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
locale _Oldlocale = *(_Ploc); 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
((*(_Ploc)) = _Loc); 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->_Callfns(imbue_event); 
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Oldlocale; 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static int __cdecl xalloc() 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ _Lockit _Lock(2); 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Index++; 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
long &iword(int _Idx) 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return this->_Findarr(_Idx)._Lo; 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void *&pword(int _Idx) 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return this->_Findarr(_Idx)._Vp; 
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void register_callback(event_callback _Pfn, int 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Idx) 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Calls) = (new _Fnarray(_Idx, _Pfn, _Calls)); 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
ios_base &copyfmt(const ios_base &_Other) 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
if (this != ::std::addressof(_Other)) 
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->_Tidy(); 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
((*(_Ploc)) = (*(_Other._Ploc))); 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Fmtfl) = (_Other._Fmtfl); 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Prec) = (_Other._Prec); 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Wide) = (_Other._Wide); 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Iosarray *_Ptr = _Other._Arr; 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
for ((_Arr) = (nullptr); _Ptr != (nullptr); _Ptr = (_Ptr->_Next)) { 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
if (((_Ptr->_Lo) != (0)) || ((_Ptr->_Vp) != (nullptr))) 
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->iword(_Ptr->_Index) = (_Ptr->_Lo); 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->pword(_Ptr->_Index) = (_Ptr->_Vp); 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}  }  
#line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
for (_Fnarray *_Pfa = _Other._Calls; _Pfa != (nullptr); _Pfa = (_Pfa->_Next)) { 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->register_callback(_Pfa->_Pfn, _Pfa->_Index); }  
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->_Callfns(copyfmt_event); 
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->exceptions(_Other._Except); 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}  
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return *this; 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static bool __cdecl sync_with_stdio(bool _Newsync = true) 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ _Lockit _Lock(2); 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
const bool _Oldsync = _Sync; 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Sync = _Newsync; 
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return _Oldsync; 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void swap(ios_base &_Right) 
#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
if (this != ::std::addressof(_Right)) 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
::std::swap(_Mystate, _Right._Mystate); 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
::std::swap(_Except, _Right._Except); 
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
::std::swap(_Fmtfl, _Right._Fmtfl); 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
::std::swap(_Prec, _Right._Prec); 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
::std::swap(_Wide, _Right._Wide); 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
::std::swap(_Arr, _Right._Arr); 
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
::std::swap(_Calls, _Right._Calls); 
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
::std::swap(_Ploc, _Right._Ploc); 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}  
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
virtual ~ios_base() noexcept 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Ios_base_dtor(this); 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static void __cdecl _Addstd(ios_base *); 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
size_t _Stdstr; 
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
protected: ios_base() 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void _Init() 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Ploc) = (nullptr); 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Stdstr) = (0); 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Except) = goodbit; 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Fmtfl) = ((fmtflags)(skipws | dec)); 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Prec) = (6); 
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Wide) = (0); 
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Arr) = (nullptr); 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Calls) = (nullptr); 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->clear(goodbit); 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Ploc) = (new locale); 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
private: struct _Iosarray : public _Crt_new_delete { 
#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Iosarray(int _Idx, _Iosarray *_Link) : _Next(_Link), _Index(_Idx), _Lo((0)), _Vp((nullptr)) 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Iosarray *_Next; 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
int _Index; 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
long _Lo; 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void *_Vp; 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}; 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
struct _Fnarray : public _Crt_new_delete { 
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link) : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Fnarray *_Next; 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
int _Index; 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
event_callback _Pfn; 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}; 
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void _Callfns(event _Ev) 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
for (_Fnarray *_Pfa = _Calls; _Pfa != (nullptr); _Pfa = (_Pfa->_Next)) { 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(*(_Pfa->_Pfn))(_Ev, *this, _Pfa->_Index); }  
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Iosarray &_Findarr(int _Idx) 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Iosarray *_Ptr1, *_Ptr2; 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
for ((_Ptr1 = (_Arr)), (_Ptr2 = (nullptr)); _Ptr1 != (nullptr); _Ptr1 = (_Ptr1->_Next)) { 
#line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
if ((_Ptr1->_Index) == _Idx) { 
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return *_Ptr1; } else { 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
if (((_Ptr2 == (nullptr)) && ((_Ptr1->_Lo) == (0))) && ((_Ptr1->_Vp) == (nullptr))) { 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Ptr2 = _Ptr1; }  }  }  
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
if (_Ptr2 != (nullptr)) 
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Ptr2->_Index) = _Idx; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return *_Ptr2; 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}  
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Arr) = (new _Iosarray(_Idx, _Arr)); 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
return *(_Arr); 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
void _Tidy() 
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
this->_Callfns(erase_event); 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Iosarray *_Ptr1, *_Ptr2; 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
for (_Ptr1 = (_Arr); _Ptr1 != (nullptr); _Ptr1 = _Ptr2) 
#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Ptr2 = (_Ptr1->_Next); 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
delete _Ptr1; 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}  
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Arr) = (nullptr); 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Fnarray *_Pfa1, *_Pfa2; 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
for (_Pfa1 = (_Calls); _Pfa1 != (nullptr); _Pfa1 = _Pfa2) 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
{ 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Pfa2 = (_Pfa1->_Next); 
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
delete _Pfa1; 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}  
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
(_Calls) = (nullptr); 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
} 
#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
iostate _Mystate; 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
iostate _Except; 
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
fmtflags _Fmtfl; 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
streamsize _Prec; 
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
streamsize _Wide; 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Iosarray *_Arr; 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
_Fnarray *_Calls; 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
locale *_Ploc; 
#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static int _Index; 
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static bool _Sync; 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
static void __cdecl _Ios_base_dtor(ios_base *); 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
public: ios_base(const ios_base &) = delete;
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
ios_base &operator=(const ios_base &) = delete;
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}; 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
}
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
#pragma warning(pop)
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"
namespace std { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"
template < class _Elem,
 class _Traits >
 class basic_streambuf
 {
protected :
  basic_streambuf ( )
  : _Plocale ( new locale )
  {
  _Init ( );
  }

  basic_streambuf ( _Uninitialized )
  {
  }

  basic_streambuf ( const basic_streambuf & _Right )
  : _Plocale ( new locale ( _Right . getloc ( ) ) )
  {
  _Init ( );
  setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
  setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
  }

 basic_streambuf & operator = ( const basic_streambuf & _Right )
  {
  if ( this != :: std :: addressof ( _Right ) )
   {
   setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   pubimbue ( _Right . getloc ( ) );
   }
  return ( * this );
  }

 void swap ( basic_streambuf & _Right )
  {
  if ( this != :: std :: addressof ( _Right ) )
   {
   _Elem * _Pfirst0 = pbase ( );
   _Elem * _Pnext0 = pptr ( );
   _Elem * _Pend = epptr ( );
   _Elem * _Gfirst0 = eback ( );
   _Elem * _Gnext0 = gptr ( );
   _Elem * _Gend = egptr ( );

   setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
   _Right . setp ( _Pfirst0, _Pnext0, _Pend );

   setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
   _Right . setg ( _Gfirst0, _Gnext0, _Gend );

   :: std :: swap ( _Plocale, _Right . _Plocale );
   }
  }

public :
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~ basic_streambuf ( ) noexcept
  {
  delete _Plocale;
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 pos_type pubseekoff ( off_type _Off,
  ios_base :: seekdir _Way,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  return ( seekoff ( _Off, _Way, _Mode ) );
  }


 pos_type pubseekoff ( off_type _Off,
  ios_base :: seek_dir _Way,
  ios_base :: open_mode _Mode )
  {
  return ( pubseekoff ( _Off, ( ios_base :: seekdir ) _Way,
   ( ios_base :: openmode ) _Mode ) );
  }


 pos_type pubseekpos ( pos_type _Pos,
  ios_base :: openmode _Mode = ios_base :: in | ios_base :: out )
  {
  return ( seekpos ( _Pos, _Mode ) );
  }


 pos_type pubseekpos ( pos_type _Pos,
  ios_base :: open_mode _Mode )
  {
  return ( seekpos ( _Pos, ( ios_base :: openmode ) _Mode ) );
  }


 basic_streambuf * pubsetbuf ( _Elem * _Buffer,
  streamsize _Count )
  {
  return ( setbuf ( _Buffer, _Count ) );
  }

 locale pubimbue ( const locale & _Newlocale )
  {
  locale _Oldlocale = * _Plocale;
  imbue ( _Newlocale );
  * _Plocale = _Newlocale;
  return ( _Oldlocale );
  }

 locale getloc ( ) const
  {
  return ( * _Plocale );
  }

 streamsize in_avail ( )
  {
  streamsize _Res = _Gnavail ( );
  return ( 0 < _Res ? _Res : showmanyc ( ) );
  }

 int pubsync ( )
  {
  return ( sync ( ) );
  }

 int_type sbumpc ( )
  {
  return ( 0 < _Gnavail ( )
   ? _Traits :: to_int_type ( * _Gninc ( ) ) : uflow ( ) );
  }

 int_type sgetc ( )
  {
  return ( 0 < _Gnavail ( )
   ? _Traits :: to_int_type ( * gptr ( ) ) : underflow ( ) );
  }

 streamsize sgetn ( _Elem * _Ptr,
  streamsize _Count )
  {
  return ( xsgetn ( _Ptr, _Count ) );
  }

 int_type snextc ( )
  {
  return ( 1 < _Gnavail ( )
   ? _Traits :: to_int_type ( * _Gnpreinc ( ) )
   : _Traits :: eq_int_type ( _Traits :: eof ( ), sbumpc ( ) )
    ? _Traits :: eof ( ) : sgetc ( ) );
  }

 int_type sputbackc ( _Elem _Ch )
  {
  return ( gptr ( ) != nullptr && eback ( ) < gptr ( )
   && _Traits :: eq ( _Ch, gptr ( ) [ - 1 ] )
   ? _Traits :: to_int_type ( * _Gndec ( ) )
   : pbackfail ( _Traits :: to_int_type ( _Ch ) ) );
  }


 void stossc ( )
  {
  if ( 0 < _Gnavail ( ) )
   _Gninc ( );
  else
   uflow ( );
  }


 int_type sungetc ( )
  {
  return ( gptr ( ) != nullptr && eback ( ) < gptr ( )
   ? _Traits :: to_int_type ( * _Gndec ( ) ) : pbackfail ( ) );
  }

 int_type sputc ( _Elem _Ch )
  {
  return ( 0 < _Pnavail ( )
   ? _Traits :: to_int_type ( * _Pninc ( ) = _Ch )
   : overflow ( _Traits :: to_int_type ( _Ch ) ) );
  }

 streamsize sputn ( const _Elem * _Ptr,
  streamsize _Count )
  {
  return ( xsputn ( _Ptr, _Count ) );
  }

 virtual void _Lock ( )
  {
  }

 virtual void _Unlock ( )
  {
  }

protected :
 _Elem * eback ( ) const
  {
  return ( * _IGfirst );
  }

 _Elem * gptr ( ) const
  {
  return ( * _IGnext );
  }

 _Elem * pbase ( ) const
  {
  return ( * _IPfirst );
  }

 _Elem * pptr ( ) const
  {
  return ( * _IPnext );
  }

 _Elem * egptr ( ) const
  {
  return ( * _IGnext + * _IGcount );
  }

 void gbump ( int _Off )
  {
  * _IGcount -= _Off;
  * _IGnext += _Off;
  }

 void setg ( _Elem * _First, _Elem * _Next, _Elem * _Last )
  {
  * _IGfirst = _First;
  * _IGnext = _Next;
  * _IGcount = ( int ) ( _Last - _Next );
  }

 _Elem * epptr ( ) const
  {
  return ( * _IPnext + * _IPcount );
  }

 _Elem * _Gndec ( )
  {
  ++ * _IGcount;
  return ( -- * _IGnext );
  }

 _Elem * _Gninc ( )
  {
  -- * _IGcount;
  return ( ( * _IGnext ) ++ );
  }

 _Elem * _Gnpreinc ( )
  {
  -- * _IGcount;
  return ( ++ ( * _IGnext ) );
  }

 streamsize _Gnavail ( ) const
  {
  return ( * _IGnext != nullptr ? * _IGcount : 0 );
  }

 void pbump ( int _Off )
  {
  * _IPcount -= _Off;
  * _IPnext += _Off;
  }

 void setp ( _Elem * _First, _Elem * _Last )
  {
  * _IPfirst = _First;
  * _IPnext = _First;
  * _IPcount = ( int ) ( _Last - _First );
  }

 void setp ( _Elem * _First, _Elem * _Next, _Elem * _Last )
  {
  * _IPfirst = _First;
  * _IPnext = _Next;
  * _IPcount = ( int ) ( _Last - _Next );
  }

 _Elem * _Pninc ( )
  {
  -- * _IPcount;
  return ( ( * _IPnext ) ++ );
  }

 streamsize _Pnavail ( ) const
  {
  return ( * _IPnext != nullptr ? * _IPcount : 0 );
  }

 void _Init ( )
  {
  _IGfirst = & _Gfirst;
  _IPfirst = & _Pfirst;
  _IGnext = & _Gnext;
  _IPnext = & _Pnext;
  _IGcount = & _Gcount;
  _IPcount = & _Pcount;
  setp ( nullptr, nullptr );
  setg ( nullptr, nullptr, nullptr );
  }

 void _Init ( _Elem * * _Gf, _Elem * * _Gn, int * _Gc,
  _Elem * * _Pf, _Elem * * _Pn, int * _Pc )
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow ( int_type = _Traits :: eof ( ) )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual int_type pbackfail ( int_type = _Traits :: eof ( ) )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual streamsize showmanyc ( )
  {
  return ( 0 );
  }

 virtual int_type underflow ( )
  {
  return ( _Traits :: eof ( ) );
  }

 virtual int_type uflow ( )
  {
  return ( _Traits :: eq_int_type ( _Traits :: eof ( ), underflow ( ) )
   ? _Traits :: eof ( ) : _Traits :: to_int_type ( * _Gninc ( ) ) );
  }

 virtual streamsize xsgetn ( _Elem * _Ptr, streamsize _Count )
  {
  const streamsize _Start_count = _Count;

  while ( 0 < _Count )
   {
   streamsize _Size = _Gnavail ( );
   if ( 0 < _Size )
    {
    if ( _Count < _Size )
     {
     _Size = _Count;
     }

    _Traits :: copy ( _Ptr, gptr ( ), static_cast < size_t > ( _Size ) );
    _Ptr += _Size;
    _Count -= _Size;
    gbump ( static_cast < int > ( _Size ) );
    }
   else
    {
    const int_type _Meta = uflow ( );
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     break;
     }


    * _Ptr ++ = _Traits :: to_char_type ( _Meta );
    -- _Count;
    }
   }

  return ( _Start_count - _Count );
  }

 virtual streamsize xsputn ( const _Elem * _Ptr, streamsize _Count )
  {
  const streamsize _Start_count = _Count;
  while ( 0 < _Count )
   {
   streamsize _Size = _Pnavail ( );
   if ( 0 < _Size )
    {
    if ( _Count < _Size )
     {
     _Size = _Count;
     }

    _Traits :: copy ( pptr ( ), _Ptr, static_cast < size_t > ( _Size ) );
    _Ptr += _Size;
    _Count -= _Size;
    pbump ( static_cast < int > ( _Size ) );
    }
   else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( _Traits :: to_int_type ( * _Ptr ) ) ) )
    {
    break;
    }
   else
    {
    ++ _Ptr;
    -- _Count;
    }
   }

  return ( _Start_count - _Count );
  }

 virtual pos_type seekoff ( off_type,
  ios_base :: seekdir,
  ios_base :: openmode = ios_base :: in | ios_base :: out )
  {
  return ( streampos ( - 1 ) );
  }

 virtual pos_type seekpos ( pos_type,
  ios_base :: openmode = ios_base :: in | ios_base :: out )
  {
  return ( streampos ( - 1 ) );
  }

 virtual basic_streambuf * setbuf ( _Elem *, streamsize )
  {
  return ( this );
  }

 virtual int sync ( )
  {
  return ( 0 );
  }

 virtual void imbue ( const locale & )
  {
  }

private :
 _Elem * _Gfirst;
 _Elem * _Pfirst;
 _Elem * * _IGfirst;
 _Elem * * _IPfirst;
 _Elem * _Gnext;
 _Elem * _Pnext;
 _Elem * * _IGnext;
 _Elem * * _IPnext;

 int _Gcount;
 int _Pcount;
 int * _IGcount;
 int * _IPcount;

protected :
 locale * _Plocale;
 };
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"
template < class _Elem,
 class _Traits >
 class istreambuf_iterator
 {
public :
 using iterator_category = input_iterator_tag;
 using value_type = _Elem;
 using difference_type = typename _Traits :: off_type;
 using pointer = const _Elem *;
 using reference = _Elem;

 using char_type = _Elem;
 using traits_type = _Traits;
 using streambuf_type = basic_streambuf < _Elem, _Traits >;
 using istream_type = basic_istream < _Elem, _Traits >;

 using int_type = typename traits_type :: int_type;

 constexpr istreambuf_iterator ( ) noexcept
  : _Strbuf ( nullptr ),
  _Got ( true ),
  _Val ( )
  {
  }

 istreambuf_iterator ( streambuf_type * _Sb ) noexcept
  : _Strbuf ( _Sb ),
  _Got ( _Sb == nullptr ),
  _Val ( )
  {
  }

 istreambuf_iterator ( istream_type & _Istr ) noexcept
  : _Strbuf ( _Istr . rdbuf ( ) ),
  _Got ( _Strbuf == nullptr ),
  _Val ( )
  {
  }

private :
 class _Istreambuf_proxy
  {
 public :
   _Elem operator * ( ) const
   {
   return ( _Keep );
   }
 private :
  friend istreambuf_iterator;
  _Istreambuf_proxy ( streambuf_type * _Strbuf_, _Elem _Keep_ )
   : _Strbuf ( _Strbuf_ ),
   _Keep ( _Keep_ )
   {
   }

  streambuf_type * _Strbuf;
  _Elem _Keep;
  };

public :
 istreambuf_iterator ( const _Istreambuf_proxy & _Px ) noexcept
  : _Strbuf ( _Px . _Strbuf ),
  _Got ( _Strbuf == nullptr ),
  _Val ( )
  {
  }

  _Elem operator * ( ) const
  {
  if ( ! _Got )
   _Peek ( );





  return ( _Val );
  }

 istreambuf_iterator & operator ++ ( )
  {




  _Inc ( );
  return ( * this );
  }

 _Istreambuf_proxy operator ++ ( int )
  {
  if ( ! _Got )
   _Peek ( );
  _Istreambuf_proxy _Tmp { _Strbuf, _Val };
  ++ * this;
  return ( _Tmp );
  }

  bool equal ( const istreambuf_iterator & _Right ) const
  {
  if ( ! _Got )
   _Peek ( );
  if ( ! _Right . _Got )
   _Right . _Peek ( );
  return ( ( _Strbuf == nullptr && _Right . _Strbuf == nullptr )
   || ( _Strbuf != nullptr && _Right . _Strbuf != nullptr ) );
  }

private :
 void _Inc ( )
  {
  if ( _Strbuf == nullptr
   || traits_type :: eq_int_type ( traits_type :: eof ( ),
    _Strbuf -> sbumpc ( ) ) )
   {
   _Strbuf = nullptr;
   _Got = true;
   }
  else
   {
   _Got = false;
   }
  }

 _Elem _Peek ( ) const
  {
  int_type _Meta;
  if ( _Strbuf == nullptr
   || traits_type :: eq_int_type ( traits_type :: eof ( ),
    _Meta = _Strbuf -> sgetc ( ) ) )
   _Strbuf = nullptr;
  else
   _Val = traits_type :: to_char_type ( _Meta );
  _Got = true;
  return ( _Val );
  }

 mutable streambuf_type * _Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"
template < class _Elem,
 class _Traits >
  inline bool operator == (
  const istreambuf_iterator < _Elem, _Traits > & _Left,
  const istreambuf_iterator < _Elem, _Traits > & _Right )
 {
 return ( _Left . equal ( _Right ) );
 }
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"
template < class _Elem,
 class _Traits >
  inline bool operator != (
  const istreambuf_iterator < _Elem, _Traits > & _Left,
  const istreambuf_iterator < _Elem, _Traits > & _Right )
 {
 return ( ! ( _Left == _Right ) );
 }
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"
template < class _Elem,
 class _Traits >
 class ostreambuf_iterator
 {
public :
 using iterator_category = output_iterator_tag;
 using value_type = void;
 using difference_type = void;
 using pointer = void;
 using reference = void;

 using char_type = _Elem;
 using traits_type = _Traits;
 using streambuf_type = basic_streambuf < _Elem, _Traits >;
 using ostream_type = basic_ostream < _Elem, _Traits >;

 ostreambuf_iterator ( streambuf_type * _Sb ) noexcept
  : _Failed ( false ), _Strbuf ( _Sb )
  {
  }

 ostreambuf_iterator ( ostream_type & _Ostr ) noexcept
  : _Failed ( false ), _Strbuf ( _Ostr . rdbuf ( ) )
  {
  }

 ostreambuf_iterator & operator = ( _Elem _Right )
  {
  if ( _Strbuf == nullptr
   || traits_type :: eq_int_type ( _Traits :: eof ( ),
    _Strbuf -> sputc ( _Right ) ) )
   _Failed = true;
  return ( * this );
  }

  ostreambuf_iterator & operator * ( )
  {
  return ( * this );
  }

 ostreambuf_iterator & operator ++ ( )
  {
  return ( * this );
  }

 ostreambuf_iterator & operator ++ ( int )
  {
  return ( * this );
  }

  bool failed ( ) const noexcept
  {
  return ( _Failed );
  }

private :
 bool _Failed;
 streambuf_type * _Strbuf;
 };
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"
}
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
extern "C" {
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
extern float __cdecl _Stofx(const char *, char **, long, int *); 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
extern double __cdecl _Stodx(const char *, char **, long, int *); 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
extern long double __cdecl _Stoldx(const char *, char **, long, int *); 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
extern long __cdecl _Stolx(const char *, char **, int, int *); 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
extern unsigned long __cdecl _Stoulx(const char *, char **, int, int *); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
extern __int64 __cdecl _Stollx(const char *, char **, int, int *); 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
extern unsigned __int64 __cdecl _Stoullx(const char *, char **, int, int *); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
}
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
namespace std { 
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr) 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
{ 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
int &_Errno_ref = *_errno(); 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
const int _Orig = _Errno_ref; 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
_Errno_ref = 0; 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
double _Val = ::strtod(_Str, _Endptr); 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
(*_Perr) = _Errno_ref; 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
_Errno_ref = _Orig; 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
if (_Pten != 0) { 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
_Val *= ::pow((10.0), static_cast< double>(_Pten)); }  
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
return _Val; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
} 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr) 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
{ 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
int &_Errno_ref = *_errno(); 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
const int _Orig = _Errno_ref; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
_Errno_ref = 0; 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
float _Val = ::strtof(_Str, _Endptr); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
(*_Perr) = _Errno_ref; 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
_Errno_ref = _Orig; 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
if (_Pten != 0) { 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
_Val *= ::powf((10.0F), static_cast< float>(_Pten)); }  
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
return _Val; 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
} 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
template < class _Elem,
 size_t _Base_size > inline
 size_t _Find_elem ( const _Elem ( & _Base ) [ _Base_size ], const _Elem _Ch )
 {

 return ( static_cast < size_t > ( _Find_unchecked ( _Base, _Base + ( _Base_size - 1 ), _Ch ) - _Base ) );
 }
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
inline __wchar_t *_Maklocwcs(const __wchar_t *_Ptr) 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
{ 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
const size_t _Count = ::wcslen(_Ptr) + (1); 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
__wchar_t *_Ptrdest = (__wchar_t *)calloc(_Count, sizeof(__wchar_t)); 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
if (!_Ptrdest) { 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
_Xbad_alloc(); }  
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
::wmemcpy(_Ptrdest, _Ptr, _Count); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
return _Ptrdest; 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
} 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
template < class _Elem >
 class numpunct
  : public locale :: facet
 {
public :
 typedef basic_string < _Elem, char_traits < _Elem >, allocator < _Elem > >
  string_type;
 typedef _Elem char_type;

   static locale :: id id;

 _Elem decimal_point ( ) const
  {
  return ( do_decimal_point ( ) );
  }

 _Elem thousands_sep ( ) const
  {
  return ( do_thousands_sep ( ) );
  }

 string grouping ( ) const
  {
  return ( do_grouping ( ) );
  }

 string_type falsename ( ) const
  {
  return ( do_falsename ( ) );
  }

 string_type truename ( ) const
  {
  return ( do_truename ( ) );
  }

 explicit numpunct ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
   if ( _Kseparator == 0 )
    _Kseparator =
     _Maklocchr ( ',', static_cast < _Elem * > ( nullptr ), _Lobj . _Getcvt ( ) );
  }
  }

 numpunct ( const _Locinfo & _Lobj, size_t _Refs = 0, bool _Isdef = false )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj, _Isdef );
  }

 static size_t _Getcat ( const locale :: facet * * _Ppf = nullptr,
  const locale * _Ploc = nullptr )
  {
  if ( _Ppf != nullptr && * _Ppf == nullptr )
   * _Ppf = new numpunct < _Elem > (
    _Locinfo ( _Ploc -> c_str ( ) ), 0, true );
  return ( 4 );
  }

protected :
 virtual ~ numpunct ( ) noexcept
  {
  _Tidy ( );
  }

 numpunct ( const char * _Locname, size_t _Refs = 0, bool _Isdef = false )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj ( _Locname );
   _Init ( _Lobj, _Isdef );
  }
  }

 template < class _Elem2 >
  void _Getvals ( _Elem2, const lconv * _Ptr, _Locinfo :: _Cvtvec _Cvt )
  {
  _Dp = _Maklocchr ( _Ptr -> decimal_point [ 0 ], static_cast < _Elem2 * > ( nullptr ), _Cvt );
  _Kseparator = _Maklocchr ( _Ptr -> thousands_sep [ 0 ], static_cast < _Elem2 * > ( nullptr ), _Cvt );
  }

 void _Getvals ( wchar_t, const lconv * _Ptr, _Locinfo :: _Cvtvec )
  {
  _Dp = ( _Elem ) _Ptr -> _W_decimal_point [ 0 ];
  _Kseparator = ( _Elem ) _Ptr -> _W_thousands_sep [ 0 ];
  }

 void _Init ( const _Locinfo & _Lobj, bool _Isdef = false )
  {
  const lconv * _Ptr = _Lobj . _Getlconv ( );
  _Locinfo :: _Cvtvec _Cvt = _Lobj . _Getcvt ( );

  _Grouping = nullptr;
  _Falsename = nullptr;
  _Truename = nullptr;

  try {
  _Grouping = _Maklocstr ( _Isdef ? "" : _Ptr -> grouping, static_cast < char * > ( nullptr ), _Lobj . _Getcvt ( ) );
  _Falsename = _Maklocstr ( _Lobj . _Getfalse ( ), static_cast < _Elem * > ( nullptr ), _Cvt );
  _Truename = _Maklocstr ( _Lobj . _Gettrue ( ), static_cast < _Elem * > ( nullptr ), _Cvt );
  } catch ( ... ) {
  _Tidy ( );
  throw;
  }

  if ( _Isdef )
   {

   _Dp = _Maklocchr ( '.', static_cast < _Elem * > ( nullptr ), _Cvt );
   _Kseparator = _Maklocchr ( ',', static_cast < _Elem * > ( nullptr ), _Cvt );
   }
  else
   _Getvals ( ( _Elem ) 0, _Ptr, _Cvt );
  }

 virtual _Elem do_decimal_point ( ) const
  {
  return ( _Dp );
  }

 virtual _Elem do_thousands_sep ( ) const
  {
  return ( _Kseparator );
  }

 virtual string do_grouping ( ) const
  {
  return ( string ( _Grouping ) );
  }

 virtual string_type do_falsename ( ) const
  {
  return ( string_type ( _Falsename ) );
  }

 virtual string_type do_truename ( ) const
  {
  return ( string_type ( _Truename ) );
  }

private :
 void _Tidy ( )
  {
  :: free ( ( void * ) _Grouping );
  :: free ( ( void * ) _Falsename );
  :: free ( ( void * ) _Truename );
  }

 const char * _Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem * _Falsename;
 const _Elem * _Truename;
 };
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
template < class _Elem >
 class numpunct_byname
  : public numpunct < _Elem >
 {
public :
 explicit numpunct_byname ( const char * _Locname, size_t _Refs = 0 )
  : numpunct < _Elem > ( _Locname, _Refs )
  {
  }

 explicit numpunct_byname ( const string & _Str, size_t _Refs = 0 )
  : numpunct < _Elem > ( _Str . c_str ( ), _Refs )
  {
  }

protected :
 virtual ~ numpunct_byname ( ) noexcept
  {
  }
 };
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
template< class _Elem> locale::id 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
numpunct< _Elem> ::id; 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
template < class _Elem,
 class _InIt = istreambuf_iterator < _Elem, char_traits < _Elem > > >
 class num_get
  : public locale :: facet
 {
public :
 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr,
  const locale * _Ploc = nullptr )
  {
  if ( _Ppf != nullptr && * _Ppf == nullptr )
   * _Ppf = new num_get < _Elem, _InIt > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 4 );
  }

  static locale :: id id;

protected :
 virtual ~ num_get ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

public :
 explicit num_get ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  num_get ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj );
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   bool & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned short & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned int & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long long & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   float & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   double & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long double & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

 _InIt get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   void * & _Val ) const
  {
  return ( do_get ( _First, _Last, _Iosbase, _State, _Val ) );
  }

protected :
 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   bool & _Val ) const
  {
  _Adl_verify_range ( _First, _Last );
  if ( _Iosbase . flags ( ) & ios_base :: boolalpha )
   {
   const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
   basic_string < _Elem > _Str ( static_cast < size_t > ( 1 ), _Elem { } );
   _Str += _Punct_fac . falsename ( );
   _Str . push_back ( _Elem { } );
   _Str += _Punct_fac . truename ( );
   switch ( _Getloctxt ( _First, _Last, 2, _Str . c_str ( ) ) )
    {
    case 0 :
     _Val = false;
     break;
    case 1 :
     _Val = true;
     break;
    default :
     _Val = false;
     _State = ios_base :: failbit;
     break;
    }
   }
  else
   {
   char _Ac [ 32 ];
   const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
   if ( _Ac [ 0 ] == '\000' )
    {





    _Val = false;
    _State = ios_base :: failbit;
    }
   else
    {
    char * _Ep;
    int _Errno;
    const long _Ans = :: _Stolx ( _Ac, & _Ep, _Base, & _Errno );
    if ( _Ep == _Ac || _Errno != 0 )
     {
     _Val = true;
     _State = ios_base :: failbit;
     }
    else
     {
     _Val = _Ans != 0;
     if ( _Ans != 0 && _Ans != 1 )
      {
      _State = ios_base :: failbit;
      }
     }
    }
   }

  if ( _First == _Last )
   {
   _State |= ios_base :: eofbit;
   }

  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned short & _Val ) const
  {
  _Adl_verify_range ( _First, _Last );
  char _Ac [ 32 ];
  const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
  if ( _Ac [ 0 ] == '\000' )
   {
   _State = ios_base :: failbit;
   _Val = 0;
   }
  else
   {
   const bool _Minus = _Ac [ 0 ] == '-';
   const char * _Digits = _Ac;


   if ( _Minus )
    {
    ++ _Digits;
    }

   char * _Ep;
   int _Errno;
   const unsigned long _Tmp = :: _Stoulx ( _Digits, & _Ep, _Base, & _Errno );
   _Val = static_cast < unsigned short > ( _Tmp );
   if ( _Ep == _Digits || _Errno != 0 || _Tmp > 65535 )
    {
    _State = ios_base :: failbit;
    _Val = 65535;
    }
   else if ( _Minus )
    {

    _Val = static_cast < unsigned short > ( 0 - _Val );
    }
   }

  if ( _First == _Last )
   {
   _State |= ios_base :: eofbit;
   }

  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned int & _Val ) const
  {
  static_assert ( sizeof ( unsigned int ) == sizeof ( unsigned long ),
   "Bad overflow assumptions due to sizeof(unsigned int) != sizeof(unsigned long)" );
  unsigned long _Tmp;
  _First = num_get :: do_get ( _First, _Last, _Iosbase, _State, _Tmp );
  _Val = _Tmp;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long & _Val ) const
  {
  _Adl_verify_range ( _First, _Last );
  char _Ac [ 32 ];
  const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
  if ( _Ac [ 0 ] == '\000' )
   {
   _State = ios_base :: failbit;
   _Val = 0;
   }
  else
   {
   char * _Ep;
   int _Errno;
   _Val = :: _Stolx ( _Ac, & _Ep, _Base, & _Errno );
   if ( _Ep == _Ac || _Errno != 0 )
    {
    _State = ios_base :: failbit;
    }
   }

  if ( _First == _Last )
   {
   _State |= ios_base :: eofbit;
   }

  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long & _Val ) const
  {
  _Adl_verify_range ( _First, _Last );
  char _Ac [ 32 ];
  const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
  if ( _Ac [ 0 ] == '\000' )
   {
   _State = ios_base :: failbit;
   _Val = 0;
   }
  else
   {
   char * _Ep;
   int _Errno;
   _Val = :: _Stoulx ( _Ac, & _Ep, _Base, & _Errno );
   if ( _Ep == _Ac || _Errno != 0 )
    {
    _State = ios_base :: failbit;
    }
   }

  if ( _First == _Last )
   {
   _State |= ios_base :: eofbit;
   }

  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long long & _Val ) const
  {
  _Adl_verify_range ( _First, _Last );
  char _Ac [ 32 ];
  const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
  if ( _Ac [ 0 ] == '\000' )
   {
   _State = ios_base :: failbit;
   _Val = 0;
   }
  else
   {
   char * _Ep;
   int _Errno;
   _Val = :: _Stollx ( _Ac, & _Ep, _Base, & _Errno );
   if ( _Ep == _Ac || _Errno != 0 )
    {
    _State = ios_base :: failbit;
    }
   }

  if ( _First == _Last )
   {
   _State |= ios_base :: eofbit;
   }

  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   unsigned long long & _Val ) const
  {
  _Adl_verify_range ( _First, _Last );
  char _Ac [ 32 ];
  const int _Base = _Getifld ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
  if ( _Ac [ 0 ] == '\000' )
   {
   _State = ios_base :: failbit;
   _Val = 0;
   }
  else
   {
   int _Errno;
   char * _Ep;
   _Val = :: _Stoullx ( _Ac, & _Ep, _Base, & _Errno );
   if ( _Ep == _Ac || _Errno != 0 )
    {
    _State = ios_base :: failbit;
    }
   }

  if ( _First == _Last )
   {
   _State |= ios_base :: eofbit;
   }

  return ( _First );
  }







 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   float & _Val ) const
  {
  _Adl_verify_range ( _First, _Last );
  char _Ac [ ( 8 + 768 + 16 ) ];
  int _Hexexp = 1000000000;
  const int _Base = _Getffld ( _Ac, _First, _Last, _Iosbase, & _Hexexp );
  if ( _Ac [ 0 ] == '\000' )
   {
   _State = ios_base :: failbit;
   _Val = (0.0F);
   }
  else
   {
   int _Errno;
   char * _Ep;
   _Val = _Stofx_v2 ( _Ac, & _Ep, _Base, & _Errno );
   if ( _Ep == _Ac || _Errno != 0 )
    {
    _State = ios_base :: failbit;
    _Val = (0.0F);
    }
   else if ( _Hexexp != 1000000000 && _Hexexp != 0 )
    {
    _Val = :: ldexpf ( _Val, 4 * _Hexexp );
    }
   }

  if ( _First == _Last )
   {
   _State |= ios_base :: eofbit;
   }

  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   double & _Val ) const
  {
  _Adl_verify_range ( _First, _Last );
  char _Ac [ ( 8 + 768 + 16 ) ];
  int _Hexexp = 1000000000;
  const int _Base = _Getffld ( _Ac, _First, _Last, _Iosbase, & _Hexexp );
  if ( _Ac [ 0 ] == '\000' )
   {
   _State = ios_base :: failbit;
   _Val = (0.0);
   }
  else
   {
   int _Errno;
   char * _Ep;
   _Val = _Stodx_v2 ( _Ac, & _Ep, _Base, & _Errno );
   if ( _Ep == _Ac || _Errno != 0 )
    {
    _State = ios_base :: failbit;
    _Val = (0.0);
    }
   else if ( _Hexexp != 1000000000 && _Hexexp != 0 )
    {
    _Val = :: ldexp ( _Val, 4 * _Hexexp );
    }
   }

  if ( _First == _Last )
   {
   _State |= ios_base :: eofbit;
   }

  return ( _First );
  }


 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   long double & _Val ) const
  {
  static_assert ( sizeof ( double ) == sizeof ( long double ),
   "Bad assumption: sizeof(double) == sizeof(long double)." );
  double _Result;
  _First = num_get :: do_get ( _First, _Last, _Iosbase, _State, _Result );
  _Val = _Result;
  return ( _First );
  }

 virtual _InIt do_get ( _InIt _First, _InIt _Last,
  ios_base & _Iosbase, ios_base :: iostate & _State,
   void * & _Val ) const
  {
  _Adl_verify_range ( _First, _Last );
  char _Ac [ 32 ];
  const int _Base = _Getifld ( _Ac, _First, _Last, ios_base :: hex, _Iosbase . getloc ( ) );
  if ( _Ac [ 0 ] == '\000' )
   {
   _State = ios_base :: failbit;
   _Val = nullptr;
   }
  else
   {
   int _Errno;
   char * _Ep;

   _Val = reinterpret_cast < void * > ( :: _Stoullx ( _Ac, & _Ep, _Base, & _Errno ) );



   if ( _Ep == _Ac || _Errno != 0 )
    {
    _State = ios_base :: failbit;
    _Val = nullptr;
    }
   }

  if ( _First == _Last )
   {
   _State |= ios_base :: eofbit;
   }

  return ( _First );
  }

private :
 int __cdecl _Getifld ( char * _Ac,
  _InIt & _First, _InIt & _Last, ios_base :: fmtflags _Basefield,
   const locale & _Loc ) const
  {
  const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Loc );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _Kseparator = _Grouping . size ( ) == 0
   ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );

  constexpr int _Numget_signoff = 22;
  constexpr int _Numget_xoff = 24;
  static constexpr char _Src [ ] = { "0123456789ABCDEFabcdef-+Xx" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Loc );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  char * _Ptr = _Ac;

  if ( _First != _Last )
   {
   if ( * _First == _Atoms [ _Numget_signoff + 1 ] )
    {
    * _Ptr ++ = '+';
    ++ _First;
    }
   else if ( * _First == _Atoms [ _Numget_signoff ] )
    {
    * _Ptr ++ = '-';
    ++ _First;
    }
   }

  _Basefield &= ios_base :: basefield;
  int _Base = _Basefield == ios_base :: oct ? 8
   : _Basefield == ios_base :: hex ? 16
   : _Basefield == ios_base :: _Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if ( _First != _Last && * _First == _Atoms [ 0 ] )
   {
   _Seendigit = true;
   ++ _First;
   if ( _First != _Last && ( * _First == _Atoms [ _Numget_xoff + 1 ]
     || * _First == _Atoms [ _Numget_xoff ] )
    && ( _Base == 0 || _Base == 16 ) )
    {
    _Base = 16;
    _Seendigit = false;
    ++ _First;
    }
   else if ( _Base == 0 )
    {
    _Base = 8;
    }
   }

  const auto _Dlen = static_cast < size_t > ( _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6 );
  string _Groups ( ( size_t ) 1, ( char ) _Seendigit );
  size_t _Group = 0;

  for ( char * const _Pe = & _Ac [ 32 - 1 ];
   _First != _Last; ++ _First )
   {
   size_t _Idx = _Find_elem ( _Atoms, * _First );
   if ( _Idx < _Dlen )
    {
    * _Ptr = _Src [ _Idx ];
    if ( ( _Nonzero || * _Ptr != '0' ) && _Ptr < _Pe )
     {
     ++ _Ptr;
     _Nonzero = true;
     }

    _Seendigit = true;
    if ( _Groups [ _Group ] != 127 )
     ++ _Groups [ _Group ];
    }
   else if ( _Groups [ _Group ] == '\000'
    || _Kseparator == ( _Elem ) 0
    || * _First != _Kseparator )
    break;
   else
    {
    _Groups . push_back ( '\000' );
    ++ _Group;
    }
   }

  if ( _Group != 0 )
   {
   if ( '\000' < _Groups [ _Group ] )
    {
    ++ _Group;
    }
   else
    {
    _Seendigit = false;
    }
   }

  for ( const char * _Pg = & _Grouping [ 0 ]; _Seendigit && 0 < _Group; )
   if ( * _Pg == 127 )
    break;
   else if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
    || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
    _Seendigit = false;
   else if ( '\000' < _Pg [ 1 ] )
    ++ _Pg;

  if ( _Seendigit && ! _Nonzero )
   * _Ptr ++ = '0';
  else if ( ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  return ( _Base );
  }

 int __cdecl _Getffld ( char * _Ac,
  _InIt & _First, _InIt & _Last,
  ios_base & _Iosbase, int * _Phexexp ) const
  {
  if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) == ios_base :: hexfloat )
   return ( _Getffldx ( _Ac, _First, _Last,
    _Iosbase, _Phexexp ) );

  const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  char * _Ptr = _Ac;
  bool _Bad = false;
  bool _Sticky = false;

  constexpr int _Numget_signoff = 10;
  constexpr int _Numget_eoff = 12;
  static constexpr char _Src [ ] = { "0123456789-+Ee" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  if ( _First != _Last )
   {
   if ( * _First == _Atoms [ _Numget_signoff + 1 ] )
    {
    * _Ptr ++ = '+';
    ++ _First;
    }
   else if ( * _First == _Atoms [ _Numget_signoff ] )
    {
    * _Ptr ++ = '-';
    ++ _First;
    }
   }

  char * _Leading = _Ptr;
  * _Ptr ++ = '0';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );

  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg == 127 || * _Pg <= '\000' )
   {
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
     _Seendigit = true, ( void ) ++ _First )
    {
    if ( _Max_sig_dig <= _Significant )
     {
     ++ _Pten;
     if ( 0 < _Idx )
      {
      _Sticky = true;
      }
     }
    else if ( _Idx != 0 || _Significant != 0 )
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
    }
   }
  else
   {
   const _Elem _Kseparator = _Grouping . size ( ) == 0
    ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );
   string _Groups ( ( size_t ) 1, '\000' );
   size_t _Group = 0;

   for (; _First != _Last; ++ _First )
    {
    if ( ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10 )
     {
     _Seendigit = true;
     if ( _Max_sig_dig <= _Significant )
      {
      ++ _Pten;
      if ( 0 < _Idx )
       {
       _Sticky = true;
       }
      }
     else if ( _Idx != 0 || _Significant != 0 )
      {
      * _Ptr ++ = _Src [ _Idx ];
      ++ _Significant;
      }

     if ( _Groups [ _Group ] != 127 )
      {
      ++ _Groups [ _Group ];
      }
     }
    else if ( _Groups [ _Group ] == '\000'
     || _Kseparator == ( _Elem ) 0
     || * _First != _Kseparator )
     {
     break;
     }
    else
     {
     _Groups . push_back ( '\000' );
     ++ _Group;
     }
    }

   if ( _Group != 0 )
    {
    if ( '\000' < _Groups [ _Group ] )
     {
     ++ _Group;
     }
    else
     {
     _Bad = true;
     }
    }

   while ( ! _Bad && 0 < _Group )
    {
    if ( * _Pg == 127 )
     {
     break;
     }

    if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
     || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
     {
     _Bad = true;
     }
    else if ( '\000' < _Pg [ 1 ] )
     {
     ++ _Pg;
     }
    }
   }

  if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) )
   {
   * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ];
   ++ _First;
   }

  if ( * _Phexexp != 1000000000 && _Significant == 0 )
   {
   for (; _First != _Last && * _First == _Atoms [ 0 ];
    _Seendigit = true, ( void ) ++ _First )
    -- _Pten;
   if ( _Pten < 0 )
    {
    * _Ptr ++ = '0';
    ++ _Pten;
    }
   }

  for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
    _Seendigit = true, ( void ) ++ _First )
   if ( _Significant < _Max_sig_dig )
    {
    * _Ptr ++ = _Src [ _Idx ];
    ++ _Significant;
    }
   else if ( 0 < _Idx )
    _Sticky = true;

  if ( _Sticky )
   {
   char * _Px = _Ptr;
   while ( -- _Px != _Leading )
    {
    if ( * _Px != localeconv ( ) -> decimal_point [ 0 ] )
     {
     if ( * _Px != '9' )
      {
      ++ * _Px;
      break;
      }

     * _Px = '0';
     }
    }

   if ( _Px == _Leading )
    {
    * _Px = '1';
    ++ _Pten;
    }
   }

  if ( _Seendigit && _First != _Last
   && ( * _First == _Atoms [ _Numget_eoff + 1 ]
    || * _First == _Atoms [ _Numget_eoff ] ) )
   {
   * _Ptr ++ = 'e';
   ++ _First;
   _Seendigit = false;
   _Significant = 0;

   if ( _First != _Last )
    {
    if ( * _First == _Atoms [ _Numget_signoff + 1 ] )
     {
     * _Ptr ++ = '+';
     ++ _First;
     }
    else if ( * _First == _Atoms [ _Numget_signoff ] )
     {
     * _Ptr ++ = '-';
     ++ _First;
     }
    }

   for (; _First != _Last && * _First == _Atoms [ 0 ]; ++ _First )
    {
    _Seendigit = true;
    }

   if ( _Seendigit )
    * _Ptr ++ = '0';
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < 10;
    _Seendigit = true, ( void ) ++ _First )
    if ( _Significant < 8 )
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
   }

  if ( _Bad || ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  return ( _Pten );
  }

 int __cdecl _Getffldx ( char * _Ac,
  _InIt & _First, _InIt & _Last,
  ios_base & _Iosbase, int * _Phexexp ) const
  {
  const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );

  constexpr int _Numget_signoff = 22;
  constexpr int _Numget_xoff = 24;
  constexpr int _Numget_poff = 26;
  static constexpr char _Src [ ] = { "0123456789ABCDEFabcdef-+XxPp" };
  _Elem _Atoms [ sizeof ( _Src ) ];
  const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
  _Ctype_fac . widen ( & _Src [ 0 ], & _Src [ sizeof ( _Src ) ], _Atoms );

  char * _Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if ( _First != _Last )
   {
   if ( * _First == _Atoms [ _Numget_signoff + 1 ] )
    {
    * _Ptr ++ = '+';
    ++ _First;
    }
   else if ( * _First == _Atoms [ _Numget_signoff ] )
    {
    * _Ptr ++ = '-';
    ++ _First;
    }
   }

  * _Ptr ++ = '0';
  * _Ptr ++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if ( _First != _Last && * _First == _Atoms [ 0 ] )
   {
   if ( ++ _First != _Last
    && ( * _First == _Atoms [ _Numget_xoff + 1 ]
     || * _First == _Atoms [ _Numget_xoff ] ) )
    {
    ++ _First;
    }
   else
    {
    _Seendigit = true;
    }
   }

  const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );

  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg == 127 || * _Pg <= '\000' )
   {
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _Numget_signoff;
     _Seendigit = true, ( void ) ++ _First )
    {
    if ( _Max_sig_dig <= _Significant )
     {
     ++ _Phex;
     }
    else if ( _Idx != 0 || _Significant != 0 )
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
    }
   }
  else
   {
   const _Elem _Kseparator = _Grouping . size ( ) == 0
    ? ( _Elem ) 0 : _Punct_fac . thousands_sep ( );
   string _Groups ( ( size_t ) 1, '\000' );
   size_t _Group = 0;

   for (; _First != _Last; ++ _First )
    {
    if ( ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _Numget_signoff )
     {
     _Seendigit = true;
     if ( _Max_sig_dig <= _Significant )
      {
      ++ _Phex;
      }
     else if ( _Idx != 0 || _Significant != 0 )
      {
      * _Ptr ++ = _Src [ _Idx ];
      ++ _Significant;
      }

     if ( _Groups [ _Group ] != 127 )
      {
      ++ _Groups [ _Group ];
      }
     }
    else if ( _Groups [ _Group ] == '\000'
     || _Kseparator == ( _Elem ) 0
     || * _First != _Kseparator )
     {
     break;
     }
    else
     {
     _Groups . push_back ( '\000' );
     ++ _Group;
     }
    }

   if ( _Group != 0 )
    {
    if ( '\000' < _Groups [ _Group ] )
     {
     ++ _Group;
     }
    else
     {
     _Bad = true;
     }
    }

   while ( ! _Bad && 0 < _Group )
    {
    if ( * _Pg == 127 )
     {
     break;
     }

    if ( ( 0 < -- _Group && * _Pg != _Groups [ _Group ] )
     || ( 0 == _Group && * _Pg < _Groups [ _Group ] ) )
     {
     _Bad = true;
     }
    else if ( '\000' < _Pg [ 1 ] )
     {
     ++ _Pg;
     }
    }
   }

  if ( _Seendigit && _Significant == 0 )
   * _Ptr ++ = '0';

  if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) )
   {
   * _Ptr ++ = localeconv ( ) -> decimal_point [ 0 ];
   ++ _First;
   }

  if ( _Significant == 0 )
   {
   for (; _First != _Last && * _First == _Atoms [ 0 ];
    _Seendigit = true, ( void ) ++ _First )
    -- _Phex;
   if ( _Phex < 0 )
    {
    * _Ptr ++ = '0';
    ++ _Phex;
    }
   }

  for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _Numget_signoff;
    _Seendigit = true, ( void ) ++ _First )
   if ( _Significant < _Max_sig_dig )
    {
    * _Ptr ++ = _Src [ _Idx ];
    ++ _Significant;
    }

  if ( _Seendigit && _First != _Last
   && ( * _First == _Atoms [ _Numget_poff + 1 ]
    || * _First == _Atoms [ _Numget_poff ] ) )
   {
   * _Ptr ++ = 'p';
   ++ _First;
   _Seendigit = false;
   _Significant = 0;

   if ( _First != _Last )
    {
    if ( * _First == _Atoms [ _Numget_signoff + 1 ] )
     {
     * _Ptr ++ = '+';
     ++ _First;
     }
    else if ( * _First == _Atoms [ _Numget_signoff ] )
     {
     * _Ptr ++ = '-';
     ++ _First;
     }
    }

   for (; _First != _Last && * _First == _Atoms [ 0 ]; ++ _First )
    {
    _Seendigit = true;
    }

   if ( _Seendigit )
    * _Ptr ++ = '0';
   for (; _First != _Last
    && ( _Idx = _Find_elem ( _Atoms, * _First ) ) < _Numget_signoff;
    _Seendigit = true, ( void ) ++ _First )
    if ( _Significant < 8 )
     {
     * _Ptr ++ = _Src [ _Idx ];
     ++ _Significant;
     }
   }

  if ( _Bad || ! _Seendigit )
   _Ptr = _Ac;
  * _Ptr = '\000';
  * _Phexexp = _Phex;
  return ( 0 );
  }



 };
#line 1402 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
template< class _Elem, class 
#line 1403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
_InIt> locale::id 
#line 1404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
num_get< _Elem, _InIt> ::id; 
#line 1411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
template < class _Elem,
 class _OutIt = ostreambuf_iterator < _Elem, char_traits < _Elem > > >
 class num_put
  : public locale :: facet
 {
public :
 static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr,
  const locale * _Ploc = nullptr )
  {
  if ( _Ppf != nullptr && * _Ppf == nullptr )
   * _Ppf = new num_put < _Elem, _OutIt > (
    _Locinfo ( _Ploc -> c_str ( ) ) );
  return ( 4 );
  }

  static locale :: id id;

protected :
 virtual ~ num_put ( ) noexcept
  {
  }

 void _Init ( const _Locinfo & )
  {
  }

public :
 explicit num_put ( size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  { _Locinfo _Lobj;
   _Init ( _Lobj );
  }
  }

  num_put ( const _Locinfo & _Lobj, size_t _Refs = 0 )
  : locale :: facet ( _Refs )
  {
  _Init ( _Lobj );
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, bool _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long long _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, double _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long double _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

 _OutIt put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const
  {
  return ( do_put ( _Dest, _Iosbase, _Fill, _Val ) );
  }

protected :
 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, bool _Val ) const
  {
  if ( ! ( _Iosbase . flags ( ) & ios_base :: boolalpha ) )
   return ( do_put ( _Dest, _Iosbase, _Fill, ( long ) _Val ) );
  else
   {
   const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
   basic_string < _Elem > _Str;
   if ( _Val )
    _Str . assign ( _Punct_fac . truename ( ) );
   else
    _Str . assign ( _Punct_fac . falsename ( ) );

   size_t _Fillcount = _Iosbase . width ( ) <= 0
    || ( size_t ) _Iosbase . width ( ) <= _Str . size ( )
     ? 0 : ( size_t ) _Iosbase . width ( ) - _Str . size ( );

   if ( ( _Iosbase . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
    {
    _Dest = _Rep ( _Dest, _Fill, _Fillcount );
    _Fillcount = 0;
    }
   _Dest = _Put ( _Dest, _Str . c_str ( ), _Str . size ( ) );
   _Iosbase . width ( 0 );
   return ( _Rep ( _Dest, _Fill, _Fillcount ) );
   }
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 6 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "ld",
    _Iosbase . flags ( ) ), _Val ) ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 6 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "lu",
    _Iosbase . flags ( ) ), _Val ) ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 8 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Ld",
    _Iosbase . flags ( ) ), _Val ) ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, unsigned long long _Val ) const
  {
  char _Buf [ 2 * 32 ], _Fmt [ 8 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Lu",
    _Iosbase . flags ( ) ), _Val ) ) ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, double _Val ) const
  {
  string _Buf;
  char _Fmt [ 8 ];
  bool _Isfixed = ( _Iosbase . flags ( ) & ios_base :: floatfield )
   == ios_base :: fixed;
  streamsize _Precision = _Iosbase . precision ( ) <= 0 && ! _Isfixed
   ? 6 : _Iosbase . precision ( );
  size_t _Bufsize = ( size_t ) _Precision;
  if ( _Isfixed && (10000000000.0) < :: fabs ( _Val ) )
   {
   int _Ptwo;
   ( void ) :: frexp ( _Val, & _Ptwo );
   _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
   }

  _Buf . resize ( _Bufsize + 50 );
  const auto _Ngen = static_cast < size_t > ( :: sprintf_s ( ( char * ) _Buf . c_str ( ), _Buf . size ( ),
   _Ffmt ( _Fmt, 0, _Iosbase . flags ( ) ), ( int ) _Precision, _Val ) );

  return ( _Fput ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, long double _Val ) const
  {
  string _Buf;
  char _Fmt [ 8 ];
  bool _Isfixed = ( _Iosbase . flags ( ) & ios_base :: floatfield )
   == ios_base :: fixed;
  streamsize _Precision = _Iosbase . precision ( ) <= 0 && ! _Isfixed
   ? 6 : _Iosbase . precision ( );
  size_t _Bufsize = ( size_t ) _Precision;
  if ( _Isfixed && (10000000000.0) < :: fabsl ( _Val ) )
   {
   int _Ptwo;
   ( void ) :: frexpl ( _Val, & _Ptwo );
   _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
   }

  _Buf . resize ( _Bufsize + 50 );
  const auto _Ngen = static_cast < size_t > ( :: sprintf_s ( ( char * ) _Buf . c_str ( ), _Buf . size ( ),
   _Ffmt ( _Fmt, 'L', _Iosbase . flags ( ) ), ( int ) _Precision, _Val ) );

  return ( _Fput ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen ) );
  }

 virtual _OutIt do_put ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const
  {
  char _Buf [ 2 * 32 ];

  return ( _Iput ( _Dest, _Iosbase, _Fill, _Buf,
   static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), "%p", _Val ) ) ) );
  }

private :
 char * __cdecl _Ffmt ( char * _Fmt,
  char _Spec, ios_base :: fmtflags _Flags ) const
  {
  char * _Ptr = _Fmt;
  * _Ptr ++ = '%';

  if ( _Flags & ios_base :: showpos )
   * _Ptr ++ = '+';
  if ( _Flags & ios_base :: showpoint )
   * _Ptr ++ = '#';
  * _Ptr ++ = '.';
  * _Ptr ++ = '*';
  if ( _Spec != '\000' )
   * _Ptr ++ = _Spec;

  ios_base :: fmtflags _Ffl = _Flags & ios_base :: floatfield;
  if ( _Flags & ios_base :: uppercase )
   * _Ptr ++ = _Ffl == ios_base :: fixed ? 'f'
    : _Ffl == ios_base :: hexfloat ? 'A'
    : _Ffl == ios_base :: scientific ? 'E' : 'G';
  else
   * _Ptr ++ = _Ffl == ios_base :: fixed ? 'f'
    : _Ffl == ios_base :: hexfloat ? 'a'
    : _Ffl == ios_base :: scientific ? 'e' : 'g';

  * _Ptr = '\000';
  return ( _Fmt );
  }

 _OutIt __cdecl _Fput ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, const char * _Buf,
   size_t _Count ) const
  {
  auto _Prefix = static_cast < size_t > ( 0 < _Count && ( * _Buf == '+' || * _Buf == '-' ) );
  const char * _Exps;
  if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) != ios_base :: hexfloat )
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if ( _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
    && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) )
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn ( & _Buf [ 0 ], _Exps );
  char _Dp [ 2 ] = { "." };
  _Dp [ 0 ] = :: localeconv ( ) -> decimal_point [ 0 ];
  const size_t _Poff =
   :: strcspn ( & _Buf [ 0 ], & _Dp [ 0 ] );

  const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
  basic_string < _Elem > _Groupstring ( _Count, _Elem ( 0 ) );
  _Ctype_fac . widen ( & _Buf [ 0 ], & _Buf [ _Count ], & _Groupstring [ 0 ] );

  const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const _Elem _Kseparator = _Punct_fac . thousands_sep ( );

  if ( _Poff != _Count )
   _Groupstring [ _Poff ] = _Punct_fac . decimal_point ( );

  size_t _Off = _Poff == _Count ? _Eoff : _Poff;
  const char * _Pg = & _Grouping [ 0 ];
  while ( * _Pg != 127 && '\000' < * _Pg
   && ( size_t ) * _Pg < _Off - _Prefix )
   {
   _Groupstring . insert ( _Off -= * _Pg, ( size_t ) 1, _Kseparator );
   if ( '\000' < _Pg [ 1 ] )
    ++ _Pg;
   }

  _Count = _Groupstring . size ( );
  size_t _Fillcount = _Iosbase . width ( ) <= 0
   || ( size_t ) _Iosbase . width ( ) <= _Count
    ? 0 : ( size_t ) _Iosbase . width ( ) - _Count;

  ios_base :: fmtflags _Adjustfield =
   _Iosbase . flags ( ) & ios_base :: adjustfield;
  if ( _Adjustfield != ios_base :: left
   && _Adjustfield != ios_base :: internal )
   {
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   }
  else if ( _Adjustfield == ios_base :: internal )
   {
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }
  else
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );

  _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
  _Iosbase . width ( 0 );
  return ( _Rep ( _Dest, _Fill, _Fillcount ) );
  }

 char * __cdecl _Ifmt ( char * _Fmt,
  const char * _Spec, ios_base :: fmtflags _Flags ) const
  {
  char * _Ptr = _Fmt;
  * _Ptr ++ = '%';

  if ( _Flags & ios_base :: showpos )
   * _Ptr ++ = '+';
  if ( _Flags & ios_base :: showbase )
   * _Ptr ++ = '#';
  if ( _Spec [ 0 ] != 'L' )
   * _Ptr ++ = _Spec [ 0 ];
  else

   {
   * _Ptr ++ = 'I';
   * _Ptr ++ = '6';
   * _Ptr ++ = '4';
   }

  ios_base :: fmtflags _Basefield = _Flags & ios_base :: basefield;
  * _Ptr ++ = _Basefield == ios_base :: oct ? 'o'
   : _Basefield != ios_base :: hex ? _Spec [ 1 ]
   : _Flags & ios_base :: uppercase ? 'X' : 'x';
  * _Ptr = '\000';
  return ( _Fmt );
  }

 _OutIt __cdecl _Iput ( _OutIt _Dest,
  ios_base & _Iosbase, _Elem _Fill, char * _Buf, size_t _Count ) const
  {
  auto _Prefix = static_cast < size_t > ( 0 < _Count && ( * _Buf == '+' || * _Buf == '-' ) );
  if ( ( _Iosbase . flags ( ) & ios_base :: basefield ) == ios_base :: hex
   && _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
   && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) )
   {
   _Prefix += 2;
   }

  const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
  basic_string < _Elem > _Groupstring ( _Count, _Elem ( 0 ) );
  _Ctype_fac . widen ( & _Buf [ 0 ], & _Buf [ _Count ], & _Groupstring [ 0 ] );

  const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
  const string _Grouping = _Punct_fac . grouping ( );
  const char * _Pg = & _Grouping [ 0 ];
  if ( * _Pg != 127 && '\000' < * _Pg )
   {
   const _Elem _Kseparator = _Punct_fac . thousands_sep ( );
   while ( * _Pg != 127 && '\000' < * _Pg
    && ( size_t ) * _Pg < _Count - _Prefix )
    {
    _Count -= * _Pg;
    _Groupstring . insert ( _Count, 1, _Kseparator );
    if ( '\000' < _Pg [ 1 ] )
     ++ _Pg;
    }
   }

  _Count = _Groupstring . size ( );
  size_t _Fillcount = _Iosbase . width ( ) <= 0
   || ( size_t ) _Iosbase . width ( ) <= _Count
    ? 0 : ( size_t ) _Iosbase . width ( ) - _Count;

  ios_base :: fmtflags _Adjustfield =
   _Iosbase . flags ( ) & ios_base :: adjustfield;
  if ( _Adjustfield != ios_base :: left
   && _Adjustfield != ios_base :: internal )
   {
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   }
  else if ( _Adjustfield == ios_base :: internal )
   {
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
   _Dest = _Rep ( _Dest, _Fill, _Fillcount );
   _Fillcount = 0;
   }
  else
   _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );

  _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
  _Iosbase . width ( 0 );
  return ( _Rep ( _Dest, _Fill, _Fillcount ) );
  }

 _OutIt __cdecl _Put ( _OutIt _Dest,
  const _Elem * _Ptr, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ( void ) ++ _Dest, ++ _Ptr )
   * _Dest = * _Ptr;
  return ( _Dest );
  }

 _OutIt __cdecl _Rep ( _OutIt _Dest,
  _Elem _Ch, size_t _Count ) const
  {
  for (; 0 < _Count; -- _Count, ( void ) ++ _Dest )
   * _Dest = _Ch;
  return ( _Dest );
  }
 };
#line 1841 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
template< class _Elem, class 
#line 1842 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
_OutIt> locale::id 
#line 1843 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
num_put< _Elem, _OutIt> ::id; 
#line 1873 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
}
#line 1876 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
#pragma warning(pop)
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
namespace std { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
template < class _Elem,
 class _Traits >
 class basic_ios
  : public ios_base
 {
public :
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef ctype < _Elem > _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 explicit basic_ios ( _Mysb * _Strbuf )
  {
  init ( _Strbuf );
  }

 virtual ~ basic_ios ( ) noexcept
  {
  }

 void clear ( iostate _State = goodbit, bool _Reraise = false )
  {
  ios_base :: clear ( _Mystrbuf == nullptr ? ( _State | ios_base :: badbit ) : _State, _Reraise );
  }


 void clear ( io_state _State )
  {
  clear ( ( iostate ) _State );
  }


 void setstate ( iostate _State, bool _Reraise = false )
  {
  clear ( rdstate ( ) | _State, _Reraise );
  }


 void setstate ( io_state _State )
  {
  setstate ( ( iostate ) _State );
  }


 basic_ios & copyfmt ( const basic_ios & _Right )
  {
  _Tiestr = _Right . tie ( );
  _Fillch = _Right . fill ( );
  ios_base :: copyfmt ( _Right );
  return ( * this );
  }

 _Myos * tie ( ) const
  {
  return ( _Tiestr );
  }

 _Myos * tie ( _Myos * _Newtie )
  {
  _Myos * _Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return ( _Oldtie );
  }

  _Mysb * rdbuf ( ) const
  {
  return ( _Mystrbuf );
  }

 _Mysb * rdbuf ( _Mysb * _Strbuf )
  {
  _Mysb * _Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear ( );
  return ( _Oldstrbuf );
  }

 locale imbue ( const locale & _Loc )
  {
  locale _Oldlocale = ios_base :: imbue ( _Loc );
  if ( rdbuf ( ) != nullptr )
   rdbuf ( ) -> pubimbue ( _Loc );
  return ( _Oldlocale );
  }

 _Elem fill ( ) const
  {
  return ( _Fillch );
  }

 _Elem fill ( _Elem _Newfill )
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return ( _Oldfill );
  }

 char narrow ( _Elem _Ch, char _Dflt = '\000' ) const
  {
  return ( :: std :: use_facet < _Ctype > ( getloc ( ) ) . narrow ( _Ch, _Dflt ) );
  }

 _Elem widen ( char _Byte ) const
  {
  return ( :: std :: use_facet < _Ctype > ( getloc ( ) ) . widen ( _Byte ) );
  }

 void move ( basic_ios & _Right )
  {
  if ( this != :: std :: addressof ( _Right ) )
   {
   _Mystrbuf = nullptr;
   _Tiestr = nullptr;
   this -> swap ( _Right );
   }
  }

 void move ( basic_ios && _Right )
  {
  if ( this != :: std :: addressof ( _Right ) )
   {
   _Mystrbuf = nullptr;
   _Tiestr = nullptr;
   this -> swap ( _Right );
   }
  }

 void swap ( basic_ios & _Right ) noexcept
  {
  ios_base :: swap ( _Right );
  :: std :: swap ( _Fillch, _Right . _Fillch );
  :: std :: swap ( _Tiestr, _Right . _Tiestr );
  }

 void set_rdbuf ( _Mysb * _Strbuf )
  {
  _Mystrbuf = _Strbuf;
  }

protected :
 void init ( _Mysb * _Strbuf = nullptr,
  bool _Isstd = false )
  {
  _Init ( );
  _Mystrbuf = _Strbuf;
  _Tiestr = nullptr;
  _Fillch = widen ( ' ' );

  if ( _Mystrbuf == nullptr )
   setstate ( badbit );

  if ( _Isstd )
   _Addstd ( this );
  }

  basic_ios ( )
  {
  }

private :
 _Mysb * _Mystrbuf;
 _Myos * _Tiestr;
 _Elem _Fillch;

public :
  basic_ios ( const basic_ios & ) = delete;
 basic_ios & operator = ( const basic_ios & ) = delete;
 };
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl boolalpha(ios_base &_Iosbase) 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::boolalpha); 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl dec(ios_base &_Iosbase) 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::dec, _Iosb< int> ::basefield); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl defaultfloat(ios_base &_Iosbase) 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::floatfield); 
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl fixed(ios_base &_Iosbase) 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::fixed, _Iosb< int> ::floatfield); 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl hex(ios_base &_Iosbase) 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::hex, _Iosb< int> ::basefield); 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl hexfloat(ios_base &_Iosbase) 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::hexfloat, _Iosb< int> ::floatfield); 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl internal(ios_base &_Iosbase) 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::internal, _Iosb< int> ::adjustfield); 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl left(ios_base &_Iosbase) 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::left, _Iosb< int> ::adjustfield); 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl noboolalpha(ios_base &_Iosbase) 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::boolalpha); 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl noshowbase(ios_base &_Iosbase) 
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::showbase); 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl noshowpoint(ios_base &_Iosbase) 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::showpoint); 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl noshowpos(ios_base &_Iosbase) 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::showpos); 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl noskipws(ios_base &_Iosbase) 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::skipws); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl nounitbuf(ios_base &_Iosbase) 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::unitbuf); 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl nouppercase(ios_base &_Iosbase) 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.unsetf(_Iosb< int> ::uppercase); 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl oct(ios_base &_Iosbase) 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::oct, _Iosb< int> ::basefield); 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl right(ios_base &_Iosbase) 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::right, _Iosb< int> ::adjustfield); 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl scientific(ios_base &_Iosbase) 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::scientific, _Iosb< int> ::floatfield); 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl showbase(ios_base &_Iosbase) 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::showbase); 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl showpoint(ios_base &_Iosbase) 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::showpoint); 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl showpos(ios_base &_Iosbase) 
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::showpos); 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl skipws(ios_base &_Iosbase) 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::skipws); 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl unitbuf(ios_base &_Iosbase) 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::unitbuf); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
inline ios_base &__cdecl uppercase(ios_base &_Iosbase) 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
{ 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
_Iosbase.setf(_Iosb< int> ::uppercase); 
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
return _Iosbase; 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
} 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 { 
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
using std::hexfloat;
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
}
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
}
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
#pragma warning(pop)
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
namespace std { 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
#pragma vtordisp(push, 2)
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Elem,
 class _Traits >
 class basic_ostream
  : virtual public basic_ios < _Elem, _Traits >
 {
public :
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef ostreambuf_iterator < _Elem, _Traits > _Iter;
 typedef num_put < _Elem, _Iter > _Nput;

 explicit basic_ostream (
  basic_streambuf < _Elem, _Traits > * _Strbuf,

  bool _Isstd = false )
  {
  _Myios :: init ( _Strbuf, _Isstd );
  }

  basic_ostream ( _Uninitialized, bool _Addit = true )
  {
  if ( _Addit )
   this -> _Addstd ( this );
  }

protected :
  basic_ostream ( basic_ostream && _Right )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: move ( _Right ) );
  }

 basic_ostream & operator = ( basic_ostream && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( basic_ostream & _Right )
  {
  if ( this != :: std :: addressof ( _Right ) )
   _Myios :: swap ( _Right );
  }

public :
  basic_ostream ( const basic_ostream & ) = delete;
 basic_ostream & operator = ( const basic_ostream & ) = delete;

 virtual ~ basic_ostream ( ) noexcept
  {
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 class _Sentry_base
  {
 public :
   _Sentry_base ( basic_ostream & _Ostr )
   : _Myostr ( _Ostr )
   {
   if ( _Myostr . rdbuf ( ) != nullptr )
    _Myostr . rdbuf ( ) -> _Lock ( );
   }

   ~ _Sentry_base ( ) noexcept
   {
   if ( _Myostr . rdbuf ( ) != nullptr )
    _Myostr . rdbuf ( ) -> _Unlock ( );
   }

  basic_ostream & _Myostr;

  _Sentry_base & operator = ( const _Sentry_base & ) = delete;
  };

 class sentry
  : public _Sentry_base
  {
 public :
  explicit sentry ( basic_ostream & _Ostr )
   : _Sentry_base ( _Ostr )
   {
   if ( _Ostr . good ( ) && _Ostr . tie ( ) != nullptr && _Ostr . tie ( ) != & _Ostr )
    _Ostr . tie ( ) -> flush ( );
   _Ok = _Ostr . good ( );
   }





  #pragma warning(push)
  #pragma warning(disable: 4996)

   ~ sentry ( ) noexcept
   {

   if ( ! :: std :: uncaught_exception ( ) )
    {
    this -> _Myostr . _Osfx ( );
    }



   }



  #pragma warning(pop)


  explicit operator bool ( ) const
   {
   return ( _Ok );
   }

   sentry ( const sentry & ) = delete;
  sentry & operator = ( const sentry & ) = delete;

 private :
  bool _Ok;
  };

 bool opfx ( )
  {
  if ( this -> good ( ) && _Myios :: tie ( ) != nullptr && _Myios :: tie ( ) != this )
   _Myios :: tie ( ) -> flush ( );
  return ( this -> good ( ) );
  }

 void osfx ( )
  {
  _Osfx ( );
  }

 void _Osfx ( )
  {
  try {
  if ( this -> good ( ) && this -> flags ( ) & ios_base :: unitbuf )
   if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
    _Myios :: setstate ( ios_base :: badbit );
  } catch ( ... ) {
  }
  }




















 basic_ostream & operator << ( basic_ostream & ( __cdecl * _Pfn ) ( basic_ostream & ) )
  {
  return ( ( * _Pfn ) ( * this ) );
  }

 basic_ostream & operator << ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) )
  {
  ( * _Pfn ) ( * ( _Myios * ) this );
  return ( * this );
  }

 basic_ostream & operator << ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) )
  {
  ( * _Pfn ) ( * ( ios_base * ) this );
  return ( * this );
  }

 basic_ostream & operator << ( bool _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( short _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );
   ios_base :: fmtflags _Bfl =
    this -> flags ( ) & ios_base :: basefield;
   long _Tmp = ( _Bfl == ios_base :: oct
    || _Bfl == ios_base :: hex )
    ? ( long ) ( unsigned short ) _Val : ( long ) _Val;

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Tmp ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }










 basic_ostream & operator << ( unsigned short _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( int _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );
   ios_base :: fmtflags _Bfl =
    this -> flags ( ) & ios_base :: basefield;
   long _Tmp = ( _Bfl == ios_base :: oct
    || _Bfl == ios_base :: hex )
    ? ( long ) ( unsigned int ) _Val : ( long ) _Val;

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Tmp ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( unsigned int _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( unsigned long ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( unsigned long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( long long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( unsigned long long _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( float _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), ( double ) _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( double _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( long double _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & operator << ( const void * _Val )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

   try {
   if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this,
    _Myios :: fill ( ), _Val ) . failed ( ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }









 basic_ostream & operator << ( _Mysb * _Strbuf )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  bool _Copied = false;
  const sentry _Ok ( * this );

  if ( _Ok && _Strbuf != nullptr )
   for ( int_type _Meta = _Traits :: eof ( );; _Copied = true )
    {
    try {
    _Meta = _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
     ? _Strbuf -> sgetc ( ) : _Strbuf -> snextc ( );
    } catch ( ... ) {
     _Myios :: setstate ( ios_base :: failbit );
     throw;
    }

    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     break;

    try {
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
      _Myios :: rdbuf ( ) -> sputc (
       _Traits :: to_char_type ( _Meta ) ) ) )
      {
      _State |= ios_base :: badbit;
      break;
      }
    } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
    }

  this -> width ( 0 );
  _Myios :: setstate ( _Strbuf == nullptr ? ios_base :: badbit
   : ! _Copied ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 basic_ostream & put ( _Elem _Ch )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( ! _Ok )
   _State |= ios_base :: badbit;
  else
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sputc ( _Ch ) ) )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & write ( const _Elem * _Str,
  streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( ! _Ok )
   _State |= ios_base :: badbit;
  else if ( 0 < _Count )
   {
   try {
   if ( _Myios :: rdbuf ( ) -> sputn ( _Str, _Count ) != _Count )
    _State |= ios_base :: badbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_ostream & flush ( )
  {
  if ( _Myios :: rdbuf ( ) != nullptr )
   {
   const sentry _Ok ( * this );

   if ( _Ok && _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
    _Myios :: setstate ( ios_base :: badbit );
   }
  return ( * this );
  }

 basic_ostream & seekp ( pos_type _Pos )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekpos ( _Pos,
    ios_base :: out ) == - 1 )
   _Myios :: setstate ( ios_base :: failbit );
  return ( * this );
  }

 basic_ostream & seekp ( off_type _Off, ios_base :: seekdir _Way )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way,
    ios_base :: out ) == - 1 )
   _Myios :: setstate ( ios_base :: failbit );
  return ( * this );
  }

 pos_type tellp ( )
  {
  const sentry _Ok ( * this );

  if ( ! this -> fail ( ) )
   return ( _Myios :: rdbuf ( ) -> pubseekoff ( 0,
    ios_base :: cur, ios_base :: out ) );
  else
   return ( pos_type ( - 1 ) );
  }
 };
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
#pragma vtordisp(pop)
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, const char * _Val )
 {
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) :: strlen ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Ostr . getloc ( ) );
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  for (; _State == ios_base :: goodbit && 0 < _Count; -- _Count, ++ _Val )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( * _Val ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, char _Ch )
 {
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Ostr . getloc ( ) );
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( _Ch ) ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr,
  const char * _Val )
 {
 typedef char _Elem;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) _Traits :: length ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count )
   _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, char _Ch )
 {
 typedef char _Elem;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * _Val )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;

 ios_base :: iostate _State = ios_base :: goodbit;
 streamsize _Count = ( streamsize ) _Traits :: length ( _Val );
 streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count
  ? 0 : _Ostr . width ( ) - _Count;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( ! _Ok )
  _State |= ios_base :: badbit;
 else
  {
  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }

  if ( _State == ios_base :: goodbit
   && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count )
   _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit )
   for (; 0 < _Pad; -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     {
     _State |= ios_base :: badbit;
     break;
     }
  _Ostr . width ( 0 );
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 919 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > & operator << (
  basic_ostream < _Elem, _Traits > & _Ostr, _Elem _Ch )
 {
 typedef basic_ostream < _Elem, _Traits > _Myos;

 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myos :: sentry _Ok ( _Ostr );

 if ( _Ok )
  {
  streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

  try {
  if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left )
   for (; _State == ios_base :: goodbit && 0 < _Pad;
    -- _Pad )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
     _State |= ios_base :: badbit;

  if ( _State == ios_base :: goodbit
   && _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) )
   _State |= ios_base :: badbit;

  for (; _State == ios_base :: goodbit && 0 < _Pad;
   -- _Pad )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) )
    _State |= ios_base :: badbit;
  } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Ostr . width ( 0 );
 _Ostr . setstate ( _State );
 return ( _Ostr );
 }
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, const signed char * _Val )
 {
 return ( _Ostr << ( const char * ) _Val );
 }
#line 966 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, signed char _Ch )
 {
 return ( _Ostr << ( char ) _Ch );
 }
#line 973 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, const unsigned char * _Val )
 {
 return ( _Ostr << ( const char * ) _Val );
 }
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Traits > inline
 basic_ostream < char, _Traits > & operator << (
  basic_ostream < char, _Traits > & _Ostr, unsigned char _Ch )
 {
 return ( _Ostr << ( char ) _Ch );
 }
#line 987 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template< class _Ostr, class 
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
_Ty, class 
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
 = void> 
#line 990 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
struct _Can_stream_out : public false_type { 
#line 993 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
}; 
#line 995 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template< class _Ostr, class 
#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
_Ty> 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
struct _Can_stream_out< _Ostr, _Ty, void_t< decltype((std::declval< _Ostr &> () << std::declval< const _Ty &> ()))> >  : public true_type { 
#line 1000 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
}; 
#line 1002 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Ostr,
 class _Ty,
 enable_if_t < conjunction_v <
  negation < is_lvalue_reference < _Ostr > >,
  is_base_of < ios_base, _Ostr >,
  _Can_stream_out < _Ostr, _Ty > >, int > = 0 > inline
 _Ostr && operator << ( _Ostr && _Os, const _Ty & _Val )
 {
 _Os << _Val;
 return ( :: std :: move ( _Os ) );
 }
#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl endl ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . put ( _Ostr . widen ( '\n' ) );
 _Ostr . flush ( );
 return ( _Ostr );
 }
#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl ends ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . put ( _Elem ( ) );
 return ( _Ostr );
 }
#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  __cdecl flush ( basic_ostream < _Elem, _Traits > & _Ostr )
 {
 _Ostr . flush ( );
 return ( _Ostr );
 }
#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
template < class _Elem,
 class _Traits > inline
 basic_ostream < _Elem, _Traits > &
  operator << ( basic_ostream < _Elem, _Traits > & _Ostr,
   const error_code & _Errcode )
 {
 return ( _Ostr << _Errcode . category ( ) . name ( ) << ':' << _Errcode . value ( ) );
 }
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
}
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
#pragma warning(pop)
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
namespace std { 
#pragma vtordisp(push, 2)
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template < class _Elem,
 class _Traits >
 class basic_istream
  : virtual public basic_ios < _Elem, _Traits >
 {
public :
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef basic_streambuf < _Elem, _Traits > _Mysb;
 typedef istreambuf_iterator < _Elem, _Traits > _Iter;
 typedef ctype < _Elem > _Ctype;
 typedef num_get < _Elem, _Iter > _Nget;











 explicit basic_istream ( _Mysb * _Strbuf,
  bool _Isstd = false )

  : _Chcount ( 0 )
  {
  _Myios :: init ( _Strbuf, _Isstd );
  }

  basic_istream ( _Uninitialized )
  {
  this -> _Addstd ( this );
  }

protected :
  basic_istream ( basic_istream && _Right )
  : _Chcount ( _Right . _Chcount )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: move ( _Right ) );
  _Right . _Chcount = 0;
  }

 basic_istream & operator = ( basic_istream && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( basic_istream & _Right )
  {
  _Myios :: swap ( _Right );
  :: std :: swap ( _Chcount, _Right . _Chcount );
  }

public :
  basic_istream ( const basic_istream & ) = delete;
 basic_istream & operator = ( const basic_istream & ) = delete;

 virtual ~ basic_istream ( ) noexcept
  {
  }

 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;


 class _Sentry_base
  {
 public :
   _Sentry_base ( basic_istream & _Istr )
   : _Myistr ( _Istr )
   {
   if ( _Myistr . rdbuf ( ) != nullptr )
    _Myistr . rdbuf ( ) -> _Lock ( );
   }

   ~ _Sentry_base ( ) noexcept
   {
   if ( _Myistr . rdbuf ( ) != nullptr )
    _Myistr . rdbuf ( ) -> _Unlock ( );
   }

  basic_istream & _Myistr;

  _Sentry_base & operator = ( const _Sentry_base & ) = delete;
  };

 class sentry
  : public _Sentry_base
  {
 public :
  explicit sentry ( basic_istream & _Istr, bool _Noskip = false )
   : _Sentry_base ( _Istr )
   {
   _Ok = this -> _Myistr . _Ipfx ( _Noskip );
   }

  explicit operator bool ( ) const
   {
   return ( _Ok );
   }

   sentry ( const sentry & ) = delete;
  sentry & operator = ( const sentry & ) = delete;

 private :
  bool _Ok;
  };

 bool _Ipfx ( bool _Noskip = false )
  {
  if ( this -> good ( ) )
   {
   if ( _Myios :: tie ( ) != nullptr )
    _Myios :: tie ( ) -> flush ( );

   if ( ! _Noskip && this -> flags ( ) & ios_base :: skipws )
    {
    const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( this -> getloc ( ) );

    try {
    int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

    for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
      {
      _Myios :: setstate ( ios_base :: eofbit );
      break;
      }
     else if ( ! _Ctype_fac . is ( _Ctype :: space,
      _Traits :: to_char_type ( _Meta ) ) )
      break;
    } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
    }

   if ( this -> good ( ) )
    return ( true );
   }
  _Myios :: setstate ( ios_base :: failbit );
  return ( false );
  }

 bool ipfx ( bool _Noskip = false )
  {
  return ( _Ipfx ( _Noskip ) );
  }

 void isfx ( )
  {
  }




















 basic_istream & operator >> ( basic_istream & ( __cdecl * _Pfn ) ( basic_istream & ) )
  {
  return ( ( * _Pfn ) ( * this ) );
  }

 basic_istream & operator >> ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) )
  {
  ( * _Pfn ) ( * ( _Myios * ) this );
  return ( * this );
  }

 basic_istream & operator >> ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) )
  {
  ( * _Pfn ) ( * ( ios_base * ) this );
  return ( * this );
  }

private :
 template < class _Ty >
  basic_istream & _Common_extract_with_num_get ( _Ty & _Val )
  {
  ios_base :: iostate _Err = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   try {
   :: std :: use_facet < _Nget > ( this -> getloc ( ) ) . get ( * this, { }, * this, _Err, _Val );
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _Err );
  return ( * this );
  }

public :
 basic_istream & operator >> ( bool & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( short & _Val )
  {
  ios_base :: iostate _Err = ios_base :: goodbit;
  const sentry _Ok ( * this );

  if ( _Ok )
   {
   try {
   long _Lval;
   :: std :: use_facet < _Nget > ( this -> getloc ( ) ) . get ( * this, { }, * this, _Err, _Lval );
   if ( _Lval < ( - 32768 ) )
    {
    _Err |= ios_base :: failbit;
    _Val = ( - 32768 );
    }
   else if ( _Lval > 32767 )
    {
    _Err |= ios_base :: failbit;
    _Val = 32767;
    }
   else
    {
    _Val = static_cast < short > ( _Lval );
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _Err );
  return ( * this );
  }










 basic_istream & operator >> ( unsigned short & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( int & _Val )
  {
  static_assert ( sizeof ( int ) == sizeof ( long ),
   "Bad overflow assumptions due to sizeof(int) != sizeof(long)" );
  long _Result = _Val;
  _Common_extract_with_num_get ( _Result );
  _Val = _Result;
  return ( * this );
  }

 basic_istream & operator >> ( unsigned int & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( long & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( unsigned long & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( long long & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( unsigned long long & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( float & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( double & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( long double & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( void * & _Val )
  {
  return ( _Common_extract_with_num_get ( _Val ) );
  }

 basic_istream & operator >> ( _Mysb * _Strbuf )
  {
  _Chcount = 0;
  const sentry _Ok ( * this, true );
  ios_base :: iostate _State = ios_base :: goodbit;
  if ( _Ok && _Strbuf != nullptr )
   {
   try {
   for ( int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    {
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }

    try {
     if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Strbuf -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) )
      {
      break;
      }

    } catch ( ... ) {
     break;
    }

    ++ _Chcount;
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  if ( _Chcount == 0 )
   {
   _State = ios_base :: failbit;
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 int_type get ( )
  {
  int_type _Meta = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( ! _Ok )
   _Meta = _Traits :: eof ( );
  else
   {
   try {
   _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    _State |= ios_base :: eofbit | ios_base :: failbit;
   else
    {
    _Myios :: rdbuf ( ) -> sbumpc ( );
    ++ _Chcount;
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( _Meta );
  }

 basic_istream & get ( _Elem * _Str, streamsize _Count )
  {
  return ( get ( _Str, _Count, _Myios :: widen ( '\n' ) ) );
  }

 basic_istream & get ( _Elem * _Str,
  streamsize _Count, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (; 0 < -- _Count; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( _Traits :: to_char_type ( _Meta ) == _Delim )
     break;
    else
     {
     * _Str ++ = _Traits :: to_char_type ( _Meta );
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _Chcount == 0
   ? _State | ios_base :: failbit : _State );
  * _Str = _Elem ( );
  return ( * this );
  }

 basic_istream & get ( _Elem & _Ch )
  {
  int_type _Meta = get ( );
  if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   _Ch = _Traits :: to_char_type ( _Meta );
  return ( * this );
  }

 basic_istream & get ( _Mysb & _Strbuf )
  {
  return ( get ( _Strbuf, _Myios :: widen ( '\n' ) ) );
  }

 basic_istream & get ( _Mysb & _Strbuf, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits :: to_char_type ( _Meta );
      if ( _Ch == _Delim
       || _Traits :: eq_int_type ( _Traits :: eof ( ),
        _Strbuf . sputc ( _Ch ) ) )
       break;
     } catch ( ... ) {
      break;
     }
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  if ( _Chcount == 0 )
   _State |= ios_base :: failbit;
  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_istream & getline ( _Elem * _Str, streamsize _Count )
  {
  return ( getline ( _Str, _Count, _Myios :: widen ( '\n' ) ) );
  }

 basic_istream & getline ( _Elem * _Str,
  streamsize _Count, _Elem _Delim )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   int_type _Metadelim = _Traits :: to_int_type ( _Delim );

   try {
   int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

   for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) )
    if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else if ( _Meta == _Metadelim )
     {
     ++ _Chcount;
     _Myios :: rdbuf ( ) -> sbumpc ( );
     break;
     }
    else if ( -- _Count <= 0 )
     {
     _State |= ios_base :: failbit;
     break;
     }
    else
     {
     * _Str ++ = _Traits :: to_char_type ( _Meta );
     ++ _Chcount;
     }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  * _Str = _Elem ( );
  _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
  return ( * this );
  }

 basic_istream & ignore ( streamsize _Count = 1,
  int_type _Metadelim = _Traits :: eof ( ) )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   for (;; )
    {
    int_type _Meta;
    if ( _Count != ( numeric_limits < streamsize > :: max ) ( )
     && -- _Count < 0 )
     break;
    else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
     _Meta = _Myios :: rdbuf ( ) -> sbumpc ( ) ) )
     {
     _State |= ios_base :: eofbit;
     break;
     }
    else
     {
     ++ _Chcount;
     if ( _Meta == _Metadelim )
      break;
     }
    }
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_istream & read ( _Elem * _Str, streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );

  if ( _Ok && 0 < _Count )
   {
   try {
   const streamsize _Num = _Myios :: rdbuf ( ) -> sgetn ( _Str, _Count );
   _Chcount += _Num;
   if ( _Num != _Count )
    _State |= ios_base :: eofbit | ios_base :: failbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 streamsize readsome ( _Elem * _Str,
  streamsize _Count )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  const sentry _Ok ( * this, true );
  streamsize _Num;

  if ( ! _Ok )
   _State |= ios_base :: failbit;
  else if ( ( _Num = _Myios :: rdbuf ( ) -> in_avail ( ) ) < 0 )
   _State |= ios_base :: eofbit;
  else if ( 0 < _Count && 0 < _Num )
   {
   read ( _Str, _Num < _Count ? _Num : _Count );
   }

  _Myios :: setstate ( _State );
  return ( gcount ( ) );
  }

 int_type peek ( )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok ( * this, true );

  if ( ! _Ok )
   _Meta = _Traits :: eof ( );
  else
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Meta = _Myios :: rdbuf ( ) -> sgetc ( ) ) )
    _State |= ios_base :: eofbit;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( _Meta );
  }

 basic_istream & putback ( _Elem _Ch )
  {
  _Chcount = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sputbackc ( _Ch ) ) )
    _State |= ios_base :: badbit | _Oldstate;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

 basic_istream & unget ( )
  {
  _Chcount = 0;
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( _Ok )
   {
   try {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
    _Myios :: rdbuf ( ) -> sungetc ( ) ) )
    _State |= ios_base :: badbit | _Oldstate;
   } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
   }

  _Myios :: setstate ( _State );
  return ( * this );
  }

  streamsize gcount ( ) const
  {
  return ( _Chcount );
  }

 int sync ( )
  {
  const sentry _Ok ( * this, true );

  if ( _Myios :: rdbuf ( ) == nullptr )
   return ( - 1 );
  else if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 )
   {
   _Myios :: setstate ( ios_base :: badbit );
   return ( - 1 );
   }
  else
   return ( 0 );
  }

 basic_istream & seekg ( pos_type _Pos )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekpos ( _Pos,
    ios_base :: in ) == - 1 )
   _Myios :: setstate ( _State | ios_base :: failbit );
  return ( * this );
  }

 basic_istream & seekg ( off_type _Off, ios_base :: seekdir _Way )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
  _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( )
   && ( off_type ) _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way,
    ios_base :: in ) == - 1 )
   _Myios :: setstate ( _State | ios_base :: failbit );
  return ( * this );
  }

 pos_type tellg ( )
  {
  const sentry _Ok ( * this, true );

  if ( ! this -> fail ( ) )
   return ( _Myios :: rdbuf ( ) -> pubseekoff ( 0,
    ios_base :: cur, ios_base :: in ) );
  else
   return ( pos_type ( - 1 ) );
  }

private :
 streamsize _Chcount;
 };
#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
#pragma vtordisp(pop)
#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template < class _Elem,
 class _Traits >
 class basic_iostream
 : public basic_istream < _Elem, _Traits >,
  public basic_ostream < _Elem, _Traits >
 {
public :
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef basic_ostream < _Elem, _Traits > _Myos;
 typedef basic_ios < _Elem, _Traits > _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits :: int_type int_type;
 typedef typename _Traits :: pos_type pos_type;
 typedef typename _Traits :: off_type off_type;

 explicit basic_iostream ( basic_streambuf < _Elem, _Traits > * _Strbuf )
  : _Myis ( _Strbuf, false ),
   _Myos ( _Noinit, false )
  {
  }

protected :
  basic_iostream ( basic_iostream && _Right )
  : _Myis ( _Right . rdbuf ( ), false ),
   _Myos ( _Noinit, false )
  {
  _Myios :: init ( );
  _Myios :: move ( :: std :: move ( _Right ) );
  }

 basic_iostream & operator = ( basic_iostream && _Right )
  {
  this -> swap ( _Right );
  return ( * this );
  }

 void swap ( basic_iostream & _Right )
  {
  if ( this != :: std :: addressof ( _Right ) )
   _Myios :: swap ( _Right );
  }

public :
  basic_iostream ( const basic_iostream & ) = delete;
 basic_iostream & operator = ( const basic_iostream & ) = delete;

 virtual ~ basic_iostream ( ) noexcept
  {
  }
 };
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr, _Elem * _Str )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;
 typedef ctype < _Elem > _Ctype;
 ios_base :: iostate _State = ios_base :: goodbit;
 _Elem * _Str0 = _Str;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( _Istr . getloc ( ) );

  try {
  streamsize _Count = 0 < _Istr . width ( ) ? _Istr . width ( )
   : ( numeric_limits < streamsize > :: max ) ( );
  typename _Myis :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );
  _Elem _Ch;
  for (; 0 < -- _Count; _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( _Ctype_fac . is ( _Ctype :: space,
    _Ch = _Traits :: to_char_type ( _Meta ) )
     || _Ch == _Elem ( ) )
    break;
   else
    * _Str ++ = _Traits :: to_char_type ( _Meta );
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 * _Str = _Elem ( );
 _Istr . width ( 0 );
 _Istr . setstate ( _Str == _Str0 ? _State | ios_base :: failbit : _State );
 return ( _Istr );
 }
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > & operator >> (
  basic_istream < _Elem, _Traits > & _Istr, _Elem & _Ch )
 {
 typedef basic_istream < _Elem, _Traits > _Myis;

 typename _Myis :: int_type _Meta;
 ios_base :: iostate _State = ios_base :: goodbit;
 const typename _Myis :: sentry _Ok ( _Istr );

 if ( _Ok )
  {
  try {
  _Meta = _Istr . rdbuf ( ) -> sbumpc ( );
  if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
   _State |= ios_base :: eofbit | ios_base :: failbit;
  else
   _Ch = _Traits :: to_char_type ( _Meta );
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  }

 _Istr . setstate ( _State );
 return ( _Istr );
 }
#line 918 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, signed char * _Str )
 {
 return ( _Istr >> ( char * ) _Str );
 }
#line 925 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, signed char & _Ch )
 {
 return ( _Istr >> ( char & ) _Ch );
 }
#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, unsigned char * _Str )
 {
 return ( _Istr >> ( char * ) _Str );
 }
#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template < class _Traits > inline
 basic_istream < char, _Traits > & operator >> (
  basic_istream < char, _Traits > & _Istr, unsigned char & _Ch )
 {
 return ( _Istr >> ( char & ) _Ch );
 }
#line 946 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template< class _Istr, class 
#line 947 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
_Ty, class 
#line 948 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
 = void> 
#line 949 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
struct _Can_stream_in : public false_type { 
#line 952 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
}; 
#line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template< class _Istr, class 
#line 955 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
_Ty> 
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
struct _Can_stream_in< _Istr, _Ty, void_t< decltype((std::declval< _Istr &> () >> std::declval< _Ty> ()))> >  : public true_type { 
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
}; 
#line 961 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template < class _Istr,
 class _Ty,
 enable_if_t < conjunction_v <
  negation < is_lvalue_reference < _Istr > >,
  is_base_of < ios_base, _Istr >,
  _Can_stream_in < _Istr, _Ty > >, int > = 0 > inline
 _Istr && operator >> ( _Istr && _Is, _Ty && _Val )
 {
 _Is >> :: std :: forward < _Ty > ( _Val );
 return ( :: std :: move ( _Is ) );
 }
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
template < class _Elem,
 class _Traits > inline
 basic_istream < _Elem, _Traits > &
  __cdecl ws ( basic_istream < _Elem, _Traits > & _Istr )
 {
 const typename basic_istream < _Elem, _Traits > :: sentry _Ok ( _Istr, true );

 if ( _Ok )
  {
  ios_base :: iostate _State = ios_base :: goodbit;
  const auto & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Istr . getloc ( ) );

  try {
  for ( typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );; _Meta = _Istr . rdbuf ( ) -> snextc ( ) )
   {
   if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) )
    {
    _State |= ios_base :: eofbit;
    break;
    }
   else if ( ! _Ctype_fac . is ( ctype < _Elem > :: space, _Traits :: to_char_type ( _Meta ) ) )
    {
    break;
    }
   }
  } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
  _Istr . setstate ( _State );
  }

 return ( _Istr );
 }
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
}
#line 1009 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
#pragma warning(pop)
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
#pragma pack ( push, 8 )
#pragma warning(push,3)
#pragma warning(disable: 4455 4494 4619 4643 4702 4984 4988 )
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
namespace std { 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
extern istream cin, *_Ptr_cin; 
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
extern ostream cout, *_Ptr_cout; 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
extern ostream cerr, *_Ptr_cerr; 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
extern ostream clog, *_Ptr_clog; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
extern wistream wcin, *_Ptr_wcin; 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
extern wostream wcout, *_Ptr_wcout; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
extern wostream wcerr, *_Ptr_wcerr; 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
extern wostream wclog, *_Ptr_wclog; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
class _Winit { 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
public: __thiscall _Winit(); 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
__thiscall ~_Winit() noexcept; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
private: static int _Init_cnt; 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
}; 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
}
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\iostream"
#pragma warning(pop)
#pragma pack ( pop )
#line 2 "src/CudaControler.h"
class CudaControler { 
#line 5 "src/CudaControler.h"
public: static void doSomething(); 
#line 6 "src/CudaControler.h"
}; 
#line 9 "src/CudaControler.cu"
using namespace std;
#line 14 "src/CudaControler.cu"
static void gpuAssert(cudaError_t err, const char *file, int line) { 
#line 15 "src/CudaControler.cu"
if (err != (cudaSuccess)) { 
#line 16 "src/CudaControler.cu"
printf("%s in %s at line %d\n", cudaGetErrorString(err), file, line); 
#line 18 "src/CudaControler.cu"
system("pause"); 
#line 20 "src/CudaControler.cu"
exit(1); 
#line 21 "src/CudaControler.cu"
}  
#line 22 "src/CudaControler.cu"
} 
#line 24 "src/CudaControler.cu"
void CudaControler::doSomething() 
#line 25 "src/CudaControler.cu"
{ 
#line 26 "src/CudaControler.cu"
(((cout << ("Hello World\n"))) << (endl)); 
#line 28 "src/CudaControler.cu"
int n = 10000; 
#line 29 "src/CudaControler.cu"
int *a; 
#line 30 "src/CudaControler.cu"
int *dev_a; 
#line 32 "src/CudaControler.cu"
if ((0) == (a = ((int *)malloc(n * sizeof(int))))) { exit(20); }  
#line 34 "src/CudaControler.cu"
int c = (32 + 23); 
#line 35 "src/CudaControler.cu"
c += 1; 
#line 37 "src/CudaControler.cu"
printf("%d\n", c); 
#line 39 "src/CudaControler.cu"
system("PAUSE"); 
#line 40 "src/CudaControler.cu"
gpuAssert(cudaMalloc((void **)(&dev_a), n * sizeof(int)), "src/CudaControler.cu", 40); 
#line 41 "src/CudaControler.cu"
gpuAssert(cudaMemcpy(dev_a, a, n * sizeof(int), cudaMemcpyHostToDevice), "src/CudaControler.cu", 41); 
#line 43 "src/CudaControler.cu"
} 
#line 1 "tmpxft_00000aa0_00000000-9_CudaControler.cudafe1.stub.c"

#pragma pack()
#line 1 "tmpxft_00000aa0_00000000-9_CudaControler.cudafe1.stub.c"
#line 1 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-9_CudaControler.cudafe1.stub.c"



#line 5 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-9_CudaControler.cudafe1.stub.c"
#line 1 "include/cu\\crt/host_runtime.h"






















#line 24 "include/cu\\crt/host_runtime.h"





































#line 62 "include/cu\\crt/host_runtime.h"

template <typename T>
static inline T *__cudaAddressOf(T &val) 
{
    return (T *)((void *)(&(const_cast<char &>(reinterpret_cast<const volatile char &>(val)))));
}





        












extern "C" cudaError_t __stdcall __cudaPopCallConfiguration(
  dim3         *gridDim,
  dim3         *blockDim,
  size_t       *sharedMem,
  void         *stream
);




        


          


        


#line 106 "include/cu\\crt/host_runtime.h"

#line 108 "include/cu\\crt/host_runtime.h"




















#line 129 "include/cu\\crt/host_runtime.h"


#line 132 "include/cu\\crt/host_runtime.h"

static void ____nv_dummy_param_ref(void *param) { volatile static void **__ref; __ref = (volatile void **)param; }




extern "C" {
void __cudaRegisterLinkedBinary__NV_MODULE_ID ( void (*)(void **), void *, void *, void (*)(void *));
}




extern "C" {

#pragma data_seg("__nv_module_id")
  static const __declspec(allocate("__nv_module_id")) unsigned char __module_id_str[] = "__NV_MODULE_ID";
#pragma data_seg()




#line 155 "include/cu\\crt/host_runtime.h"









}

extern "C" {
extern void** __stdcall __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __stdcall __cudaRegisterFatBinaryEnd(
  void **fatCubinHandle
);

extern void __stdcall __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __stdcall __cudaRegisterVar(
        void **fatCubinHandle,
        char  *hostVar,
        char  *deviceAddress,
  const char  *deviceName,
        int    ext,
        size_t size,
        int    constant,
        int    global
);

extern void __stdcall __cudaRegisterManagedVar(
        void **fatCubinHandle,
        void **hostVarPtrAddress,
        char  *deviceAddress,
  const char  *deviceName,
        int    ext,
        size_t size,
        int    constant,
        int    global
);

extern char __stdcall __cudaInitModule(
        void **fatCubinHandle
);

extern void __stdcall __cudaRegisterTexture(
        void                    **fatCubinHandle,
  const struct textureReference  *hostVar,
  const void                    **deviceAddress,
  const char                     *deviceName,
        int                       dim,       
        int                       norm,      
        int                        ext        
);

extern void __stdcall __cudaRegisterSurface(
        void                    **fatCubinHandle,
  const struct surfaceReference  *hostVar,
  const void                    **deviceAddress,
  const char                     *deviceName,
        int                       dim,       
        int                       ext        
);

extern void __stdcall __cudaRegisterFunction(
        void   **fatCubinHandle,
  const char    *hostFun,
        char    *deviceFun,
  const char    *deviceName,
        int      thread_limit,
        uint3   *tid,
        uint3   *bid,
        dim3    *bDim,
        dim3    *gDim,
        int     *wSize
);




#line 241 "include/cu\\crt/host_runtime.h"


#line 244 "include/cu\\crt/host_runtime.h"




#line 249 "include/cu\\crt/host_runtime.h"
extern int __cdecl atexit(void(__cdecl *)(void));
#line 251 "include/cu\\crt/host_runtime.h"

}

static void **__cudaFatCubinHandle;

static void __cdecl __cudaUnregisterBinaryUtil(void)
{
  ____nv_dummy_param_ref((void *)&__cudaFatCubinHandle);
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}

static char __nv_init_managed_rt_with_module(void **handle)
{
  return __cudaInitModule(handle);
}

#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\common_functions.h"

























































#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\common_functions.h"




































































































































































































#line 256 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\common_functions.h"









#line 266 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\common_functions.h"

#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"

























































#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"








#line 68 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9955 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"








#line 1 "include/cu\\crt/func_macro.h"






















#line 24 "include/cu\\crt/func_macro.h"








#line 33 "include/cu\\crt/func_macro.h"









#line 43 "include/cu\\crt/func_macro.h"







#line 51 "include/cu\\crt/func_macro.h"

#line 53 "include/cu\\crt/func_macro.h"




#line 58 "include/cu\\crt/func_macro.h"
#line 9964 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"



#pragma warning(disable : 4211)

#line 9970 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"

static inline double rsqrt(double a);

static inline double rcbrt(double a);

static inline double sinpi(double a);

static inline double cospi(double a);

static inline void sincospi(double a, double *sptr, double *cptr);

static inline double erfinv(double a);

static inline double erfcinv(double a);

static inline double normcdfinv(double a);

static inline double normcdf(double a);

static inline double erfcx(double a);

static inline float rsqrtf(float a);

static inline float rcbrtf(float a);

static inline float sinpif(float a);

static inline float cospif(float a);

static inline void sincospif(float a, float *sptr, float *cptr);

static inline float erfinvf(float a);

static inline float erfcinvf(float a);

static inline float normcdfinvf(float a);

static inline float normcdff(float a);

static inline float erfcxf(float a);

static inline int min(int a, int b);

static inline unsigned int umin(unsigned int a, unsigned int b);

static inline long long int llmin(long long int a, long long int b);

static inline unsigned long long int ullmin(unsigned long long int a, unsigned long long int b);

static inline int max(int a, int b);

static inline unsigned int umax(unsigned int a, unsigned int b);

static inline long long int llmax(long long int a, long long int b);

static inline unsigned long long int ullmax(unsigned long long int a, unsigned long long int b);



static inline int __isnan(double a);

#line 10032 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"



static inline void sincos(double a, double *sptr, double *cptr);

#line 10038 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"



static inline double exp10(double a);

static inline float exp10f(float a);

static inline void sincosf(float a, float *sptr, float *cptr);

static inline int __isinf(double a);

#line 10050 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"





#line 10056 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"



static inline int __signbit(double a);

static inline int __finite(double a);

static inline int __signbitl(long double a);

static inline int __signbitf(float a);

static inline int __finitel(long double a);

static inline int __finitef(float a);

static inline int __isinfl(long double a);

static inline int __isinff(float a);

static inline int __isnanl(long double a);

static inline int __isnanf(float a);

#line 10080 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"













































































































































#line 10222 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"



#pragma warning(default: 4211)

#line 10228 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"

#line 10230 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"



#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"

























































#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1167 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"


#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\host_defines.h"

























































#line 59 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\host_defines.h"



















































































































































































#line 239 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\host_defines.h"




#line 244 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\host_defines.h"
#line 1170 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#line 1 "include/cu\\math_constants.h"























































































































































#line 153 "include/cu\\math_constants.h"
#line 1171 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"










#line 1 "include/cu\\crt/func_macro.h"






















#line 24 "include/cu\\crt/func_macro.h"




























#line 53 "include/cu\\crt/func_macro.h"




#line 58 "include/cu\\crt/func_macro.h"
#line 1182 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"



#pragma warning(disable : 4211)

#line 1188 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"



static inline int __isnan(double a)
{
  unsigned long long int l;
  memcpy(&l, &a, sizeof(double));
  return l << 1 > 0xffe0000000000000ull;
}

#line 1199 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"









static inline double exp10(double a)
{
  return pow(10.0, a);
}

static inline float exp10f(float a)
{
    return (float)exp10((double)a);
}

static inline void sincos(double a, double *sptr, double *cptr)
{
  *sptr = sin(a);
  *cptr = cos(a);
}

static inline void sincosf(float a, float *sptr, float *cptr)
{
  double s, c;

  sincos((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

static inline int __isinf(double a)
{
  unsigned long long int l;
  memcpy(&l, &a, sizeof(double));
  return l << 1 == 0xffe0000000000000ull;
}

#line 1241 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"








#line 1250 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"

#line 1252 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"









static inline int __signbit(double a)
{
  signed long long int l;
  memcpy(&l, &a, sizeof(double));
  return l < 0ll;
}











#line 1279 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"

static inline int __finite(double a)
{
  unsigned long long int l;
  memcpy(&l, &a, sizeof(double));
  return l << 1 < 0xffe0000000000000ull;
}





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2636 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"








static inline int __signbitl(long double a)
{
  return __signbit((double)a);
}

static inline int __signbitf(float a)
{
  return __signbit((double)a);
}

static inline int __finitel(long double a)
{
  return __finite((double)a);
}

static inline int __finitef(float a)
{
  return __finite((double)a);
}

static inline int __isinfl(long double a)
{
  return __isinf((double)a);
}

static inline int __isinff(float a)
{
  return __isinf((double)a);
}

static inline int __isnanl(long double a)
{
  return __isnan((double)a);
}

static inline int __isnanf(float a)
{
  return __isnan((double)a);
}























































































































































#line 2835 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"















































#line 2883 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"

#line 2885 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"







static inline double rsqrt(double a)
{
  return 1.0 / sqrt(a);
}

static inline double rcbrt(double a)
{
  double s, t;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return 1.0 / a;
  } 
  s = fabs(a);
  t = exp2(-3.3333333333333333e-1 * log2(s));                
  t = ((t*t) * (-s*t) + 1.0) * (3.3333333333333333e-1*t) + t;


#line 2913 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
  if (__signbit(a))
#line 2915 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
  {
    t = -t;
  }
  return t;
}

static inline double sinpi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return sin (a);
  } 
  if (a == floor(a)) {
    return ((a / 1.0e308) / 1.0e308) / 1.0e308;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  return a;
}

static inline double cospi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (__isinf(a)) {
    return cos (a);
  } 
  if (fabs(a) > 9.0071992547409920e+015) {
    a = 0.0;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  n++;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  if (a == 0.0) {
    a = fabs(a);
  }
  return a;
}

static inline void sincospi(double a, double *sptr, double *cptr)
{
  *sptr = sinpi(a);
  *cptr = cospi(a);
}

static inline double erfinv(double a)
{
  double p, q, t, fa;
  unsigned long long int l;

  fa = fabs(a);
  if (fa >= 1.0) {
    l = 0xfff8000000000000ull;
    memcpy(&t, &l, sizeof(double)); 
    if (fa == 1.0) {
      t = a * exp(1000.0);          
    }
  } else if (fa >= 0.9375) {
    



    t = log1p(-fa);
    t = 1.0 / sqrt(-t);
    p =         2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q =     t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
    if (a < 0.0) t = -t;
  } else if (fa >= 0.75) {
    



    t = a * a - .87890625;
    p =         .21489185007307062000e+0;
    p = p * t - .64200071507209448655e+1;
    p = p * t + .29631331505876308123e+2;
    p = p * t - .47644367129787181803e+2;
    p = p * t + .34810057749357500873e+2;
    p = p * t - .12954198980646771502e+2;
    p = p * t + .25349389220714893917e+1;
    p = p * t - .24758242362823355486e+0;
    p = p * t + .94897362808681080020e-2;
    q =     t - .12831383833953226499e+2;
    q = q * t + .41409991778428888716e+2;
    q = q * t - .53715373448862143349e+2;
    q = q * t + .33880176779595142685e+2;
    q = q * t - .11315360624238054876e+2;
    q = q * t + .20369295047216351160e+1;
    q = q * t - .18611650627372178511e+0;
    q = q * t + .67544512778850945940e-2;
    p = p / q;
    t = a * p;
  } else {
    



    t = a * a - .5625;
    p =       - .23886240104308755900e+2;
    p = p * t + .45560204272689128170e+3;
    p = p * t - .22977467176607144887e+4;
    p = p * t + .46631433533434331287e+4;
    p = p * t - .43799652308386926161e+4;
    p = p * t + .19007153590528134753e+4;
    p = p * t - .30786872642313695280e+3;
    q =     t - .83288327901936570000e+2;
    q = q * t + .92741319160935318800e+3;
    q = q * t - .35088976383877264098e+4;
    q = q * t + .59039348134843665626e+4;
    q = q * t - .48481635430048872102e+4;
    q = q * t + .18997769186453057810e+4;
    q = q * t - .28386514725366621129e+3;
    p = p / q;
    t = a * p;
  }
  return t;
}

static inline double erfcinv(double a)
{
  double t;
  unsigned long long int l;

  if (__isnan(a)) {
    return a + a;
  }
  if (a <= 0.0) {
    l = 0xfff8000000000000ull;
    memcpy(&t, &l, sizeof(double));   
    if (a == 0.0) {
        t = (1.0 - a) * exp(1000.0);  
    }
  } 
  else if (a >= 0.0625) {
    t = erfinv (1.0 - a);
  }
  else if (a >= 1e-100) {
    



    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p =         2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q =     t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
  }
  else {
    



    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p =         6.9952990607058154858e-1;
    p = p * t + 1.9507620287580568829e+0;
    p = p * t + 8.2810030904462690216e-1;
    p = p * t + 1.1279046353630280005e-1;
    p = p * t + 6.0537914739162189689e-3;
    p = p * t + 1.3714329569665128933e-4;
    p = p * t + 1.2964481560643197452e-6;
    p = p * t + 4.6156006321345332510e-9;
    p = p * t + 4.5344689563209398450e-12;
    q =     t + 1.5771922386662040546e+0;
    q = q * t + 2.1238242087454993542e+0;
    q = q * t + 8.4001814918178042919e-1;
    q = q * t + 1.1311889334355782065e-1;
    q = q * t + 6.0574830550097140404e-3;
    q = q * t + 1.3715891988350205065e-4;
    q = q * t + 1.2964671850944981713e-6;
    q = q * t + 4.6156017600933592558e-9;
    q = q * t + 4.5344687377088206783e-12;
    t = p / (q * t);
  }
  return t;
}

static inline double normcdfinv(double a)
{
  return -1.4142135623730951 * erfcinv(a + a);
}

static inline double normcdf(double a)
{
  double ah, al, t1, t2, u1, u2, v1, v2, z;
  if (fabs (a) > 38.5) a = copysign (38.5, a);
  ah = a * 134217729.0;
  u1 = (a - ah) + ah;
  u2 = a - u1;
  v1 = -7.0710678398609161e-01;
  v2 =  2.7995440410322203e-09;
  t1 = a * -7.0710678118654757e-1;
  t2 = (((u1 * v1 - t1) + u1 * v2) + u2 * v1) + u2 * v2;
  t2 = (a * -(-4.8336466567264567e-17)) + t2;
  ah = t1 + t2;
  z = erfc (ah);
  if (a < -1.0) {
    al = (t1 - ah) + t2;
    t1 = -2.0 * ah * z;
    z = t1 * al + z;
  }
  return 0.5 * z;
}

static inline double erfcx(double a)
{
  double x, t1, t2, t3;

  if (__isnan(a)) {
    return a + a;
  }
  x = fabs(a); 
  if (x < 32.0) {
    








  
     
     
    t1 = x - 4.0; 
    t2 = x + 4.0; 
    t2 = t1 / t2;
       
    t1 =         - 3.5602694826817400E-010; 
    t1 = t1 * t2 - 9.7239122591447274E-009; 
    t1 = t1 * t2 - 8.9350224851649119E-009; 
    t1 = t1 * t2 + 1.0404430921625484E-007; 
    t1 = t1 * t2 + 5.8806698585341259E-008; 
    t1 = t1 * t2 - 8.2147414929116908E-007; 
    t1 = t1 * t2 + 3.0956409853306241E-007; 
    t1 = t1 * t2 + 5.7087871844325649E-006; 
    t1 = t1 * t2 - 1.1231787437600085E-005; 
    t1 = t1 * t2 - 2.4399558857200190E-005; 
    t1 = t1 * t2 + 1.5062557169571788E-004; 
    t1 = t1 * t2 - 1.9925637684786154E-004; 
    t1 = t1 * t2 - 7.5777429182785833E-004; 
    t1 = t1 * t2 + 5.0319698792599572E-003; 
    t1 = t1 * t2 - 1.6197733895953217E-002; 
    t1 = t1 * t2 + 3.7167515553018733E-002; 
    t1 = t1 * t2 - 6.6330365827532434E-002; 
    t1 = t1 * t2 + 9.3732834997115544E-002; 
    t1 = t1 * t2 - 1.0103906603555676E-001; 
    t1 = t1 * t2 + 6.8097054254735140E-002; 
    t1 = t1 * t2 + 1.5379652102605428E-002; 
    t1 = t1 * t2 - 1.3962111684056291E-001; 
    t1 = t1 * t2 + 1.2329951186255526E+000; 
      
    t2 = 2.0 * x + 1.0; 
    t1 = t1 / t2;
  } else {
    
    t2 = 1.0 / x;
    t3 = t2 * t2;
    t1 =         -29.53125;
    t1 = t1 * t3 + 6.5625;
    t1 = t1 * t3 - 1.875;
    t1 = t1 * t3 + 0.75;
    t1 = t1 * t3 - 0.5;
    t1 = t1 * t3 + 1.0;
    t2 = t2 * 5.6418958354775628e-001;
    t1 = t1 * t2;
  }
  if (a < 0.0) {
    
    t2 = ((int)(x * 16.0)) * 0.0625;
    t3 = (x - t2) * (x + t2);
    t3 = exp(t2 * t2) * exp(t3);
    t3 = t3 + t3;
    t1 = t3 - t1;
  }
  return t1;
}

static inline float rsqrtf(float a)
{
  return (float)rsqrt((double)a);
}

static inline float rcbrtf(float a)
{
  return (float)rcbrt((double)a);
}

static inline float sinpif(float a)
{
  return (float)sinpi((double)a);
}

static inline float cospif(float a)
{
  return (float)cospi((double)a);
}

static inline void sincospif(float a, float *sptr, float *cptr)
{
  double s, c;

  sincospi((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

static inline float erfinvf(float a)
{
  return (float)erfinv((double)a);
}

static inline float erfcinvf(float a)
{
  return (float)erfcinv((double)a);
}

static inline float normcdfinvf(float a)
{
  return (float)normcdfinv((double)a);
}

static inline float normcdff(float a)
{
  return (float)normcdf((double)a);
}

static inline float erfcxf(float a)
{
  return (float)erfcx((double)a);
}



#pragma warning(default: 4211)

#line 3317 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"

#line 3319 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"

#line 3321 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"




#line 3326 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.hpp"
#line 10234 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"

#line 10236 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"

#line 10238 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"




#line 10243 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\math_functions.h"
#line 268 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\common_functions.h"

#line 270 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\common_functions.h"




#line 275 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\crt\\common_functions.h"
#line 268 "include/cu\\crt/host_runtime.h"

#pragma pack()



#pragma warning(disable: 4099)





#line 280 "include/cu\\crt/host_runtime.h"

#line 282 "include/cu\\crt/host_runtime.h"

#line 284 "include/cu\\crt/host_runtime.h"




#line 289 "include/cu\\crt/host_runtime.h"
#line 6 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-9_CudaControler.cudafe1.stub.c"
#line 1 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-6_CudaControler.fatbin.c"

#line 1 "include/cu\\fatbinary_section.h"

















#line 1 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\fatbinary.h"





































typedef struct fatBinaryHeader * computeFatBinaryFormat_t;
typedef const struct fatBinaryHeader * computeFatBinaryFormat_ct;




#line 45 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\fatbinary.h"



#line 49 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\fatbinary.h"



















struct __declspec(align(8)) fatBinaryHeader
{
  unsigned int           magic;
  unsigned short         version;
  unsigned short         headerSize;
  unsigned long long int fatSize;
};


typedef enum {
  FATBIN_KIND_PTX      = 0x0001,
  FATBIN_KIND_ELF      = 0x0002,
  FATBIN_KIND_OLDCUBIN = 0x0004, 
  FATBIN_KIND_NVVM     = 0x0008,
  FATBIN_KIND_MERCURY  = 0x0010,
} fatBinaryCodeKind;

#line 86 "c:\\users\\usuario\\documents\\github\\sipag\\include\\cu\\fatbinary.h"
#line 19 "include/cu\\fatbinary_section.h"


extern "C" {
#line 23 "include/cu\\fatbinary_section.h"








typedef struct {
  int magic;
  int version;
  const unsigned long long* data;
  void *filename_or_fatbins;  

} __fatBinC_Wrapper_t;

















#line 56 "include/cu\\fatbinary_section.h"




}
#line 62 "include/cu\\fatbinary_section.h"

#line 64 "include/cu\\fatbinary_section.h"
#line 3 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-6_CudaControler.fatbin.c"
#line 4 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-6_CudaControler.fatbin.c"



extern "C" {
#line 9 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-6_CudaControler.fatbin.c"

#pragma data_seg(".nv_fatbin")
static const __declspec(allocate(".nv_fatbin")) unsigned long long fatbinData[]= {0x00100001ba55ed50ull,0x0000000000000330ull,0x0000004001010002ull,0x0000000000000268ull,
0x0000000000000000ull,0x0000001e00010007ull,0x0000000000000000ull,0x0000000000000041ull,
0x0000000000000000ull,0x0000000000000000ull,0x33010102464c457full,0x0000000000000007ull,
0x0000006600be0002ull,0x0000000000000000ull,0x00000000000001c0ull,0x00000000000000c0ull,
0x00380040001e051eull,0x0001000400400003ull,0x7472747368732e00ull,0x747274732e006261ull,
0x746d79732e006261ull,0x746d79732e006261ull,0x78646e68735f6261ull,0x666e692e766e2e00ull,
0x747368732e00006full,0x74732e0062617472ull,0x79732e0062617472ull,0x79732e006261746dull,
0x6e68735f6261746dull,0x692e766e2e007864ull,0x00000000006f666eull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000000ull,0x0000000300000001ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000040ull,0x0000000000000032ull,0x0000000000000000ull,
0x0000000000000001ull,0x0000000000000000ull,0x000000030000000bull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000072ull,0x0000000000000032ull,0x0000000000000000ull,
0x0000000000000001ull,0x0000000000000000ull,0x0000000200000013ull,0x0000000000000000ull,
0x0000000000000000ull,0x00000000000000a8ull,0x0000000000000018ull,0x0000000000000002ull,
0x0000000000000008ull,0x0000000000000018ull,0x0000000500000006ull,0x00000000000001c0ull,
0x0000000000000000ull,0x0000000000000000ull,0x00000000000000a8ull,0x00000000000000a8ull,
0x0000000000000008ull,0x0000000500000001ull,0x0000000000000000ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,0x0000000000000008ull,
0x0000000600000001ull,0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000000ull,0x0000000000000008ull,0x0000004801010001ull,
0x0000000000000040ull,0x000000400000003dull,0x0000001e00060005ull,0x0000000000000000ull,
0x0000000000002041ull,0x0000000000000000ull,0x0000000000000046ull,0x0000000000000000ull,
0x2e27f000020a0d2aull,0x206e6f6973726576ull,0x61742e0a0d352e36ull,0x5f6d732074656772ull,
0x6464612e0a0d3033ull,0x7a69735f73736572ull,0x0a0d0a0d34362065ull,0x000000000a0d0a0dull,

};
#pragma data_seg()


}
#line 44 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-6_CudaControler.fatbin.c"


extern "C" {
#line 48 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-6_CudaControler.fatbin.c"
#pragma data_seg(".nvFatBinSegment")
__declspec(allocate(".nvFatBinSegment")) __declspec(align(8)) static const __fatBinC_Wrapper_t __fatDeviceText= 
	{ 0x466243b1, 1, fatbinData, 0 };
#pragma data_seg()

}
#line 55 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-6_CudaControler.fatbin.c"
#line 7 "c:\\users\\usuario\\appdata\\local\\temp\\tmpxft_00000aa0_00000000-9_CudaControler.cudafe1.stub.c"
static void __nv_cudaEntityRegisterCallback(void **);
static void __sti____cudaRegisterAll(void);
#pragma section(".CRT$XCU",read)
__declspec(allocate(".CRT$XCU"))static void (*__dummy_static_init__sti____cudaRegisterAll[])(void) = {__sti____cudaRegisterAll};
static void __nv_cudaEntityRegisterCallback(
void **__T0)
{
{ volatile static void **__ref; __ref = (volatile void **)__T0; };
__nv_save_fatbinhandle_for_managed_rt(__T0);
}
static void __sti____cudaRegisterAll(void)
{
__cudaFatCubinHandle = __cudaRegisterFatBinary((void*)&__fatDeviceText); { void (*callback_fp)(void **) = (void (*)(void **))(__nv_cudaEntityRegisterCallback); (*callback_fp)(__cudaFatCubinHandle); __cudaRegisterFatBinaryEnd(__cudaFatCubinHandle); } atexit(__cudaUnregisterBinaryUtil);
}
#line 2 "tmpxft_00000aa0_00000000-9_CudaControler.cudafe1.stub.c"
#line 1 "tmpxft_00000aa0_00000000-9_CudaControler.cudafe1.stub.c"

